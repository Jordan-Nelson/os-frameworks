// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:core_foundation_framework/core_foundation_framework.dart'
    as coreFoundation;

/// Bindings for the AudioToolbox Framework
class AudioToolbox {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AudioToolbox(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AudioToolbox.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// The format can use any sample rate. Note that this constant can only appear
  /// in listings of supported formats. It will never appear in a current format.
  late final ffi.Pointer<Float64> _kAudioStreamAnyRate =
      _lookup<Float64>('kAudioStreamAnyRate');

  double get kAudioStreamAnyRate => _kAudioStreamAnyRate.value;

  set kAudioStreamAnyRate(double value) => _kAudioStreamAnyRate.value = value;

  /// Finds an audio component.
  AudioComponent AudioComponentFindNext(
    AudioComponent inComponent,
    ffi.Pointer<AudioComponentDescription> inDesc,
  ) {
    return _AudioComponentFindNext(
      inComponent,
      inDesc,
    );
  }

  late final _AudioComponentFindNextPtr = _lookup<
          ffi.NativeFunction<
              AudioComponent Function(
                  AudioComponent, ffi.Pointer<AudioComponentDescription>)>>(
      'AudioComponentFindNext');
  late final _AudioComponentFindNext = _AudioComponentFindNextPtr.asFunction<
      AudioComponent Function(
          AudioComponent, ffi.Pointer<AudioComponentDescription>)>();

  /// Counts audio components.
  int AudioComponentCount(
    ffi.Pointer<AudioComponentDescription> inDesc,
  ) {
    return _AudioComponentCount(
      inDesc,
    );
  }

  late final _AudioComponentCountPtr = _lookup<
      ffi.NativeFunction<
          UInt32 Function(
              ffi.Pointer<AudioComponentDescription>)>>('AudioComponentCount');
  late final _AudioComponentCount = _AudioComponentCountPtr.asFunction<
      int Function(ffi.Pointer<AudioComponentDescription>)>();

  /// Retrieves the name of an audio component.
  int AudioComponentCopyName(
    AudioComponent inComponent,
    ffi.Pointer<coreFoundation.CFStringRef> outName,
  ) {
    return _AudioComponentCopyName(
      inComponent,
      outName,
    );
  }

  late final _AudioComponentCopyNamePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioComponent, ffi.Pointer<coreFoundation.CFStringRef>)>>(
      'AudioComponentCopyName');
  late final _AudioComponentCopyName = _AudioComponentCopyNamePtr.asFunction<
      int Function(AudioComponent, ffi.Pointer<coreFoundation.CFStringRef>)>();

  /// Retrieve an audio component's description.
  int AudioComponentGetDescription(
    AudioComponent inComponent,
    ffi.Pointer<AudioComponentDescription> outDesc,
  ) {
    return _AudioComponentGetDescription(
      inComponent,
      outDesc,
    );
  }

  late final _AudioComponentGetDescriptionPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioComponent, ffi.Pointer<AudioComponentDescription>)>>(
      'AudioComponentGetDescription');
  late final _AudioComponentGetDescription =
      _AudioComponentGetDescriptionPtr.asFunction<
          int Function(
              AudioComponent, ffi.Pointer<AudioComponentDescription>)>();

  /// Retrieve an audio component's version.
  int AudioComponentGetVersion(
    AudioComponent inComponent,
    ffi.Pointer<UInt32> outVersion,
  ) {
    return _AudioComponentGetVersion(
      inComponent,
      outVersion,
    );
  }

  late final _AudioComponentGetVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioComponent,
              ffi.Pointer<UInt32>)>>('AudioComponentGetVersion');
  late final _AudioComponentGetVersion = _AudioComponentGetVersionPtr
      .asFunction<int Function(AudioComponent, ffi.Pointer<UInt32>)>();

  /// Creates an audio component instance.
  int AudioComponentInstanceNew(
    AudioComponent inComponent,
    ffi.Pointer<AudioComponentInstance> outInstance,
  ) {
    return _AudioComponentInstanceNew(
      inComponent,
      outInstance,
    );
  }

  late final _AudioComponentInstanceNewPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioComponent, ffi.Pointer<AudioComponentInstance>)>>(
      'AudioComponentInstanceNew');
  late final _AudioComponentInstanceNew =
      _AudioComponentInstanceNewPtr.asFunction<
          int Function(AudioComponent, ffi.Pointer<AudioComponentInstance>)>();

  /// Disposes of an audio component instance.
  int AudioComponentInstanceDispose(
    AudioComponentInstance inInstance,
  ) {
    return _AudioComponentInstanceDispose(
      inInstance,
    );
  }

  late final _AudioComponentInstanceDisposePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioComponentInstance)>>(
          'AudioComponentInstanceDispose');
  late final _AudioComponentInstanceDispose = _AudioComponentInstanceDisposePtr
      .asFunction<int Function(AudioComponentInstance)>();

  /// Retrieve the audio component from its instance
  AudioComponent AudioComponentInstanceGetComponent(
    AudioComponentInstance inInstance,
  ) {
    return _AudioComponentInstanceGetComponent(
      inInstance,
    );
  }

  late final _AudioComponentInstanceGetComponentPtr = _lookup<
          ffi.NativeFunction<AudioComponent Function(AudioComponentInstance)>>(
      'AudioComponentInstanceGetComponent');
  late final _AudioComponentInstanceGetComponent =
      _AudioComponentInstanceGetComponentPtr.asFunction<
          AudioComponent Function(AudioComponentInstance)>();

  /// Returns a boolean
  int AudioComponentInstanceCanDo(
    AudioComponentInstance inInstance,
    int inSelectorID,
  ) {
    return _AudioComponentInstanceCanDo(
      inInstance,
      inSelectorID,
    );
  }

  late final _AudioComponentInstanceCanDoPtr = _lookup<
          ffi.NativeFunction<Boolean Function(AudioComponentInstance, SInt16)>>(
      'AudioComponentInstanceCanDo');
  late final _AudioComponentInstanceCanDo = _AudioComponentInstanceCanDoPtr
      .asFunction<int Function(AudioComponentInstance, int)>();

  /// Dynamically registers an AudioComponent within the current process
  AudioComponent AudioComponentRegister(
    ffi.Pointer<AudioComponentDescription> inDesc,
    coreFoundation.CFStringRef inName,
    int inVersion,
    AudioComponentFactoryFunction inFactory,
  ) {
    return _AudioComponentRegister(
      inDesc,
      inName,
      inVersion,
      inFactory,
    );
  }

  late final _AudioComponentRegisterPtr = _lookup<
      ffi.NativeFunction<
          AudioComponent Function(
              ffi.Pointer<AudioComponentDescription>,
              coreFoundation.CFStringRef,
              UInt32,
              AudioComponentFactoryFunction)>>('AudioComponentRegister');
  late final _AudioComponentRegister = _AudioComponentRegisterPtr.asFunction<
      AudioComponent Function(ffi.Pointer<AudioComponentDescription>,
          coreFoundation.CFStringRef, int, AudioComponentFactoryFunction)>();

  /// Fetches the basic configuration info about a given AudioComponent
  int AudioComponentCopyConfigurationInfo(
    AudioComponent inComponent,
    ffi.Pointer<coreFoundation.CFDictionaryRef> outConfigurationInfo,
  ) {
    return _AudioComponentCopyConfigurationInfo(
      inComponent,
      outConfigurationInfo,
    );
  }

  late final _AudioComponentCopyConfigurationInfoPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioComponent,
                  ffi.Pointer<coreFoundation.CFDictionaryRef>)>>(
      'AudioComponentCopyConfigurationInfo');
  late final _AudioComponentCopyConfigurationInfo =
      _AudioComponentCopyConfigurationInfoPtr.asFunction<
          int Function(
              AudioComponent, ffi.Pointer<coreFoundation.CFDictionaryRef>)>();

  /// Tests a specified AudioComponent for API and behavioral conformance.
  int AudioComponentValidate(
    AudioComponent inComponent,
    coreFoundation.CFDictionaryRef inValidationParameters,
    ffi.Pointer<AudioComponentValidationResult> outValidationResult,
  ) {
    return _AudioComponentValidate(
      inComponent,
      inValidationParameters,
      outValidationResult,
    );
  }

  late final _AudioComponentValidatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioComponent, coreFoundation.CFDictionaryRef,
                  ffi.Pointer<AudioComponentValidationResult>)>>(
      'AudioComponentValidate');
  late final _AudioComponentValidate = _AudioComponentValidatePtr.asFunction<
      int Function(AudioComponent, coreFoundation.CFDictionaryRef,
          ffi.Pointer<AudioComponentValidationResult>)>();

  /// Returns The OSStatus value
  int AudioCodecGetPropertyInfo(
    AudioCodec inCodec,
    int inPropertyID,
    ffi.Pointer<UInt32> outSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioCodecGetPropertyInfo(
      inCodec,
      inPropertyID,
      outSize,
      outWritable,
    );
  }

  late final _AudioCodecGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioCodec,
              AudioCodecPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioCodecGetPropertyInfo');
  late final _AudioCodecGetPropertyInfo =
      _AudioCodecGetPropertyInfoPtr.asFunction<
          int Function(
              AudioCodec, int, ffi.Pointer<UInt32>, ffi.Pointer<Boolean>)>();

  /// Returns The OSStatus value
  int AudioCodecGetProperty(
    AudioCodec inCodec,
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioCodecGetProperty(
      inCodec,
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioCodecGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioCodec,
              AudioCodecPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioCodecGetProperty');
  late final _AudioCodecGetProperty = _AudioCodecGetPropertyPtr.asFunction<
      int Function(
          AudioCodec, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Returns The OSStatus value
  int AudioCodecSetProperty(
    AudioCodec inCodec,
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioCodecSetProperty(
      inCodec,
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioCodecSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioCodec, AudioCodecPropertyID, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioCodecSetProperty');
  late final _AudioCodecSetProperty = _AudioCodecSetPropertyPtr.asFunction<
      int Function(AudioCodec, int, int, ffi.Pointer<ffi.Void>)>();

  /// Returns The OSStatus value
  int AudioCodecInitialize(
    AudioCodec inCodec,
    ffi.Pointer<AudioStreamBasicDescription> inInputFormat,
    ffi.Pointer<AudioStreamBasicDescription> inOutputFormat,
    ffi.Pointer<ffi.Void> inMagicCookie,
    int inMagicCookieByteSize,
  ) {
    return _AudioCodecInitialize(
      inCodec,
      inInputFormat,
      inOutputFormat,
      inMagicCookie,
      inMagicCookieByteSize,
    );
  }

  late final _AudioCodecInitializePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioCodec,
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<ffi.Void>,
              UInt32)>>('AudioCodecInitialize');
  late final _AudioCodecInitialize = _AudioCodecInitializePtr.asFunction<
      int Function(
          AudioCodec,
          ffi.Pointer<AudioStreamBasicDescription>,
          ffi.Pointer<AudioStreamBasicDescription>,
          ffi.Pointer<ffi.Void>,
          int)>();

  /// Returns The OSStatus value
  int AudioCodecUninitialize(
    AudioCodec inCodec,
  ) {
    return _AudioCodecUninitialize(
      inCodec,
    );
  }

  late final _AudioCodecUninitializePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioCodec)>>(
          'AudioCodecUninitialize');
  late final _AudioCodecUninitialize =
      _AudioCodecUninitializePtr.asFunction<int Function(AudioCodec)>();

  /// Returns The OSStatus value
  int AudioCodecAppendInputData(
    AudioCodec inCodec,
    ffi.Pointer<ffi.Void> inInputData,
    ffi.Pointer<UInt32> ioInputDataByteSize,
    ffi.Pointer<UInt32> ioNumberPackets,
    ffi.Pointer<AudioStreamPacketDescription> inPacketDescription,
  ) {
    return _AudioCodecAppendInputData(
      inCodec,
      inInputData,
      ioInputDataByteSize,
      ioNumberPackets,
      inPacketDescription,
    );
  }

  late final _AudioCodecAppendInputDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioCodec,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<AudioStreamPacketDescription>)>>(
      'AudioCodecAppendInputData');
  late final _AudioCodecAppendInputData =
      _AudioCodecAppendInputDataPtr.asFunction<
          int Function(
              AudioCodec,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>)>();

  /// Returns The OSStatus value
  int AudioCodecProduceOutputPackets(
    AudioCodec inCodec,
    ffi.Pointer<ffi.Void> outOutputData,
    ffi.Pointer<UInt32> ioOutputDataByteSize,
    ffi.Pointer<UInt32> ioNumberPackets,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescription,
    ffi.Pointer<UInt32> outStatus,
  ) {
    return _AudioCodecProduceOutputPackets(
      inCodec,
      outOutputData,
      ioOutputDataByteSize,
      ioNumberPackets,
      outPacketDescription,
      outStatus,
    );
  }

  late final _AudioCodecProduceOutputPacketsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioCodec,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              ffi.Pointer<UInt32>)>>('AudioCodecProduceOutputPackets');
  late final _AudioCodecProduceOutputPackets =
      _AudioCodecProduceOutputPacketsPtr.asFunction<
          int Function(
              AudioCodec,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              ffi.Pointer<UInt32>)>();

  int AudioCodecAppendInputBufferList(
    AudioCodec inCodec,
    ffi.Pointer<AudioBufferList> inBufferList,
    ffi.Pointer<UInt32> ioNumberPackets,
    ffi.Pointer<AudioStreamPacketDescription> inPacketDescription,
    ffi.Pointer<UInt32> outBytesConsumed,
  ) {
    return _AudioCodecAppendInputBufferList(
      inCodec,
      inBufferList,
      ioNumberPackets,
      inPacketDescription,
      outBytesConsumed,
    );
  }

  late final _AudioCodecAppendInputBufferListPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioCodec,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              ffi.Pointer<UInt32>)>>('AudioCodecAppendInputBufferList');
  late final _AudioCodecAppendInputBufferList =
      _AudioCodecAppendInputBufferListPtr.asFunction<
          int Function(
              AudioCodec,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              ffi.Pointer<UInt32>)>();

  int AudioCodecProduceOutputBufferList(
    AudioCodec inCodec,
    ffi.Pointer<AudioBufferList> ioBufferList,
    ffi.Pointer<UInt32> ioNumberPackets,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescription,
    ffi.Pointer<UInt32> outStatus,
  ) {
    return _AudioCodecProduceOutputBufferList(
      inCodec,
      ioBufferList,
      ioNumberPackets,
      outPacketDescription,
      outStatus,
    );
  }

  late final _AudioCodecProduceOutputBufferListPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioCodec,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              ffi.Pointer<UInt32>)>>('AudioCodecProduceOutputBufferList');
  late final _AudioCodecProduceOutputBufferList =
      _AudioCodecProduceOutputBufferListPtr.asFunction<
          int Function(
              AudioCodec,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              ffi.Pointer<UInt32>)>();

  /// Returns the OSStatus value
  int AudioCodecReset(
    AudioCodec inCodec,
  ) {
    return _AudioCodecReset(
      inCodec,
    );
  }

  late final _AudioCodecResetPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioCodec)>>(
          'AudioCodecReset');
  late final _AudioCodecReset =
      _AudioCodecResetPtr.asFunction<int Function(AudioCodec)>();

  /// Notification generated when the set of available AudioComponents changes.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioComponentRegistrationsChangedNotification =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioComponentRegistrationsChangedNotification');

  coreFoundation.CFStringRef
      get kAudioComponentRegistrationsChangedNotification =>
          _kAudioComponentRegistrationsChangedNotification.value;

  set kAudioComponentRegistrationsChangedNotification(
          coreFoundation.CFStringRef value) =>
      _kAudioComponentRegistrationsChangedNotification.value = value;

  /// Notification generated when the connection to an audio unit extension
  /// process is invalidated.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioComponentInstanceInvalidationNotification =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioComponentInstanceInvalidationNotification');

  coreFoundation.CFStringRef
      get kAudioComponentInstanceInvalidationNotification =>
          _kAudioComponentInstanceInvalidationNotification.value;

  set kAudioComponentInstanceInvalidationNotification(
          coreFoundation.CFStringRef value) =>
      _kAudioComponentInstanceInvalidationNotification.value = value;

  /// initialize an audio unit
  int AudioUnitInitialize(
    AudioUnit inUnit,
  ) {
    return _AudioUnitInitialize(
      inUnit,
    );
  }

  late final _AudioUnitInitializePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioUnit)>>(
          'AudioUnitInitialize');
  late final _AudioUnitInitialize =
      _AudioUnitInitializePtr.asFunction<int Function(AudioUnit)>();

  /// uninitialize an audio unit
  int AudioUnitUninitialize(
    AudioUnit inUnit,
  ) {
    return _AudioUnitUninitialize(
      inUnit,
    );
  }

  late final _AudioUnitUninitializePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioUnit)>>(
          'AudioUnitUninitialize');
  late final _AudioUnitUninitialize =
      _AudioUnitUninitializePtr.asFunction<int Function(AudioUnit)>();

  /// retrieves information about a specified property
  int AudioUnitGetPropertyInfo(
    AudioUnit inUnit,
    int inID,
    int inScope,
    int inElement,
    ffi.Pointer<UInt32> outDataSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioUnitGetPropertyInfo(
      inUnit,
      inID,
      inScope,
      inElement,
      outDataSize,
      outWritable,
    );
  }

  late final _AudioUnitGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              AudioUnitPropertyID,
              AudioUnitScope,
              AudioUnitElement,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioUnitGetPropertyInfo');
  late final _AudioUnitGetPropertyInfo =
      _AudioUnitGetPropertyInfoPtr.asFunction<
          int Function(AudioUnit, int, int, int, ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>();

  /// retrieves the value of a specified property
  int AudioUnitGetProperty(
    AudioUnit inUnit,
    int inID,
    int inScope,
    int inElement,
    ffi.Pointer<ffi.Void> outData,
    ffi.Pointer<UInt32> ioDataSize,
  ) {
    return _AudioUnitGetProperty(
      inUnit,
      inID,
      inScope,
      inElement,
      outData,
      ioDataSize,
    );
  }

  late final _AudioUnitGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              AudioUnitPropertyID,
              AudioUnitScope,
              AudioUnitElement,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioUnitGetProperty');
  late final _AudioUnitGetProperty = _AudioUnitGetPropertyPtr.asFunction<
      int Function(AudioUnit, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UInt32>)>();

  /// sets the value of a specified property
  int AudioUnitSetProperty(
    AudioUnit inUnit,
    int inID,
    int inScope,
    int inElement,
    ffi.Pointer<ffi.Void> inData,
    int inDataSize,
  ) {
    return _AudioUnitSetProperty(
      inUnit,
      inID,
      inScope,
      inElement,
      inData,
      inDataSize,
    );
  }

  late final _AudioUnitSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              AudioUnitPropertyID,
              AudioUnitScope,
              AudioUnitElement,
              ffi.Pointer<ffi.Void>,
              UInt32)>>('AudioUnitSetProperty');
  late final _AudioUnitSetProperty = _AudioUnitSetPropertyPtr.asFunction<
      int Function(AudioUnit, int, int, int, ffi.Pointer<ffi.Void>, int)>();

  /// registration call to receive notifications for when a property changes
  int AudioUnitAddPropertyListener(
    AudioUnit inUnit,
    int inID,
    AudioUnitPropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inProcUserData,
  ) {
    return _AudioUnitAddPropertyListener(
      inUnit,
      inID,
      inProc,
      inProcUserData,
    );
  }

  late final _AudioUnitAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              AudioUnitPropertyID,
              AudioUnitPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioUnitAddPropertyListener');
  late final _AudioUnitAddPropertyListener =
      _AudioUnitAddPropertyListenerPtr.asFunction<
          int Function(AudioUnit, int, AudioUnitPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>();

  /// remove a previously registered property listener
  int AudioUnitRemovePropertyListenerWithUserData(
    AudioUnit inUnit,
    int inID,
    AudioUnitPropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inProcUserData,
  ) {
    return _AudioUnitRemovePropertyListenerWithUserData(
      inUnit,
      inID,
      inProc,
      inProcUserData,
    );
  }

  late final _AudioUnitRemovePropertyListenerWithUserDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioUnit, AudioUnitPropertyID,
                  AudioUnitPropertyListenerProc, ffi.Pointer<ffi.Void>)>>(
      'AudioUnitRemovePropertyListenerWithUserData');
  late final _AudioUnitRemovePropertyListenerWithUserData =
      _AudioUnitRemovePropertyListenerWithUserDataPtr.asFunction<
          int Function(AudioUnit, int, AudioUnitPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>();

  /// a notification callback to call when an audio unit is asked to render
  int AudioUnitAddRenderNotify(
    AudioUnit inUnit,
    AURenderCallback inProc,
    ffi.Pointer<ffi.Void> inProcUserData,
  ) {
    return _AudioUnitAddRenderNotify(
      inUnit,
      inProc,
      inProcUserData,
    );
  }

  late final _AudioUnitAddRenderNotifyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioUnit, AURenderCallback,
              ffi.Pointer<ffi.Void>)>>('AudioUnitAddRenderNotify');
  late final _AudioUnitAddRenderNotify =
      _AudioUnitAddRenderNotifyPtr.asFunction<
          int Function(AudioUnit, AURenderCallback, ffi.Pointer<ffi.Void>)>();

  /// remove a previously registered render notification proc
  int AudioUnitRemoveRenderNotify(
    AudioUnit inUnit,
    AURenderCallback inProc,
    ffi.Pointer<ffi.Void> inProcUserData,
  ) {
    return _AudioUnitRemoveRenderNotify(
      inUnit,
      inProc,
      inProcUserData,
    );
  }

  late final _AudioUnitRemoveRenderNotifyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioUnit, AURenderCallback,
              ffi.Pointer<ffi.Void>)>>('AudioUnitRemoveRenderNotify');
  late final _AudioUnitRemoveRenderNotify =
      _AudioUnitRemoveRenderNotifyPtr.asFunction<
          int Function(AudioUnit, AURenderCallback, ffi.Pointer<ffi.Void>)>();

  /// Get the value of a parameter
  int AudioUnitGetParameter(
    AudioUnit inUnit,
    int inID,
    int inScope,
    int inElement,
    ffi.Pointer<AudioUnitParameterValue> outValue,
  ) {
    return _AudioUnitGetParameter(
      inUnit,
      inID,
      inScope,
      inElement,
      outValue,
    );
  }

  late final _AudioUnitGetParameterPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              AudioUnitParameterID,
              AudioUnitScope,
              AudioUnitElement,
              ffi.Pointer<AudioUnitParameterValue>)>>('AudioUnitGetParameter');
  late final _AudioUnitGetParameter = _AudioUnitGetParameterPtr.asFunction<
      int Function(
          AudioUnit, int, int, int, ffi.Pointer<AudioUnitParameterValue>)>();

  /// Set the value of a parameter
  int AudioUnitSetParameter(
    AudioUnit inUnit,
    int inID,
    int inScope,
    int inElement,
    double inValue,
    int inBufferOffsetInFrames,
  ) {
    return _AudioUnitSetParameter(
      inUnit,
      inID,
      inScope,
      inElement,
      inValue,
      inBufferOffsetInFrames,
    );
  }

  late final _AudioUnitSetParameterPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              AudioUnitParameterID,
              AudioUnitScope,
              AudioUnitElement,
              AudioUnitParameterValue,
              UInt32)>>('AudioUnitSetParameter');
  late final _AudioUnitSetParameter = _AudioUnitSetParameterPtr.asFunction<
      int Function(AudioUnit, int, int, int, double, int)>();

  /// Schedule changes to the value of a parameter
  int AudioUnitScheduleParameters(
    AudioUnit inUnit,
    ffi.Pointer<AudioUnitParameterEvent> inParameterEvent,
    int inNumParamEvents,
  ) {
    return _AudioUnitScheduleParameters(
      inUnit,
      inParameterEvent,
      inNumParamEvents,
    );
  }

  late final _AudioUnitScheduleParametersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioUnit, ffi.Pointer<AudioUnitParameterEvent>,
              UInt32)>>('AudioUnitScheduleParameters');
  late final _AudioUnitScheduleParameters =
      _AudioUnitScheduleParametersPtr.asFunction<
          int Function(AudioUnit, ffi.Pointer<AudioUnitParameterEvent>, int)>();

  /// the render operation where ioData will contain the results of the audio
  /// unit's render operations
  int AudioUnitRender(
    AudioUnit inUnit,
    ffi.Pointer<AudioUnitRenderActionFlags> ioActionFlags,
    ffi.Pointer<AudioTimeStamp> inTimeStamp,
    int inOutputBusNumber,
    int inNumberFrames,
    ffi.Pointer<AudioBufferList> ioData,
  ) {
    return _AudioUnitRender(
      inUnit,
      ioActionFlags,
      inTimeStamp,
      inOutputBusNumber,
      inNumberFrames,
      ioData,
    );
  }

  late final _AudioUnitRenderPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              ffi.Pointer<AudioUnitRenderActionFlags>,
              ffi.Pointer<AudioTimeStamp>,
              UInt32,
              UInt32,
              ffi.Pointer<AudioBufferList>)>>('AudioUnitRender');
  late final _AudioUnitRender = _AudioUnitRenderPtr.asFunction<
      int Function(
          AudioUnit,
          ffi.Pointer<AudioUnitRenderActionFlags>,
          ffi.Pointer<AudioTimeStamp>,
          int,
          int,
          ffi.Pointer<AudioBufferList>)>();

  int AudioUnitProcess(
    AudioUnit inUnit,
    ffi.Pointer<AudioUnitRenderActionFlags> ioActionFlags,
    ffi.Pointer<AudioTimeStamp> inTimeStamp,
    int inNumberFrames,
    ffi.Pointer<AudioBufferList> ioData,
  ) {
    return _AudioUnitProcess(
      inUnit,
      ioActionFlags,
      inTimeStamp,
      inNumberFrames,
      ioData,
    );
  }

  late final _AudioUnitProcessPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit,
              ffi.Pointer<AudioUnitRenderActionFlags>,
              ffi.Pointer<AudioTimeStamp>,
              UInt32,
              ffi.Pointer<AudioBufferList>)>>('AudioUnitProcess');
  late final _AudioUnitProcess = _AudioUnitProcessPtr.asFunction<
      int Function(AudioUnit, ffi.Pointer<AudioUnitRenderActionFlags>,
          ffi.Pointer<AudioTimeStamp>, int, ffi.Pointer<AudioBufferList>)>();

  int AudioUnitProcessMultiple(
    AudioUnit inUnit,
    ffi.Pointer<AudioUnitRenderActionFlags> ioActionFlags,
    ffi.Pointer<AudioTimeStamp> inTimeStamp,
    int inNumberFrames,
    int inNumberInputBufferLists,
    ffi.Pointer<ffi.Pointer<AudioBufferList>> inInputBufferLists,
    int inNumberOutputBufferLists,
    ffi.Pointer<ffi.Pointer<AudioBufferList>> ioOutputBufferLists,
  ) {
    return _AudioUnitProcessMultiple(
      inUnit,
      ioActionFlags,
      inTimeStamp,
      inNumberFrames,
      inNumberInputBufferLists,
      inInputBufferLists,
      inNumberOutputBufferLists,
      ioOutputBufferLists,
    );
  }

  late final _AudioUnitProcessMultiplePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioUnit,
                  ffi.Pointer<AudioUnitRenderActionFlags>,
                  ffi.Pointer<AudioTimeStamp>,
                  UInt32,
                  UInt32,
                  ffi.Pointer<ffi.Pointer<AudioBufferList>>,
                  UInt32,
                  ffi.Pointer<ffi.Pointer<AudioBufferList>>)>>(
      'AudioUnitProcessMultiple');
  late final _AudioUnitProcessMultiple =
      _AudioUnitProcessMultiplePtr.asFunction<
          int Function(
              AudioUnit,
              ffi.Pointer<AudioUnitRenderActionFlags>,
              ffi.Pointer<AudioTimeStamp>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<AudioBufferList>>,
              int,
              ffi.Pointer<ffi.Pointer<AudioBufferList>>)>();

  /// reset an audio unit's render state
  int AudioUnitReset(
    AudioUnit inUnit,
    int inScope,
    int inElement,
  ) {
    return _AudioUnitReset(
      inUnit,
      inScope,
      inElement,
    );
  }

  late final _AudioUnitResetPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioUnit, AudioUnitScope, AudioUnitElement)>>('AudioUnitReset');
  late final _AudioUnitReset =
      _AudioUnitResetPtr.asFunction<int Function(AudioUnit, int, int)>();

  /// Register an audio output unit as available to be used as an audio unit by
  /// other applications.
  int AudioOutputUnitPublish(
    ffi.Pointer<AudioComponentDescription> inDesc,
    coreFoundation.CFStringRef inName,
    int inVersion,
    AudioUnit inOutputUnit,
  ) {
    return _AudioOutputUnitPublish(
      inDesc,
      inName,
      inVersion,
      inOutputUnit,
    );
  }

  late final _AudioOutputUnitPublishPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<AudioComponentDescription>,
              coreFoundation.CFStringRef,
              UInt32,
              AudioUnit)>>('AudioOutputUnitPublish');
  late final _AudioOutputUnitPublish = _AudioOutputUnitPublishPtr.asFunction<
      int Function(ffi.Pointer<AudioComponentDescription>,
          coreFoundation.CFStringRef, int, AudioUnit)>();

  /// Fetches the time at which the application publishing the component was
  /// last active.
  double AudioComponentGetLastActiveTime(
    AudioComponent comp,
  ) {
    return _AudioComponentGetLastActiveTime(
      comp,
    );
  }

  late final _AudioComponentGetLastActiveTimePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFAbsoluteTime Function(
              AudioComponent)>>('AudioComponentGetLastActiveTime');
  late final _AudioComponentGetLastActiveTime =
      _AudioComponentGetLastActiveTimePtr.asFunction<
          double Function(AudioComponent)>();

  /// Allows the implementor of an audio unit extension to dynamically modify
  /// the list of component registrations for the extension.
  int AudioUnitExtensionSetComponentList(
    coreFoundation.CFStringRef extensionIdentifier,
    coreFoundation.CFArrayRef audioComponentInfo,
  ) {
    return _AudioUnitExtensionSetComponentList(
      extensionIdentifier,
      audioComponentInfo,
    );
  }

  late final _AudioUnitExtensionSetComponentListPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFStringRef, coreFoundation.CFArrayRef)>>(
      'AudioUnitExtensionSetComponentList');
  late final _AudioUnitExtensionSetComponentList =
      _AudioUnitExtensionSetComponentListPtr.asFunction<
          int Function(
              coreFoundation.CFStringRef, coreFoundation.CFArrayRef)>();

  /// Returns the component registrations for a given audio unit extension.
  coreFoundation.CFArrayRef AudioUnitExtensionCopyComponentList(
    coreFoundation.CFStringRef extensionIdentifier,
  ) {
    return _AudioUnitExtensionCopyComponentList(
      extensionIdentifier,
    );
  }

  late final _AudioUnitExtensionCopyComponentListPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFArrayRef Function(coreFoundation.CFStringRef)>>(
      'AudioUnitExtensionCopyComponentList');
  late final _AudioUnitExtensionCopyComponentList =
      _AudioUnitExtensionCopyComponentListPtr.asFunction<
          coreFoundation.CFArrayRef Function(coreFoundation.CFStringRef)>();

  int AudioOutputUnitStart(
    AudioUnit ci,
  ) {
    return _AudioOutputUnitStart(
      ci,
    );
  }

  late final _AudioOutputUnitStartPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioUnit)>>(
          'AudioOutputUnitStart');
  late final _AudioOutputUnitStart =
      _AudioOutputUnitStartPtr.asFunction<int Function(AudioUnit)>();

  int AudioOutputUnitStop(
    AudioUnit ci,
  ) {
    return _AudioOutputUnitStop(
      ci,
    );
  }

  late final _AudioOutputUnitStopPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioUnit)>>(
          'AudioOutputUnitStop');
  late final _AudioOutputUnitStop =
      _AudioOutputUnitStopPtr.asFunction<int Function(AudioUnit)>();

  /// Create a new AudioConverter.
  int AudioConverterNew(
    ffi.Pointer<AudioStreamBasicDescription> inSourceFormat,
    ffi.Pointer<AudioStreamBasicDescription> inDestinationFormat,
    ffi.Pointer<AudioConverterRef> outAudioConverter,
  ) {
    return _AudioConverterNew(
      inSourceFormat,
      inDestinationFormat,
      outAudioConverter,
    );
  }

  late final _AudioConverterNewPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioConverterRef>)>>('AudioConverterNew');
  late final _AudioConverterNew = _AudioConverterNewPtr.asFunction<
      int Function(
          ffi.Pointer<AudioStreamBasicDescription>,
          ffi.Pointer<AudioStreamBasicDescription>,
          ffi.Pointer<AudioConverterRef>)>();

  /// Create a new AudioConverter using specific codecs.
  int AudioConverterNewSpecific(
    ffi.Pointer<AudioStreamBasicDescription> inSourceFormat,
    ffi.Pointer<AudioStreamBasicDescription> inDestinationFormat,
    int inNumberClassDescriptions,
    ffi.Pointer<AudioClassDescription> inClassDescriptions,
    ffi.Pointer<AudioConverterRef> outAudioConverter,
  ) {
    return _AudioConverterNewSpecific(
      inSourceFormat,
      inDestinationFormat,
      inNumberClassDescriptions,
      inClassDescriptions,
      outAudioConverter,
    );
  }

  late final _AudioConverterNewSpecificPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioStreamBasicDescription>,
              UInt32,
              ffi.Pointer<AudioClassDescription>,
              ffi.Pointer<AudioConverterRef>)>>('AudioConverterNewSpecific');
  late final _AudioConverterNewSpecific =
      _AudioConverterNewSpecificPtr.asFunction<
          int Function(
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioStreamBasicDescription>,
              int,
              ffi.Pointer<AudioClassDescription>,
              ffi.Pointer<AudioConverterRef>)>();

  /// Destroy an AudioConverter.
  int AudioConverterDispose(
    AudioConverterRef inAudioConverter,
  ) {
    return _AudioConverterDispose(
      inAudioConverter,
    );
  }

  late final _AudioConverterDisposePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioConverterRef)>>(
          'AudioConverterDispose');
  late final _AudioConverterDispose =
      _AudioConverterDisposePtr.asFunction<int Function(AudioConverterRef)>();

  /// Reset an AudioConverter
  int AudioConverterReset(
    AudioConverterRef inAudioConverter,
  ) {
    return _AudioConverterReset(
      inAudioConverter,
    );
  }

  late final _AudioConverterResetPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioConverterRef)>>(
          'AudioConverterReset');
  late final _AudioConverterReset =
      _AudioConverterResetPtr.asFunction<int Function(AudioConverterRef)>();

  /// Returns information about an AudioConverter property.
  int AudioConverterGetPropertyInfo(
    AudioConverterRef inAudioConverter,
    int inPropertyID,
    ffi.Pointer<UInt32> outSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioConverterGetPropertyInfo(
      inAudioConverter,
      inPropertyID,
      outSize,
      outWritable,
    );
  }

  late final _AudioConverterGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioConverterRef,
              AudioConverterPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioConverterGetPropertyInfo');
  late final _AudioConverterGetPropertyInfo =
      _AudioConverterGetPropertyInfoPtr.asFunction<
          int Function(AudioConverterRef, int, ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>();

  /// Returns an AudioConverter property value.
  int AudioConverterGetProperty(
    AudioConverterRef inAudioConverter,
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioConverterGetProperty(
      inAudioConverter,
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioConverterGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioConverterRef,
              AudioConverterPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioConverterGetProperty');
  late final _AudioConverterGetProperty =
      _AudioConverterGetPropertyPtr.asFunction<
          int Function(AudioConverterRef, int, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// Sets an AudioConverter property value.
  int AudioConverterSetProperty(
    AudioConverterRef inAudioConverter,
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioConverterSetProperty(
      inAudioConverter,
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioConverterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioConverterRef, AudioConverterPropertyID, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioConverterSetProperty');
  late final _AudioConverterSetProperty =
      _AudioConverterSetPropertyPtr.asFunction<
          int Function(AudioConverterRef, int, int, ffi.Pointer<ffi.Void>)>();

  /// Converts data from an input buffer to an output buffer.
  int AudioConverterConvertBuffer(
    AudioConverterRef inAudioConverter,
    int inInputDataSize,
    ffi.Pointer<ffi.Void> inInputData,
    ffi.Pointer<UInt32> ioOutputDataSize,
    ffi.Pointer<ffi.Void> outOutputData,
  ) {
    return _AudioConverterConvertBuffer(
      inAudioConverter,
      inInputDataSize,
      inInputData,
      ioOutputDataSize,
      outOutputData,
    );
  }

  late final _AudioConverterConvertBufferPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioConverterRef,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioConverterConvertBuffer');
  late final _AudioConverterConvertBuffer =
      _AudioConverterConvertBufferPtr.asFunction<
          int Function(AudioConverterRef, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Converts data supplied by an input callback function, supporting
  /// non-interleaved and packetized formats.
  int AudioConverterFillComplexBuffer(
    AudioConverterRef inAudioConverter,
    AudioConverterComplexInputDataProc inInputDataProc,
    ffi.Pointer<ffi.Void> inInputDataProcUserData,
    ffi.Pointer<UInt32> ioOutputDataPacketSize,
    ffi.Pointer<AudioBufferList> outOutputData,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescription,
  ) {
    return _AudioConverterFillComplexBuffer(
      inAudioConverter,
      inInputDataProc,
      inInputDataProcUserData,
      ioOutputDataPacketSize,
      outOutputData,
      outPacketDescription,
    );
  }

  late final _AudioConverterFillComplexBufferPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioConverterRef,
                  AudioConverterComplexInputDataProc,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<AudioBufferList>,
                  ffi.Pointer<AudioStreamPacketDescription>)>>(
      'AudioConverterFillComplexBuffer');
  late final _AudioConverterFillComplexBuffer =
      _AudioConverterFillComplexBufferPtr.asFunction<
          int Function(
              AudioConverterRef,
              AudioConverterComplexInputDataProc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioBufferList>,
              ffi.Pointer<AudioStreamPacketDescription>)>();

  /// Converts PCM data from an input buffer list to an output buffer list.
  int AudioConverterConvertComplexBuffer(
    AudioConverterRef inAudioConverter,
    int inNumberPCMFrames,
    ffi.Pointer<AudioBufferList> inInputData,
    ffi.Pointer<AudioBufferList> outOutputData,
  ) {
    return _AudioConverterConvertComplexBuffer(
      inAudioConverter,
      inNumberPCMFrames,
      inInputData,
      outOutputData,
    );
  }

  late final _AudioConverterConvertComplexBufferPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioConverterRef, UInt32,
                  ffi.Pointer<AudioBufferList>, ffi.Pointer<AudioBufferList>)>>(
      'AudioConverterConvertComplexBuffer');
  late final _AudioConverterConvertComplexBuffer =
      _AudioConverterConvertComplexBufferPtr.asFunction<
          int Function(AudioConverterRef, int, ffi.Pointer<AudioBufferList>,
              ffi.Pointer<AudioBufferList>)>();

  int AudioConverterFillBuffer(
    AudioConverterRef inAudioConverter,
    AudioConverterInputDataProc inInputDataProc,
    ffi.Pointer<ffi.Void> inInputDataProcUserData,
    ffi.Pointer<UInt32> ioOutputDataSize,
    ffi.Pointer<ffi.Void> outOutputData,
  ) {
    return _AudioConverterFillBuffer(
      inAudioConverter,
      inInputDataProc,
      inInputDataProcUserData,
      ioOutputDataSize,
      outOutputData,
    );
  }

  late final _AudioConverterFillBufferPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioConverterRef,
              AudioConverterInputDataProc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioConverterFillBuffer');
  late final _AudioConverterFillBuffer =
      _AudioConverterFillBufferPtr.asFunction<
          int Function(
              AudioConverterRef,
              AudioConverterInputDataProc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// creates a new audio file (or initialises an existing file)
  int AudioFileCreateWithURL(
    coreFoundation.CFURLRef inFileRef,
    int inFileType,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileCreateWithURL(
      inFileRef,
      inFileType,
      inFormat,
      inFlags,
      outAudioFile,
    );
  }

  late final _AudioFileCreateWithURLPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFURLRef,
              AudioFileTypeID,
              ffi.Pointer<AudioStreamBasicDescription>,
              AudioFileFlags,
              ffi.Pointer<AudioFileID>)>>('AudioFileCreateWithURL');
  late final _AudioFileCreateWithURL = _AudioFileCreateWithURLPtr.asFunction<
      int Function(
          coreFoundation.CFURLRef,
          int,
          ffi.Pointer<AudioStreamBasicDescription>,
          int,
          ffi.Pointer<AudioFileID>)>();

  /// Open an existing audio file.
  int AudioFileOpenURL(
    coreFoundation.CFURLRef inFileRef,
    int inPermissions,
    int inFileTypeHint,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileOpenURL(
      inFileRef,
      inPermissions,
      inFileTypeHint,
      outAudioFile,
    );
  }

  late final _AudioFileOpenURLPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFURLRef, AudioFilePermissions,
              AudioFileTypeID, ffi.Pointer<AudioFileID>)>>('AudioFileOpenURL');
  late final _AudioFileOpenURL = _AudioFileOpenURLPtr.asFunction<
      int Function(
          coreFoundation.CFURLRef, int, int, ffi.Pointer<AudioFileID>)>();

  /// Wipe clean an existing file. You provide callbacks that the AudioFile API
  /// will use to get the data.
  int AudioFileInitializeWithCallbacks(
    ffi.Pointer<ffi.Void> inClientData,
    AudioFile_ReadProc inReadFunc,
    AudioFile_WriteProc inWriteFunc,
    AudioFile_GetSizeProc inGetSizeFunc,
    AudioFile_SetSizeProc inSetSizeFunc,
    int inFileType,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileInitializeWithCallbacks(
      inClientData,
      inReadFunc,
      inWriteFunc,
      inGetSizeFunc,
      inSetSizeFunc,
      inFileType,
      inFormat,
      inFlags,
      outAudioFile,
    );
  }

  late final _AudioFileInitializeWithCallbacksPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              AudioFileTypeID,
              ffi.Pointer<AudioStreamBasicDescription>,
              AudioFileFlags,
              ffi.Pointer<AudioFileID>)>>('AudioFileInitializeWithCallbacks');
  late final _AudioFileInitializeWithCallbacks =
      _AudioFileInitializeWithCallbacksPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              int,
              ffi.Pointer<AudioStreamBasicDescription>,
              int,
              ffi.Pointer<AudioFileID>)>();

  /// Open an existing file. You provide callbacks that the AudioFile API will
  /// use to get the data.
  int AudioFileOpenWithCallbacks(
    ffi.Pointer<ffi.Void> inClientData,
    AudioFile_ReadProc inReadFunc,
    AudioFile_WriteProc inWriteFunc,
    AudioFile_GetSizeProc inGetSizeFunc,
    AudioFile_SetSizeProc inSetSizeFunc,
    int inFileTypeHint,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileOpenWithCallbacks(
      inClientData,
      inReadFunc,
      inWriteFunc,
      inGetSizeFunc,
      inSetSizeFunc,
      inFileTypeHint,
      outAudioFile,
    );
  }

  late final _AudioFileOpenWithCallbacksPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              AudioFileTypeID,
              ffi.Pointer<AudioFileID>)>>('AudioFileOpenWithCallbacks');
  late final _AudioFileOpenWithCallbacks =
      _AudioFileOpenWithCallbacksPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              int,
              ffi.Pointer<AudioFileID>)>();

  /// Close an existing audio file.
  int AudioFileClose(
    AudioFileID inAudioFile,
  ) {
    return _AudioFileClose(
      inAudioFile,
    );
  }

  late final _AudioFileClosePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioFileID)>>(
          'AudioFileClose');
  late final _AudioFileClose =
      _AudioFileClosePtr.asFunction<int Function(AudioFileID)>();

  /// Move the audio data to the end of the file and other internal
  /// optimizations of the file structure.
  int AudioFileOptimize(
    AudioFileID inAudioFile,
  ) {
    return _AudioFileOptimize(
      inAudioFile,
    );
  }

  late final _AudioFileOptimizePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioFileID)>>(
          'AudioFileOptimize');
  late final _AudioFileOptimize =
      _AudioFileOptimizePtr.asFunction<int Function(AudioFileID)>();

  /// Read bytes of audio data from the audio file.
  int AudioFileReadBytes(
    AudioFileID inAudioFile,
    int inUseCache,
    int inStartingByte,
    ffi.Pointer<UInt32> ioNumBytes,
    ffi.Pointer<ffi.Void> outBuffer,
  ) {
    return _AudioFileReadBytes(
      inAudioFile,
      inUseCache,
      inStartingByte,
      ioNumBytes,
      outBuffer,
    );
  }

  late final _AudioFileReadBytesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, Boolean, SInt64, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileReadBytes');
  late final _AudioFileReadBytes = _AudioFileReadBytesPtr.asFunction<
      int Function(
          AudioFileID, int, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Write bytes of audio data to the audio file.
  int AudioFileWriteBytes(
    AudioFileID inAudioFile,
    int inUseCache,
    int inStartingByte,
    ffi.Pointer<UInt32> ioNumBytes,
    ffi.Pointer<ffi.Void> inBuffer,
  ) {
    return _AudioFileWriteBytes(
      inAudioFile,
      inUseCache,
      inStartingByte,
      ioNumBytes,
      inBuffer,
    );
  }

  late final _AudioFileWriteBytesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, Boolean, SInt64, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileWriteBytes');
  late final _AudioFileWriteBytes = _AudioFileWriteBytesPtr.asFunction<
      int Function(
          AudioFileID, int, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Read packets of audio data from the audio file.
  int AudioFileReadPacketData(
    AudioFileID inAudioFile,
    int inUseCache,
    ffi.Pointer<UInt32> ioNumBytes,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescriptions,
    int inStartingPacket,
    ffi.Pointer<UInt32> ioNumPackets,
    ffi.Pointer<ffi.Void> outBuffer,
  ) {
    return _AudioFileReadPacketData(
      inAudioFile,
      inUseCache,
      ioNumBytes,
      outPacketDescriptions,
      inStartingPacket,
      ioNumPackets,
      outBuffer,
    );
  }

  late final _AudioFileReadPacketDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileID,
              Boolean,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileReadPacketData');
  late final _AudioFileReadPacketData = _AudioFileReadPacketDataPtr.asFunction<
      int Function(
          AudioFileID,
          int,
          ffi.Pointer<UInt32>,
          ffi.Pointer<AudioStreamPacketDescription>,
          int,
          ffi.Pointer<UInt32>,
          ffi.Pointer<ffi.Void>)>();

  /// Read packets of audio data from the audio file.
  int AudioFileReadPackets(
    AudioFileID inAudioFile,
    int inUseCache,
    ffi.Pointer<UInt32> outNumBytes,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescriptions,
    int inStartingPacket,
    ffi.Pointer<UInt32> ioNumPackets,
    ffi.Pointer<ffi.Void> outBuffer,
  ) {
    return _AudioFileReadPackets(
      inAudioFile,
      inUseCache,
      outNumBytes,
      outPacketDescriptions,
      inStartingPacket,
      ioNumPackets,
      outBuffer,
    );
  }

  late final _AudioFileReadPacketsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileID,
              Boolean,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileReadPackets');
  late final _AudioFileReadPackets = _AudioFileReadPacketsPtr.asFunction<
      int Function(
          AudioFileID,
          int,
          ffi.Pointer<UInt32>,
          ffi.Pointer<AudioStreamPacketDescription>,
          int,
          ffi.Pointer<UInt32>,
          ffi.Pointer<ffi.Void>)>();

  /// Write packets of audio data to the audio file.
  int AudioFileWritePackets(
    AudioFileID inAudioFile,
    int inUseCache,
    int inNumBytes,
    ffi.Pointer<AudioStreamPacketDescription> inPacketDescriptions,
    int inStartingPacket,
    ffi.Pointer<UInt32> ioNumPackets,
    ffi.Pointer<ffi.Void> inBuffer,
  ) {
    return _AudioFileWritePackets(
      inAudioFile,
      inUseCache,
      inNumBytes,
      inPacketDescriptions,
      inStartingPacket,
      ioNumPackets,
      inBuffer,
    );
  }

  late final _AudioFileWritePacketsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileID,
              Boolean,
              UInt32,
              ffi.Pointer<AudioStreamPacketDescription>,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileWritePackets');
  late final _AudioFileWritePackets = _AudioFileWritePacketsPtr.asFunction<
      int Function(
          AudioFileID,
          int,
          int,
          ffi.Pointer<AudioStreamPacketDescription>,
          int,
          ffi.Pointer<UInt32>,
          ffi.Pointer<ffi.Void>)>();

  /// Get the number of user data items with a certain ID in the file
  int AudioFileCountUserData(
    AudioFileID inAudioFile,
    int inUserDataID,
    ffi.Pointer<UInt32> outNumberItems,
  ) {
    return _AudioFileCountUserData(
      inAudioFile,
      inUserDataID,
      outNumberItems,
    );
  }

  late final _AudioFileCountUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, UInt32,
              ffi.Pointer<UInt32>)>>('AudioFileCountUserData');
  late final _AudioFileCountUserData = _AudioFileCountUserDataPtr.asFunction<
      int Function(AudioFileID, int, ffi.Pointer<UInt32>)>();

  /// Get the size of user data in a file
  int AudioFileGetUserDataSize(
    AudioFileID inAudioFile,
    int inUserDataID,
    int inIndex,
    ffi.Pointer<UInt32> outUserDataSize,
  ) {
    return _AudioFileGetUserDataSize(
      inAudioFile,
      inUserDataID,
      inIndex,
      outUserDataSize,
    );
  }

  late final _AudioFileGetUserDataSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, UInt32, UInt32,
              ffi.Pointer<UInt32>)>>('AudioFileGetUserDataSize');
  late final _AudioFileGetUserDataSize = _AudioFileGetUserDataSizePtr
      .asFunction<int Function(AudioFileID, int, int, ffi.Pointer<UInt32>)>();

  /// Get the data of a chunk in a file.
  int AudioFileGetUserData(
    AudioFileID inAudioFile,
    int inUserDataID,
    int inIndex,
    ffi.Pointer<UInt32> ioUserDataSize,
    ffi.Pointer<ffi.Void> outUserData,
  ) {
    return _AudioFileGetUserData(
      inAudioFile,
      inUserDataID,
      inIndex,
      ioUserDataSize,
      outUserData,
    );
  }

  late final _AudioFileGetUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, UInt32, UInt32, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileGetUserData');
  late final _AudioFileGetUserData = _AudioFileGetUserDataPtr.asFunction<
      int Function(
          AudioFileID, int, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Set the data of a chunk in a file.
  int AudioFileSetUserData(
    AudioFileID inAudioFile,
    int inUserDataID,
    int inIndex,
    int inUserDataSize,
    ffi.Pointer<ffi.Void> inUserData,
  ) {
    return _AudioFileSetUserData(
      inAudioFile,
      inUserDataID,
      inIndex,
      inUserDataSize,
      inUserData,
    );
  }

  late final _AudioFileSetUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, UInt32, UInt32, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioFileSetUserData');
  late final _AudioFileSetUserData = _AudioFileSetUserDataPtr.asFunction<
      int Function(AudioFileID, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// Remove a user chunk in a file.
  int AudioFileRemoveUserData(
    AudioFileID inAudioFile,
    int inUserDataID,
    int inIndex,
  ) {
    return _AudioFileRemoveUserData(
      inAudioFile,
      inUserDataID,
      inIndex,
    );
  }

  late final _AudioFileRemoveUserDataPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(AudioFileID, UInt32, UInt32)>>(
      'AudioFileRemoveUserData');
  late final _AudioFileRemoveUserData = _AudioFileRemoveUserDataPtr.asFunction<
      int Function(AudioFileID, int, int)>();

  /// Get information about the size of a property of an AudioFile and whether
  /// it can be set.
  int AudioFileGetPropertyInfo(
    AudioFileID inAudioFile,
    int inPropertyID,
    ffi.Pointer<UInt32> outDataSize,
    ffi.Pointer<UInt32> isWritable,
  ) {
    return _AudioFileGetPropertyInfo(
      inAudioFile,
      inPropertyID,
      outDataSize,
      isWritable,
    );
  }

  late final _AudioFileGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileID,
              AudioFilePropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('AudioFileGetPropertyInfo');
  late final _AudioFileGetPropertyInfo =
      _AudioFileGetPropertyInfoPtr.asFunction<
          int Function(
              AudioFileID, int, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  /// Copies the value for a property of an AudioFile into a buffer.
  int AudioFileGetProperty(
    AudioFileID inAudioFile,
    int inPropertyID,
    ffi.Pointer<UInt32> ioDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioFileGetProperty(
      inAudioFile,
      inPropertyID,
      ioDataSize,
      outPropertyData,
    );
  }

  late final _AudioFileGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileID,
              AudioFilePropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileGetProperty');
  late final _AudioFileGetProperty = _AudioFileGetPropertyPtr.asFunction<
      int Function(
          AudioFileID, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Sets the value for a property of an AudioFile .
  int AudioFileSetProperty(
    AudioFileID inAudioFile,
    int inPropertyID,
    int inDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioFileSetProperty(
      inAudioFile,
      inPropertyID,
      inDataSize,
      inPropertyData,
    );
  }

  late final _AudioFileSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileID, AudioFilePropertyID, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioFileSetProperty');
  late final _AudioFileSetProperty = _AudioFileSetPropertyPtr.asFunction<
      int Function(AudioFileID, int, int, ffi.Pointer<ffi.Void>)>();

  /// Get the size of a global property.
  int AudioFileGetGlobalInfoSize(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> outDataSize,
  ) {
    return _AudioFileGetGlobalInfoSize(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      outDataSize,
    );
  }

  late final _AudioFileGetGlobalInfoSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFilePropertyID, UInt32, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioFileGetGlobalInfoSize');
  late final _AudioFileGetGlobalInfoSize =
      _AudioFileGetGlobalInfoSizePtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>();

  /// Copies the value for a global property into a buffer.
  int AudioFileGetGlobalInfo(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> ioDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioFileGetGlobalInfo(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      ioDataSize,
      outPropertyData,
    );
  }

  late final _AudioFileGetGlobalInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFilePropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileGetGlobalInfo');
  late final _AudioFileGetGlobalInfo = _AudioFileGetGlobalInfoPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>,
          ffi.Pointer<ffi.Void>)>();

  /// creates a new audio file
  int AudioFileCreate(
    ffi.Pointer<FSRef> inParentRef,
    coreFoundation.CFStringRef inFileName,
    int inFileType,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
    ffi.Pointer<FSRef> outNewFileRef,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileCreate(
      inParentRef,
      inFileName,
      inFileType,
      inFormat,
      inFlags,
      outNewFileRef,
      outAudioFile,
    );
  }

  late final _AudioFileCreatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<FSRef>,
              coreFoundation.CFStringRef,
              AudioFileTypeID,
              ffi.Pointer<AudioStreamBasicDescription>,
              AudioFileFlags,
              ffi.Pointer<FSRef>,
              ffi.Pointer<AudioFileID>)>>('AudioFileCreate');
  late final _AudioFileCreate = _AudioFileCreatePtr.asFunction<
      int Function(
          ffi.Pointer<FSRef>,
          coreFoundation.CFStringRef,
          int,
          ffi.Pointer<AudioStreamBasicDescription>,
          int,
          ffi.Pointer<FSRef>,
          ffi.Pointer<AudioFileID>)>();

  /// Write over an existing audio file.
  int AudioFileInitialize(
    ffi.Pointer<FSRef> inFileRef,
    int inFileType,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileInitialize(
      inFileRef,
      inFileType,
      inFormat,
      inFlags,
      outAudioFile,
    );
  }

  late final _AudioFileInitializePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<FSRef>,
              AudioFileTypeID,
              ffi.Pointer<AudioStreamBasicDescription>,
              AudioFileFlags,
              ffi.Pointer<AudioFileID>)>>('AudioFileInitialize');
  late final _AudioFileInitialize = _AudioFileInitializePtr.asFunction<
      int Function(
          ffi.Pointer<FSRef>,
          int,
          ffi.Pointer<AudioStreamBasicDescription>,
          int,
          ffi.Pointer<AudioFileID>)>();

  /// Open an existing audio file.
  int AudioFileOpen(
    ffi.Pointer<FSRef> inFileRef,
    int inPermissions,
    int inFileTypeHint,
    ffi.Pointer<AudioFileID> outAudioFile,
  ) {
    return _AudioFileOpen(
      inFileRef,
      inPermissions,
      inFileTypeHint,
      outAudioFile,
    );
  }

  late final _AudioFileOpenPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(ffi.Pointer<FSRef>, AudioFilePermissions,
              AudioFileTypeID, ffi.Pointer<AudioFileID>)>>('AudioFileOpen');
  late final _AudioFileOpen = _AudioFileOpenPtr.asFunction<
      int Function(ffi.Pointer<FSRef>, int, int, ffi.Pointer<AudioFileID>)>();

  int AudioFileStreamOpen(
    ffi.Pointer<ffi.Void> inClientData,
    AudioFileStream_PropertyListenerProc inPropertyListenerProc,
    AudioFileStream_PacketsProc inPacketsProc,
    int inFileTypeHint,
    ffi.Pointer<AudioFileStreamID> outAudioFileStream,
  ) {
    return _AudioFileStreamOpen(
      inClientData,
      inPropertyListenerProc,
      inPacketsProc,
      inFileTypeHint,
      outAudioFileStream,
    );
  }

  late final _AudioFileStreamOpenPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<ffi.Void>,
              AudioFileStream_PropertyListenerProc,
              AudioFileStream_PacketsProc,
              AudioFileTypeID,
              ffi.Pointer<AudioFileStreamID>)>>('AudioFileStreamOpen');
  late final _AudioFileStreamOpen = _AudioFileStreamOpenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, AudioFileStream_PropertyListenerProc,
          AudioFileStream_PacketsProc, int, ffi.Pointer<AudioFileStreamID>)>();

  int AudioFileStreamParseBytes(
    AudioFileStreamID inAudioFileStream,
    int inDataByteSize,
    ffi.Pointer<ffi.Void> inData,
    int inFlags,
  ) {
    return _AudioFileStreamParseBytes(
      inAudioFileStream,
      inDataByteSize,
      inData,
      inFlags,
    );
  }

  late final _AudioFileStreamParseBytesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileStreamID, UInt32, ffi.Pointer<ffi.Void>,
              AudioFileStreamParseFlags)>>('AudioFileStreamParseBytes');
  late final _AudioFileStreamParseBytes =
      _AudioFileStreamParseBytesPtr.asFunction<
          int Function(AudioFileStreamID, int, ffi.Pointer<ffi.Void>, int)>();

  int AudioFileStreamSeek(
    AudioFileStreamID inAudioFileStream,
    int inPacketOffset,
    ffi.Pointer<SInt64> outDataByteOffset,
    ffi.Pointer<AudioFileStreamSeekFlags> ioFlags,
  ) {
    return _AudioFileStreamSeek(
      inAudioFileStream,
      inPacketOffset,
      outDataByteOffset,
      ioFlags,
    );
  }

  late final _AudioFileStreamSeekPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileStreamID, SInt64, ffi.Pointer<SInt64>,
              ffi.Pointer<AudioFileStreamSeekFlags>)>>('AudioFileStreamSeek');
  late final _AudioFileStreamSeek = _AudioFileStreamSeekPtr.asFunction<
      int Function(AudioFileStreamID, int, ffi.Pointer<SInt64>,
          ffi.Pointer<AudioFileStreamSeekFlags>)>();

  /// Returns an OSStatus return code
  int AudioFileStreamGetPropertyInfo(
    AudioFileStreamID inAudioFileStream,
    int inPropertyID,
    ffi.Pointer<UInt32> outPropertyDataSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioFileStreamGetPropertyInfo(
      inAudioFileStream,
      inPropertyID,
      outPropertyDataSize,
      outWritable,
    );
  }

  late final _AudioFileStreamGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileStreamID,
              AudioFileStreamPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioFileStreamGetPropertyInfo');
  late final _AudioFileStreamGetPropertyInfo =
      _AudioFileStreamGetPropertyInfoPtr.asFunction<
          int Function(AudioFileStreamID, int, ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>();

  /// Returns an OSStatus return code
  int AudioFileStreamGetProperty(
    AudioFileStreamID inAudioFileStream,
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioFileStreamGetProperty(
      inAudioFileStream,
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioFileStreamGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileStreamID,
              AudioFileStreamPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileStreamGetProperty');
  late final _AudioFileStreamGetProperty =
      _AudioFileStreamGetPropertyPtr.asFunction<
          int Function(AudioFileStreamID, int, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// Returns an OSStatus return code
  int AudioFileStreamSetProperty(
    AudioFileStreamID inAudioFileStream,
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioFileStreamSetProperty(
      inAudioFileStream,
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioFileStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileStreamID, AudioFileStreamPropertyID,
              UInt32, ffi.Pointer<ffi.Void>)>>('AudioFileStreamSetProperty');
  late final _AudioFileStreamSetProperty =
      _AudioFileStreamSetPropertyPtr.asFunction<
          int Function(AudioFileStreamID, int, int, ffi.Pointer<ffi.Void>)>();

  int AudioFileStreamClose(
    AudioFileStreamID inAudioFileStream,
  ) {
    return _AudioFileStreamClose(
      inAudioFileStream,
    );
  }

  late final _AudioFileStreamClosePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioFileStreamID)>>(
          'AudioFileStreamClose');
  late final _AudioFileStreamClose =
      _AudioFileStreamClosePtr.asFunction<int Function(AudioFileStreamID)>();

  /// Retrieve information about the given property
  int AudioFormatGetPropertyInfo(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> outPropertyDataSize,
  ) {
    return _AudioFormatGetPropertyInfo(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      outPropertyDataSize,
    );
  }

  late final _AudioFormatGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFormatPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioFormatGetPropertyInfo');
  late final _AudioFormatGetPropertyInfo =
      _AudioFormatGetPropertyInfoPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>();

  /// Retrieve the indicated property data
  int AudioFormatGetProperty(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioFormatGetProperty(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioFormatGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFormatPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFormatGetProperty');
  late final _AudioFormatGetProperty = _AudioFormatGetPropertyPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>,
          ffi.Pointer<ffi.Void>)>();

  /// Creates a new audio queue for playing audio data.
  int AudioQueueNewOutput(
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    AudioQueueOutputCallback inCallbackProc,
    ffi.Pointer<ffi.Void> inUserData,
    CFRunLoopRef inCallbackRunLoop,
    coreFoundation.CFStringRef inCallbackRunLoopMode,
    int inFlags,
    ffi.Pointer<AudioQueueRef> outAQ,
  ) {
    return _AudioQueueNewOutput(
      inFormat,
      inCallbackProc,
      inUserData,
      inCallbackRunLoop,
      inCallbackRunLoopMode,
      inFlags,
      outAQ,
    );
  }

  late final _AudioQueueNewOutputPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<AudioStreamBasicDescription>,
              AudioQueueOutputCallback,
              ffi.Pointer<ffi.Void>,
              CFRunLoopRef,
              coreFoundation.CFStringRef,
              UInt32,
              ffi.Pointer<AudioQueueRef>)>>('AudioQueueNewOutput');
  late final _AudioQueueNewOutput = _AudioQueueNewOutputPtr.asFunction<
      int Function(
          ffi.Pointer<AudioStreamBasicDescription>,
          AudioQueueOutputCallback,
          ffi.Pointer<ffi.Void>,
          CFRunLoopRef,
          coreFoundation.CFStringRef,
          int,
          ffi.Pointer<AudioQueueRef>)>();

  /// Creates a new audio queue for recording audio data.
  int AudioQueueNewInput(
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    AudioQueueInputCallback inCallbackProc,
    ffi.Pointer<ffi.Void> inUserData,
    CFRunLoopRef inCallbackRunLoop,
    coreFoundation.CFStringRef inCallbackRunLoopMode,
    int inFlags,
    ffi.Pointer<AudioQueueRef> outAQ,
  ) {
    return _AudioQueueNewInput(
      inFormat,
      inCallbackProc,
      inUserData,
      inCallbackRunLoop,
      inCallbackRunLoopMode,
      inFlags,
      outAQ,
    );
  }

  late final _AudioQueueNewInputPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<AudioStreamBasicDescription>,
              AudioQueueInputCallback,
              ffi.Pointer<ffi.Void>,
              CFRunLoopRef,
              coreFoundation.CFStringRef,
              UInt32,
              ffi.Pointer<AudioQueueRef>)>>('AudioQueueNewInput');
  late final _AudioQueueNewInput = _AudioQueueNewInputPtr.asFunction<
      int Function(
          ffi.Pointer<AudioStreamBasicDescription>,
          AudioQueueInputCallback,
          ffi.Pointer<ffi.Void>,
          CFRunLoopRef,
          coreFoundation.CFStringRef,
          int,
          ffi.Pointer<AudioQueueRef>)>();

  /// Disposes an existing audio queue.
  int AudioQueueDispose(
    AudioQueueRef inAQ,
    int inImmediate,
  ) {
    return _AudioQueueDispose(
      inAQ,
      inImmediate,
    );
  }

  late final _AudioQueueDisposePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioQueueRef, Boolean)>>(
          'AudioQueueDispose');
  late final _AudioQueueDispose =
      _AudioQueueDisposePtr.asFunction<int Function(AudioQueueRef, int)>();

  /// Asks an audio queue to allocate a buffer.
  int AudioQueueAllocateBuffer(
    AudioQueueRef inAQ,
    int inBufferByteSize,
    ffi.Pointer<AudioQueueBufferRef> outBuffer,
  ) {
    return _AudioQueueAllocateBuffer(
      inAQ,
      inBufferByteSize,
      outBuffer,
    );
  }

  late final _AudioQueueAllocateBufferPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, UInt32,
              ffi.Pointer<AudioQueueBufferRef>)>>('AudioQueueAllocateBuffer');
  late final _AudioQueueAllocateBuffer =
      _AudioQueueAllocateBufferPtr.asFunction<
          int Function(AudioQueueRef, int, ffi.Pointer<AudioQueueBufferRef>)>();

  /// Asks an audio queue to allocate a buffer with space for packet
  /// descriptions.
  int AudioQueueAllocateBufferWithPacketDescriptions(
    AudioQueueRef inAQ,
    int inBufferByteSize,
    int inNumberPacketDescriptions,
    ffi.Pointer<AudioQueueBufferRef> outBuffer,
  ) {
    return _AudioQueueAllocateBufferWithPacketDescriptions(
      inAQ,
      inBufferByteSize,
      inNumberPacketDescriptions,
      outBuffer,
    );
  }

  late final _AudioQueueAllocateBufferWithPacketDescriptionsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioQueueRef, UInt32, UInt32,
                  ffi.Pointer<AudioQueueBufferRef>)>>(
      'AudioQueueAllocateBufferWithPacketDescriptions');
  late final _AudioQueueAllocateBufferWithPacketDescriptions =
      _AudioQueueAllocateBufferWithPacketDescriptionsPtr.asFunction<
          int Function(
              AudioQueueRef, int, int, ffi.Pointer<AudioQueueBufferRef>)>();

  /// Disposes of an audio queue buffer.
  int AudioQueueFreeBuffer(
    AudioQueueRef inAQ,
    AudioQueueBufferRef inBuffer,
  ) {
    return _AudioQueueFreeBuffer(
      inAQ,
      inBuffer,
    );
  }

  late final _AudioQueueFreeBufferPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef, AudioQueueBufferRef)>>('AudioQueueFreeBuffer');
  late final _AudioQueueFreeBuffer = _AudioQueueFreeBufferPtr.asFunction<
      int Function(AudioQueueRef, AudioQueueBufferRef)>();

  /// Assigns a buffer to an audio queue for recording or playback.
  int AudioQueueEnqueueBuffer(
    AudioQueueRef inAQ,
    AudioQueueBufferRef inBuffer,
    int inNumPacketDescs,
    ffi.Pointer<AudioStreamPacketDescription> inPacketDescs,
  ) {
    return _AudioQueueEnqueueBuffer(
      inAQ,
      inBuffer,
      inNumPacketDescs,
      inPacketDescs,
    );
  }

  late final _AudioQueueEnqueueBufferPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioQueueRef, AudioQueueBufferRef, UInt32,
                  ffi.Pointer<AudioStreamPacketDescription>)>>(
      'AudioQueueEnqueueBuffer');
  late final _AudioQueueEnqueueBuffer = _AudioQueueEnqueueBufferPtr.asFunction<
      int Function(AudioQueueRef, AudioQueueBufferRef, int,
          ffi.Pointer<AudioStreamPacketDescription>)>();

  /// Assigns a buffer to an audio queue for playback, providing parameters and
  /// start time information.
  int AudioQueueEnqueueBufferWithParameters(
    AudioQueueRef inAQ,
    AudioQueueBufferRef inBuffer,
    int inNumPacketDescs,
    ffi.Pointer<AudioStreamPacketDescription> inPacketDescs,
    int inTrimFramesAtStart,
    int inTrimFramesAtEnd,
    int inNumParamValues,
    ffi.Pointer<AudioQueueParameterEvent> inParamValues,
    ffi.Pointer<AudioTimeStamp> inStartTime,
    ffi.Pointer<AudioTimeStamp> outActualStartTime,
  ) {
    return _AudioQueueEnqueueBufferWithParameters(
      inAQ,
      inBuffer,
      inNumPacketDescs,
      inPacketDescs,
      inTrimFramesAtStart,
      inTrimFramesAtEnd,
      inNumParamValues,
      inParamValues,
      inStartTime,
      outActualStartTime,
    );
  }

  late final _AudioQueueEnqueueBufferWithParametersPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioQueueRef,
                  AudioQueueBufferRef,
                  UInt32,
                  ffi.Pointer<AudioStreamPacketDescription>,
                  UInt32,
                  UInt32,
                  UInt32,
                  ffi.Pointer<AudioQueueParameterEvent>,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Pointer<AudioTimeStamp>)>>(
      'AudioQueueEnqueueBufferWithParameters');
  late final _AudioQueueEnqueueBufferWithParameters =
      _AudioQueueEnqueueBufferWithParametersPtr.asFunction<
          int Function(
              AudioQueueRef,
              AudioQueueBufferRef,
              int,
              ffi.Pointer<AudioStreamPacketDescription>,
              int,
              int,
              int,
              ffi.Pointer<AudioQueueParameterEvent>,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<AudioTimeStamp>)>();

  /// Begins playing or recording audio.
  int AudioQueueStart(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioTimeStamp> inStartTime,
  ) {
    return _AudioQueueStart(
      inAQ,
      inStartTime,
    );
  }

  late final _AudioQueueStartPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef, ffi.Pointer<AudioTimeStamp>)>>('AudioQueueStart');
  late final _AudioQueueStart = _AudioQueueStartPtr.asFunction<
      int Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>)>();

  /// Begins decoding buffers in preparation for playback.
  int AudioQueuePrime(
    AudioQueueRef inAQ,
    int inNumberOfFramesToPrepare,
    ffi.Pointer<UInt32> outNumberOfFramesPrepared,
  ) {
    return _AudioQueuePrime(
      inAQ,
      inNumberOfFramesToPrepare,
      outNumberOfFramesPrepared,
    );
  }

  late final _AudioQueuePrimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef, UInt32, ffi.Pointer<UInt32>)>>('AudioQueuePrime');
  late final _AudioQueuePrime = _AudioQueuePrimePtr.asFunction<
      int Function(AudioQueueRef, int, ffi.Pointer<UInt32>)>();

  /// Stops playing or recording audio.
  int AudioQueueStop(
    AudioQueueRef inAQ,
    int inImmediate,
  ) {
    return _AudioQueueStop(
      inAQ,
      inImmediate,
    );
  }

  late final _AudioQueueStopPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioQueueRef, Boolean)>>(
          'AudioQueueStop');
  late final _AudioQueueStop =
      _AudioQueueStopPtr.asFunction<int Function(AudioQueueRef, int)>();

  /// Pauses audio playback or recording.
  int AudioQueuePause(
    AudioQueueRef inAQ,
  ) {
    return _AudioQueuePause(
      inAQ,
    );
  }

  late final _AudioQueuePausePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioQueueRef)>>(
          'AudioQueuePause');
  late final _AudioQueuePause =
      _AudioQueuePausePtr.asFunction<int Function(AudioQueueRef)>();

  /// Resets the audio queue's decoder state.
  int AudioQueueFlush(
    AudioQueueRef inAQ,
  ) {
    return _AudioQueueFlush(
      inAQ,
    );
  }

  late final _AudioQueueFlushPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioQueueRef)>>(
          'AudioQueueFlush');
  late final _AudioQueueFlush =
      _AudioQueueFlushPtr.asFunction<int Function(AudioQueueRef)>();

  /// Resets an audio queue.
  int AudioQueueReset(
    AudioQueueRef inAQ,
  ) {
    return _AudioQueueReset(
      inAQ,
    );
  }

  late final _AudioQueueResetPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioQueueRef)>>(
          'AudioQueueReset');
  late final _AudioQueueReset =
      _AudioQueueResetPtr.asFunction<int Function(AudioQueueRef)>();

  /// Obtains an audio queue parameter value.
  int AudioQueueGetParameter(
    AudioQueueRef inAQ,
    int inParamID,
    ffi.Pointer<AudioQueueParameterValue> outValue,
  ) {
    return _AudioQueueGetParameter(
      inAQ,
      inParamID,
      outValue,
    );
  }

  late final _AudioQueueGetParameterPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioQueueRef, AudioQueueParameterID,
                  ffi.Pointer<AudioQueueParameterValue>)>>(
      'AudioQueueGetParameter');
  late final _AudioQueueGetParameter = _AudioQueueGetParameterPtr.asFunction<
      int Function(
          AudioQueueRef, int, ffi.Pointer<AudioQueueParameterValue>)>();

  /// Sets an audio queue parameter value.
  int AudioQueueSetParameter(
    AudioQueueRef inAQ,
    int inParamID,
    double inValue,
  ) {
    return _AudioQueueSetParameter(
      inAQ,
      inParamID,
      inValue,
    );
  }

  late final _AudioQueueSetParameterPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, AudioQueueParameterID,
              AudioQueueParameterValue)>>('AudioQueueSetParameter');
  late final _AudioQueueSetParameter = _AudioQueueSetParameterPtr.asFunction<
      int Function(AudioQueueRef, int, double)>();

  /// Obtains an audio queue property value.
  int AudioQueueGetProperty(
    AudioQueueRef inAQ,
    int inID,
    ffi.Pointer<ffi.Void> outData,
    ffi.Pointer<UInt32> ioDataSize,
  ) {
    return _AudioQueueGetProperty(
      inAQ,
      inID,
      outData,
      ioDataSize,
    );
  }

  late final _AudioQueueGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef,
              AudioQueuePropertyID,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioQueueGetProperty');
  late final _AudioQueueGetProperty = _AudioQueueGetPropertyPtr.asFunction<
      int Function(
          AudioQueueRef, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>();

  /// Sets an audio queue property value.
  int AudioQueueSetProperty(
    AudioQueueRef inAQ,
    int inID,
    ffi.Pointer<ffi.Void> inData,
    int inDataSize,
  ) {
    return _AudioQueueSetProperty(
      inAQ,
      inID,
      inData,
      inDataSize,
    );
  }

  late final _AudioQueueSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, AudioQueuePropertyID,
              ffi.Pointer<ffi.Void>, UInt32)>>('AudioQueueSetProperty');
  late final _AudioQueueSetProperty = _AudioQueueSetPropertyPtr.asFunction<
      int Function(AudioQueueRef, int, ffi.Pointer<ffi.Void>, int)>();

  /// Obtains the size of an audio queue property.
  int AudioQueueGetPropertySize(
    AudioQueueRef inAQ,
    int inID,
    ffi.Pointer<UInt32> outDataSize,
  ) {
    return _AudioQueueGetPropertySize(
      inAQ,
      inID,
      outDataSize,
    );
  }

  late final _AudioQueueGetPropertySizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, AudioQueuePropertyID,
              ffi.Pointer<UInt32>)>>('AudioQueueGetPropertySize');
  late final _AudioQueueGetPropertySize = _AudioQueueGetPropertySizePtr
      .asFunction<int Function(AudioQueueRef, int, ffi.Pointer<UInt32>)>();

  /// Adds a listener callback for a property.
  int AudioQueueAddPropertyListener(
    AudioQueueRef inAQ,
    int inID,
    AudioQueuePropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inUserData,
  ) {
    return _AudioQueueAddPropertyListener(
      inAQ,
      inID,
      inProc,
      inUserData,
    );
  }

  late final _AudioQueueAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef,
              AudioQueuePropertyID,
              AudioQueuePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioQueueAddPropertyListener');
  late final _AudioQueueAddPropertyListener =
      _AudioQueueAddPropertyListenerPtr.asFunction<
          int Function(AudioQueueRef, int, AudioQueuePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>();

  /// Removes a listener callback for a property.
  int AudioQueueRemovePropertyListener(
    AudioQueueRef inAQ,
    int inID,
    AudioQueuePropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inUserData,
  ) {
    return _AudioQueueRemovePropertyListener(
      inAQ,
      inID,
      inProc,
      inUserData,
    );
  }

  late final _AudioQueueRemovePropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef,
              AudioQueuePropertyID,
              AudioQueuePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioQueueRemovePropertyListener');
  late final _AudioQueueRemovePropertyListener =
      _AudioQueueRemovePropertyListenerPtr.asFunction<
          int Function(AudioQueueRef, int, AudioQueuePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>();

  /// Creates a timeline object.
  int AudioQueueCreateTimeline(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioQueueTimelineRef> outTimeline,
  ) {
    return _AudioQueueCreateTimeline(
      inAQ,
      outTimeline,
    );
  }

  late final _AudioQueueCreateTimelinePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef,
              ffi.Pointer<AudioQueueTimelineRef>)>>('AudioQueueCreateTimeline');
  late final _AudioQueueCreateTimeline =
      _AudioQueueCreateTimelinePtr.asFunction<
          int Function(AudioQueueRef, ffi.Pointer<AudioQueueTimelineRef>)>();

  /// Disposes of a timeline object.
  int AudioQueueDisposeTimeline(
    AudioQueueRef inAQ,
    AudioQueueTimelineRef inTimeline,
  ) {
    return _AudioQueueDisposeTimeline(
      inAQ,
      inTimeline,
    );
  }

  late final _AudioQueueDisposeTimelinePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef,
              AudioQueueTimelineRef)>>('AudioQueueDisposeTimeline');
  late final _AudioQueueDisposeTimeline = _AudioQueueDisposeTimelinePtr
      .asFunction<int Function(AudioQueueRef, AudioQueueTimelineRef)>();

  /// Obtains the current audio queue time.
  int AudioQueueGetCurrentTime(
    AudioQueueRef inAQ,
    AudioQueueTimelineRef inTimeline,
    ffi.Pointer<AudioTimeStamp> outTimeStamp,
    ffi.Pointer<Boolean> outTimelineDiscontinuity,
  ) {
    return _AudioQueueGetCurrentTime(
      inAQ,
      inTimeline,
      outTimeStamp,
      outTimelineDiscontinuity,
    );
  }

  late final _AudioQueueGetCurrentTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioQueueRef,
              AudioQueueTimelineRef,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<Boolean>)>>('AudioQueueGetCurrentTime');
  late final _AudioQueueGetCurrentTime =
      _AudioQueueGetCurrentTimePtr.asFunction<
          int Function(AudioQueueRef, AudioQueueTimelineRef,
              ffi.Pointer<AudioTimeStamp>, ffi.Pointer<Boolean>)>();

  /// Obtains the current time of the audio device associated with an audio
  /// queue.
  int AudioQueueDeviceGetCurrentTime(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioTimeStamp> outTimeStamp,
  ) {
    return _AudioQueueDeviceGetCurrentTime(
      inAQ,
      outTimeStamp,
    );
  }

  late final _AudioQueueDeviceGetCurrentTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef,
              ffi.Pointer<AudioTimeStamp>)>>('AudioQueueDeviceGetCurrentTime');
  late final _AudioQueueDeviceGetCurrentTime =
      _AudioQueueDeviceGetCurrentTimePtr.asFunction<
          int Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>)>();

  /// Converts the time in the time base of the associated audio device from one
  /// representation to another.
  int AudioQueueDeviceTranslateTime(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioTimeStamp> inTime,
    ffi.Pointer<AudioTimeStamp> outTime,
  ) {
    return _AudioQueueDeviceTranslateTime(
      inAQ,
      inTime,
      outTime,
    );
  }

  late final _AudioQueueDeviceTranslateTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<AudioTimeStamp>)>>('AudioQueueDeviceTranslateTime');
  late final _AudioQueueDeviceTranslateTime =
      _AudioQueueDeviceTranslateTimePtr.asFunction<
          int Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<AudioTimeStamp>)>();

  /// Obtains an audio device's start time that is closest to a requested start
  /// time.
  int AudioQueueDeviceGetNearestStartTime(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioTimeStamp> ioRequestedStartTime,
    int inFlags,
  ) {
    return _AudioQueueDeviceGetNearestStartTime(
      inAQ,
      ioRequestedStartTime,
      inFlags,
    );
  }

  late final _AudioQueueDeviceGetNearestStartTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>,
              UInt32)>>('AudioQueueDeviceGetNearestStartTime');
  late final _AudioQueueDeviceGetNearestStartTime =
      _AudioQueueDeviceGetNearestStartTimePtr.asFunction<
          int Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>, int)>();

  /// Specify an audio format to which the queue will perform subsequent offline
  /// rendering, or disable offline rendering.
  int AudioQueueSetOfflineRenderFormat(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    ffi.Pointer<AudioChannelLayout> inLayout,
  ) {
    return _AudioQueueSetOfflineRenderFormat(
      inAQ,
      inFormat,
      inLayout,
    );
  }

  late final _AudioQueueSetOfflineRenderFormatPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioQueueRef,
                  ffi.Pointer<AudioStreamBasicDescription>,
                  ffi.Pointer<AudioChannelLayout>)>>(
      'AudioQueueSetOfflineRenderFormat');
  late final _AudioQueueSetOfflineRenderFormat =
      _AudioQueueSetOfflineRenderFormatPtr.asFunction<
          int Function(AudioQueueRef, ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioChannelLayout>)>();

  /// Obtain a buffer of audio output from a queue in offline rendering mode.
  int AudioQueueOfflineRender(
    AudioQueueRef inAQ,
    ffi.Pointer<AudioTimeStamp> inTimestamp,
    AudioQueueBufferRef ioBuffer,
    int inNumberFrames,
  ) {
    return _AudioQueueOfflineRender(
      inAQ,
      inTimestamp,
      ioBuffer,
      inNumberFrames,
    );
  }

  late final _AudioQueueOfflineRenderPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>,
              AudioQueueBufferRef, UInt32)>>('AudioQueueOfflineRender');
  late final _AudioQueueOfflineRender = _AudioQueueOfflineRenderPtr.asFunction<
      int Function(AudioQueueRef, ffi.Pointer<AudioTimeStamp>,
          AudioQueueBufferRef, int)>();

  /// Create a new processing tap
  int AudioQueueProcessingTapNew(
    AudioQueueRef inAQ,
    AudioQueueProcessingTapCallback inCallback,
    ffi.Pointer<ffi.Void> inClientData,
    int inFlags,
    ffi.Pointer<UInt32> outMaxFrames,
    ffi.Pointer<AudioStreamBasicDescription> outProcessingFormat,
    ffi.Pointer<AudioQueueProcessingTapRef> outAQTap,
  ) {
    return _AudioQueueProcessingTapNew(
      inAQ,
      inCallback,
      inClientData,
      inFlags,
      outMaxFrames,
      outProcessingFormat,
      outAQTap,
    );
  }

  late final _AudioQueueProcessingTapNewPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioQueueRef,
                  AudioQueueProcessingTapCallback,
                  ffi.Pointer<ffi.Void>,
                  AudioQueueProcessingTapFlags,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<AudioStreamBasicDescription>,
                  ffi.Pointer<AudioQueueProcessingTapRef>)>>(
      'AudioQueueProcessingTapNew');
  late final _AudioQueueProcessingTapNew =
      _AudioQueueProcessingTapNewPtr.asFunction<
          int Function(
              AudioQueueRef,
              AudioQueueProcessingTapCallback,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamBasicDescription>,
              ffi.Pointer<AudioQueueProcessingTapRef>)>();

  /// Dispose a processing tap object
  int AudioQueueProcessingTapDispose(
    AudioQueueProcessingTapRef inAQTap,
  ) {
    return _AudioQueueProcessingTapDispose(
      inAQTap,
    );
  }

  late final _AudioQueueProcessingTapDisposePtr = _lookup<
          ffi.NativeFunction<OSStatus Function(AudioQueueProcessingTapRef)>>(
      'AudioQueueProcessingTapDispose');
  late final _AudioQueueProcessingTapDispose =
      _AudioQueueProcessingTapDisposePtr.asFunction<
          int Function(AudioQueueProcessingTapRef)>();

  /// Used by a processing tap to retrieve source audio.
  int AudioQueueProcessingTapGetSourceAudio(
    AudioQueueProcessingTapRef inAQTap,
    int inNumberFrames,
    ffi.Pointer<AudioTimeStamp> ioTimeStamp,
    ffi.Pointer<AudioQueueProcessingTapFlags> outFlags,
    ffi.Pointer<UInt32> outNumberFrames,
    ffi.Pointer<AudioBufferList> ioData,
  ) {
    return _AudioQueueProcessingTapGetSourceAudio(
      inAQTap,
      inNumberFrames,
      ioTimeStamp,
      outFlags,
      outNumberFrames,
      ioData,
    );
  }

  late final _AudioQueueProcessingTapGetSourceAudioPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioQueueProcessingTapRef,
                  UInt32,
                  ffi.Pointer<AudioTimeStamp>,
                  ffi.Pointer<AudioQueueProcessingTapFlags>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<AudioBufferList>)>>(
      'AudioQueueProcessingTapGetSourceAudio');
  late final _AudioQueueProcessingTapGetSourceAudio =
      _AudioQueueProcessingTapGetSourceAudioPtr.asFunction<
          int Function(
              AudioQueueProcessingTapRef,
              int,
              ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<AudioQueueProcessingTapFlags>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioBufferList>)>();

  /// Used by a processing tap to retrieve the queue's current time.
  int AudioQueueProcessingTapGetQueueTime(
    AudioQueueProcessingTapRef inAQTap,
    ffi.Pointer<Float64> outQueueSampleTime,
    ffi.Pointer<UInt32> outQueueFrameCount,
  ) {
    return _AudioQueueProcessingTapGetQueueTime(
      inAQTap,
      outQueueSampleTime,
      outQueueFrameCount,
    );
  }

  late final _AudioQueueProcessingTapGetQueueTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioQueueProcessingTapRef, ffi.Pointer<Float64>,
              ffi.Pointer<UInt32>)>>('AudioQueueProcessingTapGetQueueTime');
  late final _AudioQueueProcessingTapGetQueueTime =
      _AudioQueueProcessingTapGetQueueTimePtr.asFunction<
          int Function(AudioQueueProcessingTapRef, ffi.Pointer<Float64>,
              ffi.Pointer<UInt32>)>();

  /// Prints to standard out a textural description of the AudioObject.
  void AudioObjectShow(
    int inObjectID,
  ) {
    return _AudioObjectShow(
      inObjectID,
    );
  }

  late final _AudioObjectShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioObjectID)>>(
          'AudioObjectShow');
  late final _AudioObjectShow =
      _AudioObjectShowPtr.asFunction<void Function(int)>();

  /// Queries an AudioObject about whether or not it has the given property.
  int AudioObjectHasProperty(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
  ) {
    return _AudioObjectHasProperty(
      inObjectID,
      inAddress,
    );
  }

  late final _AudioObjectHasPropertyPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  AudioObjectID, ffi.Pointer<AudioObjectPropertyAddress>)>>(
      'AudioObjectHasProperty');
  late final _AudioObjectHasProperty = _AudioObjectHasPropertyPtr.asFunction<
      int Function(int, ffi.Pointer<AudioObjectPropertyAddress>)>();

  /// Queries an AudioObject about whether or not the given property can be set
  /// using AudioObjectSetPropertyData.
  int AudioObjectIsPropertySettable(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    ffi.Pointer<Boolean> outIsSettable,
  ) {
    return _AudioObjectIsPropertySettable(
      inObjectID,
      inAddress,
      outIsSettable,
    );
  }

  late final _AudioObjectIsPropertySettablePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              ffi.Pointer<Boolean>)>>('AudioObjectIsPropertySettable');
  late final _AudioObjectIsPropertySettable =
      _AudioObjectIsPropertySettablePtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>,
              ffi.Pointer<Boolean>)>();

  /// Queries an AudioObject to find the size of the data for the given
  /// property.
  int AudioObjectGetPropertyDataSize(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    int inQualifierDataSize,
    ffi.Pointer<ffi.Void> inQualifierData,
    ffi.Pointer<UInt32> outDataSize,
  ) {
    return _AudioObjectGetPropertyDataSize(
      inObjectID,
      inAddress,
      inQualifierDataSize,
      inQualifierData,
      outDataSize,
    );
  }

  late final _AudioObjectGetPropertyDataSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioObjectGetPropertyDataSize');
  late final _AudioObjectGetPropertyDataSize =
      _AudioObjectGetPropertyDataSizePtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>();

  /// Queries an AudioObject to get the data of the given property and places it
  /// in the provided buffer.
  int AudioObjectGetPropertyData(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    int inQualifierDataSize,
    ffi.Pointer<ffi.Void> inQualifierData,
    ffi.Pointer<UInt32> ioDataSize,
    ffi.Pointer<ffi.Void> outData,
  ) {
    return _AudioObjectGetPropertyData(
      inObjectID,
      inAddress,
      inQualifierDataSize,
      inQualifierData,
      ioDataSize,
      outData,
    );
  }

  late final _AudioObjectGetPropertyDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioObjectGetPropertyData');
  late final _AudioObjectGetPropertyData =
      _AudioObjectGetPropertyDataPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<AudioObjectPropertyAddress>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// Tells an AudioObject to change the value of the given property using the
  /// provided data.
  int AudioObjectSetPropertyData(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    int inQualifierDataSize,
    ffi.Pointer<ffi.Void> inQualifierData,
    int inDataSize,
    ffi.Pointer<ffi.Void> inData,
  ) {
    return _AudioObjectSetPropertyData(
      inObjectID,
      inAddress,
      inQualifierDataSize,
      inQualifierData,
      inDataSize,
      inData,
    );
  }

  late final _AudioObjectSetPropertyDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioObjectSetPropertyData');
  late final _AudioObjectSetPropertyData =
      _AudioObjectSetPropertyDataPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>, int,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// Registers the given AudioObjectPropertyListenerProc to receive
  /// notifications when the given properties change.
  int AudioObjectAddPropertyListener(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    AudioObjectPropertyListenerProc inListener,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioObjectAddPropertyListener(
      inObjectID,
      inAddress,
      inListener,
      inClientData,
    );
  }

  late final _AudioObjectAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              AudioObjectPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioObjectAddPropertyListener');
  late final _AudioObjectAddPropertyListener =
      _AudioObjectAddPropertyListenerPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>,
              AudioObjectPropertyListenerProc, ffi.Pointer<ffi.Void>)>();

  /// Unregisters the given AudioObjectPropertyListenerProc from receiving
  /// notifications when the given properties change.
  int AudioObjectRemovePropertyListener(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    AudioObjectPropertyListenerProc inListener,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioObjectRemovePropertyListener(
      inObjectID,
      inAddress,
      inListener,
      inClientData,
    );
  }

  late final _AudioObjectRemovePropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              AudioObjectPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioObjectRemovePropertyListener');
  late final _AudioObjectRemovePropertyListener =
      _AudioObjectRemovePropertyListenerPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>,
              AudioObjectPropertyListenerProc, ffi.Pointer<ffi.Void>)>();

  /// When this routine is called, all IO on all devices within a process will
  /// be terminated and all resources capable of being released will be
  /// released. This routine essentially returns the HAL to its uninitialized
  /// state.
  int AudioHardwareUnload() {
    return _AudioHardwareUnload();
  }

  late final _AudioHardwareUnloadPtr =
      _lookup<ffi.NativeFunction<OSStatus Function()>>('AudioHardwareUnload');
  late final _AudioHardwareUnload =
      _AudioHardwareUnloadPtr.asFunction<int Function()>();

  /// This routine creates a new AudioAggregateDevice using the provided
  /// description.
  int AudioHardwareCreateAggregateDevice(
    coreFoundation.CFDictionaryRef inDescription,
    ffi.Pointer<AudioObjectID> outDeviceID,
  ) {
    return _AudioHardwareCreateAggregateDevice(
      inDescription,
      outDeviceID,
    );
  }

  late final _AudioHardwareCreateAggregateDevicePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFDictionaryRef, ffi.Pointer<AudioObjectID>)>>(
      'AudioHardwareCreateAggregateDevice');
  late final _AudioHardwareCreateAggregateDevice =
      _AudioHardwareCreateAggregateDevicePtr.asFunction<
          int Function(
              coreFoundation.CFDictionaryRef, ffi.Pointer<AudioObjectID>)>();

  /// This routine destroys the given AudioAggregateDevice.
  int AudioHardwareDestroyAggregateDevice(
    int inDeviceID,
  ) {
    return _AudioHardwareDestroyAggregateDevice(
      inDeviceID,
    );
  }

  late final _AudioHardwareDestroyAggregateDevicePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioObjectID)>>(
          'AudioHardwareDestroyAggregateDevice');
  late final _AudioHardwareDestroyAggregateDevice =
      _AudioHardwareDestroyAggregateDevicePtr.asFunction<int Function(int)>();

  /// Creates an AudioDeviceIOProcID from an AudioDeviceIOProc and a client data
  /// pointer.
  int AudioDeviceCreateIOProcID(
    int inDevice,
    AudioDeviceIOProc inProc,
    ffi.Pointer<ffi.Void> inClientData,
    ffi.Pointer<AudioDeviceIOProcID> outIOProcID,
  ) {
    return _AudioDeviceCreateIOProcID(
      inDevice,
      inProc,
      inClientData,
      outIOProcID,
    );
  }

  late final _AudioDeviceCreateIOProcIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              AudioDeviceIOProc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<AudioDeviceIOProcID>)>>('AudioDeviceCreateIOProcID');
  late final _AudioDeviceCreateIOProcID =
      _AudioDeviceCreateIOProcIDPtr.asFunction<
          int Function(int, AudioDeviceIOProc, ffi.Pointer<ffi.Void>,
              ffi.Pointer<AudioDeviceIOProcID>)>();

  /// Destroys an AudioDeviceIOProcID.
  int AudioDeviceDestroyIOProcID(
    int inDevice,
    AudioDeviceIOProcID inIOProcID,
  ) {
    return _AudioDeviceDestroyIOProcID(
      inDevice,
      inIOProcID,
    );
  }

  late final _AudioDeviceDestroyIOProcIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioObjectID,
              AudioDeviceIOProcID)>>('AudioDeviceDestroyIOProcID');
  late final _AudioDeviceDestroyIOProcID = _AudioDeviceDestroyIOProcIDPtr
      .asFunction<int Function(int, AudioDeviceIOProcID)>();

  /// Starts IO for the given AudioDeviceIOProcID.
  int AudioDeviceStart(
    int inDevice,
    AudioDeviceIOProcID inProcID,
  ) {
    return _AudioDeviceStart(
      inDevice,
      inProcID,
    );
  }

  late final _AudioDeviceStartPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID, AudioDeviceIOProcID)>>('AudioDeviceStart');
  late final _AudioDeviceStart =
      _AudioDeviceStartPtr.asFunction<int Function(int, AudioDeviceIOProcID)>();

  /// Starts IO for the given AudioDeviceIOProcID and aligns the IO cycle of the
  /// AudioDevice with the given time.
  int AudioDeviceStartAtTime(
    int inDevice,
    AudioDeviceIOProcID inProcID,
    ffi.Pointer<AudioTimeStamp> ioRequestedStartTime,
    int inFlags,
  ) {
    return _AudioDeviceStartAtTime(
      inDevice,
      inProcID,
      ioRequestedStartTime,
      inFlags,
    );
  }

  late final _AudioDeviceStartAtTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioObjectID, AudioDeviceIOProcID,
              ffi.Pointer<AudioTimeStamp>, UInt32)>>('AudioDeviceStartAtTime');
  late final _AudioDeviceStartAtTime = _AudioDeviceStartAtTimePtr.asFunction<
      int Function(
          int, AudioDeviceIOProcID, ffi.Pointer<AudioTimeStamp>, int)>();

  /// Stops IO for the given AudioDeviceIOProcID.
  int AudioDeviceStop(
    int inDevice,
    AudioDeviceIOProcID inProcID,
  ) {
    return _AudioDeviceStop(
      inDevice,
      inProcID,
    );
  }

  late final _AudioDeviceStopPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID, AudioDeviceIOProcID)>>('AudioDeviceStop');
  late final _AudioDeviceStop =
      _AudioDeviceStopPtr.asFunction<int Function(int, AudioDeviceIOProcID)>();

  /// Retrieves the current time from an AudioDevice. Note that the device has
  /// to be running.
  int AudioDeviceGetCurrentTime(
    int inDevice,
    ffi.Pointer<AudioTimeStamp> outTime,
  ) {
    return _AudioDeviceGetCurrentTime(
      inDevice,
      outTime,
    );
  }

  late final _AudioDeviceGetCurrentTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioObjectID,
              ffi.Pointer<AudioTimeStamp>)>>('AudioDeviceGetCurrentTime');
  late final _AudioDeviceGetCurrentTime = _AudioDeviceGetCurrentTimePtr
      .asFunction<int Function(int, ffi.Pointer<AudioTimeStamp>)>();

  /// Translates the time in the AudioDevice's time base from one representation
  /// to another. Note that the device has to be running
  int AudioDeviceTranslateTime(
    int inDevice,
    ffi.Pointer<AudioTimeStamp> inTime,
    ffi.Pointer<AudioTimeStamp> outTime,
  ) {
    return _AudioDeviceTranslateTime(
      inDevice,
      inTime,
      outTime,
    );
  }

  late final _AudioDeviceTranslateTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioObjectID, ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<AudioTimeStamp>)>>('AudioDeviceTranslateTime');
  late final _AudioDeviceTranslateTime =
      _AudioDeviceTranslateTimePtr.asFunction<
          int Function(
              int, ffi.Pointer<AudioTimeStamp>, ffi.Pointer<AudioTimeStamp>)>();

  /// Query an AudioDevice to get a time equal to or later than the given time
  /// that is the best time to start IO.
  int AudioDeviceGetNearestStartTime(
    int inDevice,
    ffi.Pointer<AudioTimeStamp> ioRequestedStartTime,
    int inFlags,
  ) {
    return _AudioDeviceGetNearestStartTime(
      inDevice,
      ioRequestedStartTime,
      inFlags,
    );
  }

  late final _AudioDeviceGetNearestStartTimePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioObjectID, ffi.Pointer<AudioTimeStamp>,
              UInt32)>>('AudioDeviceGetNearestStartTime');
  late final _AudioDeviceGetNearestStartTime =
      _AudioDeviceGetNearestStartTimePtr.asFunction<
          int Function(int, ffi.Pointer<AudioTimeStamp>, int)>();

  /// Add the given CFRunLoopSource to the the HAL's notification CFRunLoop.
  int AudioHardwareAddRunLoopSource(
    CFRunLoopSourceRef inRunLoopSource,
  ) {
    return _AudioHardwareAddRunLoopSource(
      inRunLoopSource,
    );
  }

  late final _AudioHardwareAddRunLoopSourcePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(CFRunLoopSourceRef)>>(
          'AudioHardwareAddRunLoopSource');
  late final _AudioHardwareAddRunLoopSource = _AudioHardwareAddRunLoopSourcePtr
      .asFunction<int Function(CFRunLoopSourceRef)>();

  /// Remove the given CFRunLoopSource from the the HAL's notification
  /// CFRunLoop.
  int AudioHardwareRemoveRunLoopSource(
    CFRunLoopSourceRef inRunLoopSource,
  ) {
    return _AudioHardwareRemoveRunLoopSource(
      inRunLoopSource,
    );
  }

  late final _AudioHardwareRemoveRunLoopSourcePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(CFRunLoopSourceRef)>>(
          'AudioHardwareRemoveRunLoopSource');
  late final _AudioHardwareRemoveRunLoopSource =
      _AudioHardwareRemoveRunLoopSourcePtr.asFunction<
          int Function(CFRunLoopSourceRef)>();

  /// Retrieve information about the given property.
  int AudioHardwareGetPropertyInfo(
    int inPropertyID,
    ffi.Pointer<UInt32> outSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioHardwareGetPropertyInfo(
      inPropertyID,
      outSize,
      outWritable,
    );
  }

  late final _AudioHardwareGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioHardwarePropertyID, ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioHardwareGetPropertyInfo');
  late final _AudioHardwareGetPropertyInfo =
      _AudioHardwareGetPropertyInfoPtr.asFunction<
          int Function(int, ffi.Pointer<UInt32>, ffi.Pointer<Boolean>)>();

  /// Queries an the AudioSystemObject to get the data of the given property and
  /// places it in the provided buffer.
  int AudioHardwareGetProperty(
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioHardwareGetProperty(
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioHardwareGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioHardwarePropertyID, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioHardwareGetProperty');
  late final _AudioHardwareGetProperty =
      _AudioHardwareGetPropertyPtr.asFunction<
          int Function(int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Tells the AudioSystemObject to change the value of the given property
  /// using the provided data.
  int AudioHardwareSetProperty(
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioHardwareSetProperty(
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioHardwareSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioHardwarePropertyID, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioHardwareSetProperty');
  late final _AudioHardwareSetProperty = _AudioHardwareSetPropertyPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>)>();

  /// Registers the given AudioHardwarePropertyListenerProc to receive
  /// notifications when the given property changes.
  int AudioHardwareAddPropertyListener(
    int inPropertyID,
    AudioHardwarePropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioHardwareAddPropertyListener(
      inPropertyID,
      inProc,
      inClientData,
    );
  }

  late final _AudioHardwareAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioHardwarePropertyID,
              AudioHardwarePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioHardwareAddPropertyListener');
  late final _AudioHardwareAddPropertyListener =
      _AudioHardwareAddPropertyListenerPtr.asFunction<
          int Function(
              int, AudioHardwarePropertyListenerProc, ffi.Pointer<ffi.Void>)>();

  /// Unregisters the given AudioHardwarePropertyListenerProc from receive
  /// notifications when the given property changes.
  int AudioHardwareRemovePropertyListener(
    int inPropertyID,
    AudioHardwarePropertyListenerProc inProc,
  ) {
    return _AudioHardwareRemovePropertyListener(
      inPropertyID,
      inProc,
    );
  }

  late final _AudioHardwareRemovePropertyListenerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioHardwarePropertyID, AudioHardwarePropertyListenerProc)>>(
      'AudioHardwareRemovePropertyListener');
  late final _AudioHardwareRemovePropertyListener =
      _AudioHardwareRemovePropertyListenerPtr.asFunction<
          int Function(int, AudioHardwarePropertyListenerProc)>();

  /// Registers the given AudioDeviceIOProc with the AudioDevice.
  int AudioDeviceAddIOProc(
    int inDevice,
    AudioDeviceIOProc inProc,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioDeviceAddIOProc(
      inDevice,
      inProc,
      inClientData,
    );
  }

  late final _AudioDeviceAddIOProcPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioDeviceID, AudioDeviceIOProc,
              ffi.Pointer<ffi.Void>)>>('AudioDeviceAddIOProc');
  late final _AudioDeviceAddIOProc = _AudioDeviceAddIOProcPtr.asFunction<
      int Function(int, AudioDeviceIOProc, ffi.Pointer<ffi.Void>)>();

  /// Unregisters the given AudioDeviceIOProc from the AudioDevice. This routine
  /// has been deprecated in favor of AudioDeviceDestroyIOProcID().
  int AudioDeviceRemoveIOProc(
    int inDevice,
    AudioDeviceIOProc inProc,
  ) {
    return _AudioDeviceRemoveIOProc(
      inDevice,
      inProc,
    );
  }

  late final _AudioDeviceRemoveIOProcPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioDeviceID, AudioDeviceIOProc)>>('AudioDeviceRemoveIOProc');
  late final _AudioDeviceRemoveIOProc = _AudioDeviceRemoveIOProcPtr.asFunction<
      int Function(int, AudioDeviceIOProc)>();

  /// Read some data from an AudioDevice starting at the given time.
  int AudioDeviceRead(
    int inDevice,
    ffi.Pointer<AudioTimeStamp> inStartTime,
    ffi.Pointer<AudioBufferList> outData,
  ) {
    return _AudioDeviceRead(
      inDevice,
      inStartTime,
      outData,
    );
  }

  late final _AudioDeviceReadPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioDeviceID, ffi.Pointer<AudioTimeStamp>,
              ffi.Pointer<AudioBufferList>)>>('AudioDeviceRead');
  late final _AudioDeviceRead = _AudioDeviceReadPtr.asFunction<
      int Function(
          int, ffi.Pointer<AudioTimeStamp>, ffi.Pointer<AudioBufferList>)>();

  /// Retrieve information about the given property of an AudioDevice.
  int AudioDeviceGetPropertyInfo(
    int inDevice,
    int inChannel,
    int isInput,
    int inPropertyID,
    ffi.Pointer<UInt32> outSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioDeviceGetPropertyInfo(
      inDevice,
      inChannel,
      isInput,
      inPropertyID,
      outSize,
      outWritable,
    );
  }

  late final _AudioDeviceGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioDeviceID,
              UInt32,
              Boolean,
              AudioDevicePropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioDeviceGetPropertyInfo');
  late final _AudioDeviceGetPropertyInfo =
      _AudioDeviceGetPropertyInfoPtr.asFunction<
          int Function(
              int, int, int, int, ffi.Pointer<UInt32>, ffi.Pointer<Boolean>)>();

  /// Queries an the AudioDevice object to get the data of the given property
  /// and places it in the provided buffer.
  int AudioDeviceGetProperty(
    int inDevice,
    int inChannel,
    int isInput,
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioDeviceGetProperty(
      inDevice,
      inChannel,
      isInput,
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioDeviceGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioDeviceID,
              UInt32,
              Boolean,
              AudioDevicePropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioDeviceGetProperty');
  late final _AudioDeviceGetProperty = _AudioDeviceGetPropertyPtr.asFunction<
      int Function(
          int, int, int, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Tells the AudioDevice object to change the value of the given property
  /// using the provided data.
  int AudioDeviceSetProperty(
    int inDevice,
    ffi.Pointer<AudioTimeStamp> inWhen,
    int inChannel,
    int isInput,
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioDeviceSetProperty(
      inDevice,
      inWhen,
      inChannel,
      isInput,
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioDeviceSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioDeviceID,
              ffi.Pointer<AudioTimeStamp>,
              UInt32,
              Boolean,
              AudioDevicePropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioDeviceSetProperty');
  late final _AudioDeviceSetProperty = _AudioDeviceSetPropertyPtr.asFunction<
      int Function(int, ffi.Pointer<AudioTimeStamp>, int, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  /// Registers the given AudioDevicePropertyListenerProc to receive
  /// notifications when the given property changes.
  int AudioDeviceAddPropertyListener(
    int inDevice,
    int inChannel,
    int isInput,
    int inPropertyID,
    AudioDevicePropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioDeviceAddPropertyListener(
      inDevice,
      inChannel,
      isInput,
      inPropertyID,
      inProc,
      inClientData,
    );
  }

  late final _AudioDeviceAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioDeviceID,
              UInt32,
              Boolean,
              AudioDevicePropertyID,
              AudioDevicePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioDeviceAddPropertyListener');
  late final _AudioDeviceAddPropertyListener =
      _AudioDeviceAddPropertyListenerPtr.asFunction<
          int Function(int, int, int, int, AudioDevicePropertyListenerProc,
              ffi.Pointer<ffi.Void>)>();

  /// Unregisters the given AudioDevicePropertyListenerProc from receiving
  /// notifications when the given property changes.
  int AudioDeviceRemovePropertyListener(
    int inDevice,
    int inChannel,
    int isInput,
    int inPropertyID,
    AudioDevicePropertyListenerProc inProc,
  ) {
    return _AudioDeviceRemovePropertyListener(
      inDevice,
      inChannel,
      isInput,
      inPropertyID,
      inProc,
    );
  }

  late final _AudioDeviceRemovePropertyListenerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioDeviceID, UInt32, Boolean,
                  AudioDevicePropertyID, AudioDevicePropertyListenerProc)>>(
      'AudioDeviceRemovePropertyListener');
  late final _AudioDeviceRemovePropertyListener =
      _AudioDeviceRemovePropertyListenerPtr.asFunction<
          int Function(int, int, int, int, AudioDevicePropertyListenerProc)>();

  /// Retrieve information about the given property of an AudioStream.
  int AudioStreamGetPropertyInfo(
    int inStream,
    int inChannel,
    int inPropertyID,
    ffi.Pointer<UInt32> outSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioStreamGetPropertyInfo(
      inStream,
      inChannel,
      inPropertyID,
      outSize,
      outWritable,
    );
  }

  late final _AudioStreamGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioStreamID,
              UInt32,
              AudioDevicePropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioStreamGetPropertyInfo');
  late final _AudioStreamGetPropertyInfo =
      _AudioStreamGetPropertyInfoPtr.asFunction<
          int Function(
              int, int, int, ffi.Pointer<UInt32>, ffi.Pointer<Boolean>)>();

  /// Queries an the AudioStream object to get the data of the given property
  /// and places it in the provided buffer.
  int AudioStreamGetProperty(
    int inStream,
    int inChannel,
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioStreamGetProperty(
      inStream,
      inChannel,
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioStreamGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioStreamID,
              UInt32,
              AudioDevicePropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioStreamGetProperty');
  late final _AudioStreamGetProperty = _AudioStreamGetPropertyPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Tells the AudioStream object to change the value of the given property
  /// using the provided data.
  int AudioStreamSetProperty(
    int inStream,
    ffi.Pointer<AudioTimeStamp> inWhen,
    int inChannel,
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioStreamSetProperty(
      inStream,
      inWhen,
      inChannel,
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioStreamID,
              ffi.Pointer<AudioTimeStamp>,
              UInt32,
              AudioDevicePropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioStreamSetProperty');
  late final _AudioStreamSetProperty = _AudioStreamSetPropertyPtr.asFunction<
      int Function(int, ffi.Pointer<AudioTimeStamp>, int, int, int,
          ffi.Pointer<ffi.Void>)>();

  /// Registers the given AudioStreamPropertyListenerProc to receive
  /// notifications when the given property changes.
  int AudioStreamAddPropertyListener(
    int inStream,
    int inChannel,
    int inPropertyID,
    AudioStreamPropertyListenerProc inProc,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioStreamAddPropertyListener(
      inStream,
      inChannel,
      inPropertyID,
      inProc,
      inClientData,
    );
  }

  late final _AudioStreamAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioStreamID,
              UInt32,
              AudioDevicePropertyID,
              AudioStreamPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>>('AudioStreamAddPropertyListener');
  late final _AudioStreamAddPropertyListener =
      _AudioStreamAddPropertyListenerPtr.asFunction<
          int Function(int, int, int, AudioStreamPropertyListenerProc,
              ffi.Pointer<ffi.Void>)>();

  /// Unregisters the given AudioStreamPropertyListenerProc from receiving
  /// notifications when the given property changes.
  int AudioStreamRemovePropertyListener(
    int inStream,
    int inChannel,
    int inPropertyID,
    AudioStreamPropertyListenerProc inProc,
  ) {
    return _AudioStreamRemovePropertyListener(
      inStream,
      inChannel,
      inPropertyID,
      inProc,
    );
  }

  late final _AudioStreamRemovePropertyListenerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioStreamID, UInt32, AudioDevicePropertyID,
                  AudioStreamPropertyListenerProc)>>(
      'AudioStreamRemovePropertyListener');
  late final _AudioStreamRemovePropertyListener =
      _AudioStreamRemovePropertyListenerPtr.asFunction<
          int Function(int, int, int, AudioStreamPropertyListenerProc)>();

  /// Queries an AudioObject about whether or not it has the given property.
  int AudioHardwareServiceHasProperty(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
  ) {
    return _AudioHardwareServiceHasProperty(
      inObjectID,
      inAddress,
    );
  }

  late final _AudioHardwareServiceHasPropertyPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  AudioObjectID, ffi.Pointer<AudioObjectPropertyAddress>)>>(
      'AudioHardwareServiceHasProperty');
  late final _AudioHardwareServiceHasProperty =
      _AudioHardwareServiceHasPropertyPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>)>();

  /// Queries an AudioObject about whether or not the given property can be set
  /// using AudioHardwareServiceSetPropertyData.
  int AudioHardwareServiceIsPropertySettable(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    ffi.Pointer<Boolean> outIsSettable,
  ) {
    return _AudioHardwareServiceIsPropertySettable(
      inObjectID,
      inAddress,
      outIsSettable,
    );
  }

  late final _AudioHardwareServiceIsPropertySettablePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              ffi.Pointer<Boolean>)>>('AudioHardwareServiceIsPropertySettable');
  late final _AudioHardwareServiceIsPropertySettable =
      _AudioHardwareServiceIsPropertySettablePtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>,
              ffi.Pointer<Boolean>)>();

  /// Queries an AudioObject to find the size of the data for the given
  /// property.
  int AudioHardwareServiceGetPropertyDataSize(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    int inQualifierDataSize,
    ffi.Pointer<ffi.Void> inQualifierData,
    ffi.Pointer<UInt32> outDataSize,
  ) {
    return _AudioHardwareServiceGetPropertyDataSize(
      inObjectID,
      inAddress,
      inQualifierDataSize,
      inQualifierData,
      outDataSize,
    );
  }

  late final _AudioHardwareServiceGetPropertyDataSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioHardwareServiceGetPropertyDataSize');
  late final _AudioHardwareServiceGetPropertyDataSize =
      _AudioHardwareServiceGetPropertyDataSizePtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>();

  /// Queries an AudioObject to get the data of the given property and places it
  /// in the provided buffer.
  int AudioHardwareServiceGetPropertyData(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    int inQualifierDataSize,
    ffi.Pointer<ffi.Void> inQualifierData,
    ffi.Pointer<UInt32> ioDataSize,
    ffi.Pointer<ffi.Void> outData,
  ) {
    return _AudioHardwareServiceGetPropertyData(
      inObjectID,
      inAddress,
      inQualifierDataSize,
      inQualifierData,
      ioDataSize,
      outData,
    );
  }

  late final _AudioHardwareServiceGetPropertyDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioHardwareServiceGetPropertyData');
  late final _AudioHardwareServiceGetPropertyData =
      _AudioHardwareServiceGetPropertyDataPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<AudioObjectPropertyAddress>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// Tells an AudioObject to change the value of the given property using the
  /// provided data.
  int AudioHardwareServiceSetPropertyData(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    int inQualifierDataSize,
    ffi.Pointer<ffi.Void> inQualifierData,
    int inDataSize,
    ffi.Pointer<ffi.Void> inData,
  ) {
    return _AudioHardwareServiceSetPropertyData(
      inObjectID,
      inAddress,
      inQualifierDataSize,
      inQualifierData,
      inDataSize,
      inData,
    );
  }

  late final _AudioHardwareServiceSetPropertyDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioObjectID,
              ffi.Pointer<AudioObjectPropertyAddress>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioHardwareServiceSetPropertyData');
  late final _AudioHardwareServiceSetPropertyData =
      _AudioHardwareServiceSetPropertyDataPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>, int,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// Registers the given AudioObjectPropertyListenerProc to receive
  /// notifications when the given properties change.
  int AudioHardwareServiceAddPropertyListener(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    AudioObjectPropertyListenerProc inListener,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioHardwareServiceAddPropertyListener(
      inObjectID,
      inAddress,
      inListener,
      inClientData,
    );
  }

  late final _AudioHardwareServiceAddPropertyListenerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioObjectID,
                  ffi.Pointer<AudioObjectPropertyAddress>,
                  AudioObjectPropertyListenerProc,
                  ffi.Pointer<ffi.Void>)>>(
      'AudioHardwareServiceAddPropertyListener');
  late final _AudioHardwareServiceAddPropertyListener =
      _AudioHardwareServiceAddPropertyListenerPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>,
              AudioObjectPropertyListenerProc, ffi.Pointer<ffi.Void>)>();

  /// Unregisters the given AudioObjectPropertyListenerProc from receiving
  /// notifications when the given properties change.
  int AudioHardwareServiceRemovePropertyListener(
    int inObjectID,
    ffi.Pointer<AudioObjectPropertyAddress> inAddress,
    AudioObjectPropertyListenerProc inListener,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioHardwareServiceRemovePropertyListener(
      inObjectID,
      inAddress,
      inListener,
      inClientData,
    );
  }

  late final _AudioHardwareServiceRemovePropertyListenerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  AudioObjectID,
                  ffi.Pointer<AudioObjectPropertyAddress>,
                  AudioObjectPropertyListenerProc,
                  ffi.Pointer<ffi.Void>)>>(
      'AudioHardwareServiceRemovePropertyListener');
  late final _AudioHardwareServiceRemovePropertyListener =
      _AudioHardwareServiceRemovePropertyListenerPtr.asFunction<
          int Function(int, ffi.Pointer<AudioObjectPropertyAddress>,
              AudioObjectPropertyListenerProc, ffi.Pointer<ffi.Void>)>();

  /// Allows the application to designate an audio file for playback by the
  /// System Sound server.
  int AudioServicesCreateSystemSoundID(
    coreFoundation.CFURLRef inFileURL,
    ffi.Pointer<SystemSoundID> outSystemSoundID,
  ) {
    return _AudioServicesCreateSystemSoundID(
      inFileURL,
      outSystemSoundID,
    );
  }

  late final _AudioServicesCreateSystemSoundIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFURLRef,
              ffi.Pointer<SystemSoundID>)>>('AudioServicesCreateSystemSoundID');
  late final _AudioServicesCreateSystemSoundID =
      _AudioServicesCreateSystemSoundIDPtr.asFunction<
          int Function(coreFoundation.CFURLRef, ffi.Pointer<SystemSoundID>)>();

  /// Allows the System Sound server to dispose any resources needed for the
  /// provided SystemSoundID.
  int AudioServicesDisposeSystemSoundID(
    int inSystemSoundID,
  ) {
    return _AudioServicesDisposeSystemSoundID(
      inSystemSoundID,
    );
  }

  late final _AudioServicesDisposeSystemSoundIDPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SystemSoundID)>>(
          'AudioServicesDisposeSystemSoundID');
  late final _AudioServicesDisposeSystemSoundID =
      _AudioServicesDisposeSystemSoundIDPtr.asFunction<int Function(int)>();

  /// Get information about the size of an AudioServices property and whether it
  /// can be set.
  int AudioServicesGetPropertyInfo(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> outPropertyDataSize,
    ffi.Pointer<Boolean> outWritable,
  ) {
    return _AudioServicesGetPropertyInfo(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      outPropertyDataSize,
      outWritable,
    );
  }

  late final _AudioServicesGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioServicesPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>>('AudioServicesGetPropertyInfo');
  late final _AudioServicesGetPropertyInfo =
      _AudioServicesGetPropertyInfoPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>,
              ffi.Pointer<Boolean>)>();

  /// Retrieve the indicated property data
  int AudioServicesGetProperty(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioServicesGetProperty(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioServicesGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioServicesPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioServicesGetProperty');
  late final _AudioServicesGetProperty =
      _AudioServicesGetPropertyPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// Set the indicated property data
  int AudioServicesSetProperty(
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioServicesSetProperty(
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioServicesSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioServicesPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioServicesSetProperty');
  late final _AudioServicesSetProperty =
      _AudioServicesSetPropertyPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// Play an Alert Sound
  void AudioServicesPlayAlertSound(
    int inSystemSoundID,
  ) {
    return _AudioServicesPlayAlertSound(
      inSystemSoundID,
    );
  }

  late final _AudioServicesPlayAlertSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SystemSoundID)>>(
          'AudioServicesPlayAlertSound');
  late final _AudioServicesPlayAlertSound =
      _AudioServicesPlayAlertSoundPtr.asFunction<void Function(int)>();

  /// Play the sound designated by the provided SystemSoundID.
  void AudioServicesPlaySystemSound(
    int inSystemSoundID,
  ) {
    return _AudioServicesPlaySystemSound(
      inSystemSoundID,
    );
  }

  late final _AudioServicesPlaySystemSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SystemSoundID)>>(
          'AudioServicesPlaySystemSound');
  late final _AudioServicesPlaySystemSound =
      _AudioServicesPlaySystemSoundPtr.asFunction<void Function(int)>();

  /// Call the provided Completion Routine when provided SystemSoundID finishes
  /// playing.
  int AudioServicesAddSystemSoundCompletion(
    int inSystemSoundID,
    CFRunLoopRef inRunLoop,
    coreFoundation.CFStringRef inRunLoopMode,
    AudioServicesSystemSoundCompletionProc inCompletionRoutine,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioServicesAddSystemSoundCompletion(
      inSystemSoundID,
      inRunLoop,
      inRunLoopMode,
      inCompletionRoutine,
      inClientData,
    );
  }

  late final _AudioServicesAddSystemSoundCompletionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SystemSoundID,
              CFRunLoopRef,
              coreFoundation.CFStringRef,
              AudioServicesSystemSoundCompletionProc,
              ffi.Pointer<ffi.Void>)>>('AudioServicesAddSystemSoundCompletion');
  late final _AudioServicesAddSystemSoundCompletion =
      _AudioServicesAddSystemSoundCompletionPtr.asFunction<
          int Function(int, CFRunLoopRef, coreFoundation.CFStringRef,
              AudioServicesSystemSoundCompletionProc, ffi.Pointer<ffi.Void>)>();

  /// Disassociate any completion proc for the specified SystemSoundID
  void AudioServicesRemoveSystemSoundCompletion(
    int inSystemSoundID,
  ) {
    return _AudioServicesRemoveSystemSoundCompletion(
      inSystemSoundID,
    );
  }

  late final _AudioServicesRemoveSystemSoundCompletionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SystemSoundID)>>(
          'AudioServicesRemoveSystemSoundCompletion');
  late final _AudioServicesRemoveSystemSoundCompletion =
      _AudioServicesRemoveSystemSoundCompletionPtr.asFunction<
          void Function(int)>();

  /// Create an OS workgroup interval for use with audio realtime threads.
  os_workgroup_interval_t AudioWorkIntervalCreate(
    ffi.Pointer<ffi.Char> name,
    int clock,
    os_workgroup_attr_t attr,
  ) {
    return _AudioWorkIntervalCreate(
      name,
      clock,
      attr,
    );
  }

  late final _AudioWorkIntervalCreatePtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_interval_t Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              os_workgroup_attr_t)>>('AudioWorkIntervalCreate');
  late final _AudioWorkIntervalCreate = _AudioWorkIntervalCreatePtr.asFunction<
      os_workgroup_interval_t Function(
          ffi.Pointer<ffi.Char>, int, os_workgroup_attr_t)>();

  /// creates a new (or initialises an existing) audio file specified by the
  /// URL.
  int AudioFileComponentCreateURL(
    AudioFileComponent inComponent,
    coreFoundation.CFURLRef inFileRef,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
  ) {
    return _AudioFileComponentCreateURL(
      inComponent,
      inFileRef,
      inFormat,
      inFlags,
    );
  }

  late final _AudioFileComponentCreateURLPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              coreFoundation.CFURLRef,
              ffi.Pointer<AudioStreamBasicDescription>,
              UInt32)>>('AudioFileComponentCreateURL');
  late final _AudioFileComponentCreateURL =
      _AudioFileComponentCreateURLPtr.asFunction<
          int Function(AudioFileComponent, coreFoundation.CFURLRef,
              ffi.Pointer<AudioStreamBasicDescription>, int)>();

  /// Open an existing audio file.
  int AudioFileComponentOpenURL(
    AudioFileComponent inComponent,
    coreFoundation.CFURLRef inFileRef,
    int inPermissions,
    int inFileDescriptor,
  ) {
    return _AudioFileComponentOpenURL(
      inComponent,
      inFileRef,
      inPermissions,
      inFileDescriptor,
    );
  }

  late final _AudioFileComponentOpenURLPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, coreFoundation.CFURLRef, SInt8,
              ffi.Int)>>('AudioFileComponentOpenURL');
  late final _AudioFileComponentOpenURL =
      _AudioFileComponentOpenURLPtr.asFunction<
          int Function(
              AudioFileComponent, coreFoundation.CFURLRef, int, int)>();

  /// implements AudioFileOpenWithCallbacks
  int AudioFileComponentOpenWithCallbacks(
    AudioFileComponent inComponent,
    ffi.Pointer<ffi.Void> inClientData,
    AudioFile_ReadProc inReadFunc,
    AudioFile_WriteProc inWriteFunc,
    AudioFile_GetSizeProc inGetSizeFunc,
    AudioFile_SetSizeProc inSetSizeFunc,
  ) {
    return _AudioFileComponentOpenWithCallbacks(
      inComponent,
      inClientData,
      inReadFunc,
      inWriteFunc,
      inGetSizeFunc,
      inSetSizeFunc,
    );
  }

  late final _AudioFileComponentOpenWithCallbacksPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc)>>('AudioFileComponentOpenWithCallbacks');
  late final _AudioFileComponentOpenWithCallbacks =
      _AudioFileComponentOpenWithCallbacksPtr.asFunction<
          int Function(
              AudioFileComponent,
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc)>();

  /// implements AudioFileInitializeWithCallbacks
  int AudioFileComponentInitializeWithCallbacks(
    AudioFileComponent inComponent,
    ffi.Pointer<ffi.Void> inClientData,
    AudioFile_ReadProc inReadFunc,
    AudioFile_WriteProc inWriteFunc,
    AudioFile_GetSizeProc inGetSizeFunc,
    AudioFile_SetSizeProc inSetSizeFunc,
    int inFileType,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
  ) {
    return _AudioFileComponentInitializeWithCallbacks(
      inComponent,
      inClientData,
      inReadFunc,
      inWriteFunc,
      inGetSizeFunc,
      inSetSizeFunc,
      inFileType,
      inFormat,
      inFlags,
    );
  }

  late final _AudioFileComponentInitializeWithCallbacksPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              UInt32,
              ffi.Pointer<AudioStreamBasicDescription>,
              UInt32)>>('AudioFileComponentInitializeWithCallbacks');
  late final _AudioFileComponentInitializeWithCallbacks =
      _AudioFileComponentInitializeWithCallbacksPtr.asFunction<
          int Function(
              AudioFileComponent,
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              int,
              ffi.Pointer<AudioStreamBasicDescription>,
              int)>();

  /// implements AudioFileClose.
  int AudioFileComponentCloseFile(
    AudioFileComponent inComponent,
  ) {
    return _AudioFileComponentCloseFile(
      inComponent,
    );
  }

  late final _AudioFileComponentCloseFilePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioFileComponent)>>(
          'AudioFileComponentCloseFile');
  late final _AudioFileComponentCloseFile = _AudioFileComponentCloseFilePtr
      .asFunction<int Function(AudioFileComponent)>();

  /// implements AudioFileOptimize.
  int AudioFileComponentOptimize(
    AudioFileComponent inComponent,
  ) {
    return _AudioFileComponentOptimize(
      inComponent,
    );
  }

  late final _AudioFileComponentOptimizePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioFileComponent)>>(
          'AudioFileComponentOptimize');
  late final _AudioFileComponentOptimize = _AudioFileComponentOptimizePtr
      .asFunction<int Function(AudioFileComponent)>();

  /// implements AudioFileReadBytes.
  int AudioFileComponentReadBytes(
    AudioFileComponent inComponent,
    int inUseCache,
    int inStartingByte,
    ffi.Pointer<UInt32> ioNumBytes,
    ffi.Pointer<ffi.Void> outBuffer,
  ) {
    return _AudioFileComponentReadBytes(
      inComponent,
      inUseCache,
      inStartingByte,
      ioNumBytes,
      outBuffer,
    );
  }

  late final _AudioFileComponentReadBytesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              Boolean,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentReadBytes');
  late final _AudioFileComponentReadBytes =
      _AudioFileComponentReadBytesPtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileWriteBytes.
  int AudioFileComponentWriteBytes(
    AudioFileComponent inComponent,
    int inUseCache,
    int inStartingByte,
    ffi.Pointer<UInt32> ioNumBytes,
    ffi.Pointer<ffi.Void> inBuffer,
  ) {
    return _AudioFileComponentWriteBytes(
      inComponent,
      inUseCache,
      inStartingByte,
      ioNumBytes,
      inBuffer,
    );
  }

  late final _AudioFileComponentWriteBytesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              Boolean,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentWriteBytes');
  late final _AudioFileComponentWriteBytes =
      _AudioFileComponentWriteBytesPtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileReadPackets.
  int AudioFileComponentReadPackets(
    AudioFileComponent inComponent,
    int inUseCache,
    ffi.Pointer<UInt32> outNumBytes,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescriptions,
    int inStartingPacket,
    ffi.Pointer<UInt32> ioNumPackets,
    ffi.Pointer<ffi.Void> outBuffer,
  ) {
    return _AudioFileComponentReadPackets(
      inComponent,
      inUseCache,
      outNumBytes,
      outPacketDescriptions,
      inStartingPacket,
      ioNumPackets,
      outBuffer,
    );
  }

  late final _AudioFileComponentReadPacketsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              Boolean,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentReadPackets');
  late final _AudioFileComponentReadPackets =
      _AudioFileComponentReadPacketsPtr.asFunction<
          int Function(
              AudioFileComponent,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileReadPacketData.
  int AudioFileComponentReadPacketData(
    AudioFileComponent inComponent,
    int inUseCache,
    ffi.Pointer<UInt32> ioNumBytes,
    ffi.Pointer<AudioStreamPacketDescription> outPacketDescriptions,
    int inStartingPacket,
    ffi.Pointer<UInt32> ioNumPackets,
    ffi.Pointer<ffi.Void> outBuffer,
  ) {
    return _AudioFileComponentReadPacketData(
      inComponent,
      inUseCache,
      ioNumBytes,
      outPacketDescriptions,
      inStartingPacket,
      ioNumPackets,
      outBuffer,
    );
  }

  late final _AudioFileComponentReadPacketDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              Boolean,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentReadPacketData');
  late final _AudioFileComponentReadPacketData =
      _AudioFileComponentReadPacketDataPtr.asFunction<
          int Function(
              AudioFileComponent,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<AudioStreamPacketDescription>,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileWritePackets.
  int AudioFileComponentWritePackets(
    AudioFileComponent inComponent,
    int inUseCache,
    int inNumBytes,
    ffi.Pointer<AudioStreamPacketDescription> inPacketDescriptions,
    int inStartingPacket,
    ffi.Pointer<UInt32> ioNumPackets,
    ffi.Pointer<ffi.Void> inBuffer,
  ) {
    return _AudioFileComponentWritePackets(
      inComponent,
      inUseCache,
      inNumBytes,
      inPacketDescriptions,
      inStartingPacket,
      ioNumPackets,
      inBuffer,
    );
  }

  late final _AudioFileComponentWritePacketsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              Boolean,
              UInt32,
              ffi.Pointer<AudioStreamPacketDescription>,
              SInt64,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentWritePackets');
  late final _AudioFileComponentWritePackets =
      _AudioFileComponentWritePacketsPtr.asFunction<
          int Function(
              AudioFileComponent,
              int,
              int,
              ffi.Pointer<AudioStreamPacketDescription>,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileGetPropertyInfo.
  int AudioFileComponentGetPropertyInfo(
    AudioFileComponent inComponent,
    int inPropertyID,
    ffi.Pointer<UInt32> outPropertySize,
    ffi.Pointer<UInt32> outWritable,
  ) {
    return _AudioFileComponentGetPropertyInfo(
      inComponent,
      inPropertyID,
      outPropertySize,
      outWritable,
    );
  }

  late final _AudioFileComponentGetPropertyInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              AudioFileComponentPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('AudioFileComponentGetPropertyInfo');
  late final _AudioFileComponentGetPropertyInfo =
      _AudioFileComponentGetPropertyInfoPtr.asFunction<
          int Function(AudioFileComponent, int, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>();

  /// implements AudioFileGetProperty.
  int AudioFileComponentGetProperty(
    AudioFileComponent inComponent,
    int inPropertyID,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioFileComponentGetProperty(
      inComponent,
      inPropertyID,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioFileComponentGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              AudioFileComponentPropertyID,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentGetProperty');
  late final _AudioFileComponentGetProperty =
      _AudioFileComponentGetPropertyPtr.asFunction<
          int Function(AudioFileComponent, int, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileSetProperty.
  int AudioFileComponentSetProperty(
    AudioFileComponent inComponent,
    int inPropertyID,
    int inPropertyDataSize,
    ffi.Pointer<ffi.Void> inPropertyData,
  ) {
    return _AudioFileComponentSetProperty(
      inComponent,
      inPropertyID,
      inPropertyDataSize,
      inPropertyData,
    );
  }

  late final _AudioFileComponentSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, AudioFileComponentPropertyID,
              UInt32, ffi.Pointer<ffi.Void>)>>('AudioFileComponentSetProperty');
  late final _AudioFileComponentSetProperty =
      _AudioFileComponentSetPropertyPtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileCountUserData
  int AudioFileComponentCountUserData(
    AudioFileComponent inComponent,
    int inUserDataID,
    ffi.Pointer<UInt32> outNumberItems,
  ) {
    return _AudioFileComponentCountUserData(
      inComponent,
      inUserDataID,
      outNumberItems,
    );
  }

  late final _AudioFileComponentCountUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, UInt32,
              ffi.Pointer<UInt32>)>>('AudioFileComponentCountUserData');
  late final _AudioFileComponentCountUserData =
      _AudioFileComponentCountUserDataPtr.asFunction<
          int Function(AudioFileComponent, int, ffi.Pointer<UInt32>)>();

  /// implements AudioFileGetUserDataSize
  int AudioFileComponentGetUserDataSize(
    AudioFileComponent inComponent,
    int inUserDataID,
    int inIndex,
    ffi.Pointer<UInt32> outUserDataSize,
  ) {
    return _AudioFileComponentGetUserDataSize(
      inComponent,
      inUserDataID,
      inIndex,
      outUserDataSize,
    );
  }

  late final _AudioFileComponentGetUserDataSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, UInt32, UInt32,
              ffi.Pointer<UInt32>)>>('AudioFileComponentGetUserDataSize');
  late final _AudioFileComponentGetUserDataSize =
      _AudioFileComponentGetUserDataSizePtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<UInt32>)>();

  /// implements AudioFileGetUserData.
  int AudioFileComponentGetUserData(
    AudioFileComponent inComponent,
    int inUserDataID,
    int inIndex,
    ffi.Pointer<UInt32> ioUserDataSize,
    ffi.Pointer<ffi.Void> outUserData,
  ) {
    return _AudioFileComponentGetUserData(
      inComponent,
      inUserDataID,
      inIndex,
      ioUserDataSize,
      outUserData,
    );
  }

  late final _AudioFileComponentGetUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              UInt32,
              UInt32,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentGetUserData');
  late final _AudioFileComponentGetUserData =
      _AudioFileComponentGetUserDataPtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileSetUserData.
  int AudioFileComponentSetUserData(
    AudioFileComponent inComponent,
    int inUserDataID,
    int inIndex,
    int inUserDataSize,
    ffi.Pointer<ffi.Void> inUserData,
  ) {
    return _AudioFileComponentSetUserData(
      inComponent,
      inUserDataID,
      inIndex,
      inUserDataSize,
      inUserData,
    );
  }

  late final _AudioFileComponentSetUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, UInt32, UInt32, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentSetUserData');
  late final _AudioFileComponentSetUserData =
      _AudioFileComponentSetUserDataPtr.asFunction<
          int Function(
              AudioFileComponent, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileRemoveUserData.
  int AudioFileComponentRemoveUserData(
    AudioFileComponent inComponent,
    int inUserDataID,
    int inIndex,
  ) {
    return _AudioFileComponentRemoveUserData(
      inComponent,
      inUserDataID,
      inIndex,
    );
  }

  late final _AudioFileComponentRemoveUserDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, UInt32,
              UInt32)>>('AudioFileComponentRemoveUserData');
  late final _AudioFileComponentRemoveUserData =
      _AudioFileComponentRemoveUserDataPtr.asFunction<
          int Function(AudioFileComponent, int, int)>();

  /// used by the AudioFile API to determine if this component is appropriate
  /// for handling a file.
  int AudioFileComponentExtensionIsThisFormat(
    AudioFileComponent inComponent,
    coreFoundation.CFStringRef inExtension,
    ffi.Pointer<UInt32> outResult,
  ) {
    return _AudioFileComponentExtensionIsThisFormat(
      inComponent,
      inExtension,
      outResult,
    );
  }

  late final _AudioFileComponentExtensionIsThisFormatPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, coreFoundation.CFStringRef,
              ffi.Pointer<UInt32>)>>('AudioFileComponentExtensionIsThisFormat');
  late final _AudioFileComponentExtensionIsThisFormat =
      _AudioFileComponentExtensionIsThisFormatPtr.asFunction<
          int Function(AudioFileComponent, coreFoundation.CFStringRef,
              ffi.Pointer<UInt32>)>();

  /// used by the AudioFile API to determine if this component is appropriate
  /// for handling a file.
  int AudioFileComponentFileDataIsThisFormat(
    AudioFileComponent inComponent,
    int inDataByteSize,
    ffi.Pointer<ffi.Void> inData,
    ffi.Pointer<UInt32> outResult,
  ) {
    return _AudioFileComponentFileDataIsThisFormat(
      inComponent,
      inDataByteSize,
      inData,
      outResult,
    );
  }

  late final _AudioFileComponentFileDataIsThisFormatPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, UInt32, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioFileComponentFileDataIsThisFormat');
  late final _AudioFileComponentFileDataIsThisFormat =
      _AudioFileComponentFileDataIsThisFormatPtr.asFunction<
          int Function(AudioFileComponent, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>();

  /// deprecated. use AudioFileComponentFileDataIsThisFormat instead.
  int AudioFileComponentFileIsThisFormat(
    AudioFileComponent inComponent,
    int inFileRefNum,
    ffi.Pointer<UInt32> outResult,
  ) {
    return _AudioFileComponentFileIsThisFormat(
      inComponent,
      inFileRefNum,
      outResult,
    );
  }

  late final _AudioFileComponentFileIsThisFormatPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, SInt16,
              ffi.Pointer<UInt32>)>>('AudioFileComponentFileIsThisFormat');
  late final _AudioFileComponentFileIsThisFormat =
      _AudioFileComponentFileIsThisFormatPtr.asFunction<
          int Function(AudioFileComponent, int, ffi.Pointer<UInt32>)>();

  /// deprecated. use AudioFileComponentFileDataIsThisFormat instead.
  int AudioFileComponentDataIsThisFormat(
    AudioFileComponent inComponent,
    ffi.Pointer<ffi.Void> inClientData,
    AudioFile_ReadProc inReadFunc,
    AudioFile_WriteProc inWriteFunc,
    AudioFile_GetSizeProc inGetSizeFunc,
    AudioFile_SetSizeProc inSetSizeFunc,
    ffi.Pointer<UInt32> outResult,
  ) {
    return _AudioFileComponentDataIsThisFormat(
      inComponent,
      inClientData,
      inReadFunc,
      inWriteFunc,
      inGetSizeFunc,
      inSetSizeFunc,
      outResult,
    );
  }

  late final _AudioFileComponentDataIsThisFormatPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              ffi.Pointer<UInt32>)>>('AudioFileComponentDataIsThisFormat');
  late final _AudioFileComponentDataIsThisFormat =
      _AudioFileComponentDataIsThisFormatPtr.asFunction<
          int Function(
              AudioFileComponent,
              ffi.Pointer<ffi.Void>,
              AudioFile_ReadProc,
              AudioFile_WriteProc,
              AudioFile_GetSizeProc,
              AudioFile_SetSizeProc,
              ffi.Pointer<UInt32>)>();

  /// implements AudioFileGetGlobalInfoSize.
  int AudioFileComponentGetGlobalInfoSize(
    AudioFileComponent inComponent,
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> outPropertySize,
  ) {
    return _AudioFileComponentGetGlobalInfoSize(
      inComponent,
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      outPropertySize,
    );
  }

  late final _AudioFileComponentGetGlobalInfoSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              AudioFileComponentPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>>('AudioFileComponentGetGlobalInfoSize');
  late final _AudioFileComponentGetGlobalInfoSize =
      _AudioFileComponentGetGlobalInfoSizePtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>)>();

  /// implements AudioFileGetGlobalInfo.
  int AudioFileComponentGetGlobalInfo(
    AudioFileComponent inComponent,
    int inPropertyID,
    int inSpecifierSize,
    ffi.Pointer<ffi.Void> inSpecifier,
    ffi.Pointer<UInt32> ioPropertyDataSize,
    ffi.Pointer<ffi.Void> outPropertyData,
  ) {
    return _AudioFileComponentGetGlobalInfo(
      inComponent,
      inPropertyID,
      inSpecifierSize,
      inSpecifier,
      ioPropertyDataSize,
      outPropertyData,
    );
  }

  late final _AudioFileComponentGetGlobalInfoPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              AudioFileComponentPropertyID,
              UInt32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioFileComponentGetGlobalInfo');
  late final _AudioFileComponentGetGlobalInfo =
      _AudioFileComponentGetGlobalInfoPtr.asFunction<
          int Function(AudioFileComponent, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// implements AudioFileCreate
  int AudioFileComponentCreate(
    AudioFileComponent inComponent,
    ffi.Pointer<FSRef> inParentRef,
    coreFoundation.CFStringRef inFileName,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
    ffi.Pointer<FSRef> outNewFileRef,
  ) {
    return _AudioFileComponentCreate(
      inComponent,
      inParentRef,
      inFileName,
      inFormat,
      inFlags,
      outNewFileRef,
    );
  }

  late final _AudioFileComponentCreatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              ffi.Pointer<FSRef>,
              coreFoundation.CFStringRef,
              ffi.Pointer<AudioStreamBasicDescription>,
              UInt32,
              ffi.Pointer<FSRef>)>>('AudioFileComponentCreate');
  late final _AudioFileComponentCreate =
      _AudioFileComponentCreatePtr.asFunction<
          int Function(
              AudioFileComponent,
              ffi.Pointer<FSRef>,
              coreFoundation.CFStringRef,
              ffi.Pointer<AudioStreamBasicDescription>,
              int,
              ffi.Pointer<FSRef>)>();

  /// implements AudioFileInitialize
  int AudioFileComponentInitialize(
    AudioFileComponent inComponent,
    ffi.Pointer<FSRef> inFileRef,
    ffi.Pointer<AudioStreamBasicDescription> inFormat,
    int inFlags,
  ) {
    return _AudioFileComponentInitialize(
      inComponent,
      inFileRef,
      inFormat,
      inFlags,
    );
  }

  late final _AudioFileComponentInitializePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioFileComponent,
              ffi.Pointer<FSRef>,
              ffi.Pointer<AudioStreamBasicDescription>,
              UInt32)>>('AudioFileComponentInitialize');
  late final _AudioFileComponentInitialize =
      _AudioFileComponentInitializePtr.asFunction<
          int Function(AudioFileComponent, ffi.Pointer<FSRef>,
              ffi.Pointer<AudioStreamBasicDescription>, int)>();

  /// implements AudioFileOpen
  int AudioFileComponentOpenFile(
    AudioFileComponent inComponent,
    ffi.Pointer<FSRef> inFileRef,
    int inPermissions,
    int inRefNum,
  ) {
    return _AudioFileComponentOpenFile(
      inComponent,
      inFileRef,
      inPermissions,
      inRefNum,
    );
  }

  late final _AudioFileComponentOpenFilePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioFileComponent, ffi.Pointer<FSRef>, SInt8,
              SInt16)>>('AudioFileComponentOpenFile');
  late final _AudioFileComponentOpenFile =
      _AudioFileComponentOpenFilePtr.asFunction<
          int Function(AudioFileComponent, ffi.Pointer<FSRef>, int, int)>();

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_RouteChangeKey_Reason =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_RouteChangeKey_Reason');

  coreFoundation.CFStringRef get kAudioSession_RouteChangeKey_Reason =>
      _kAudioSession_RouteChangeKey_Reason.value;

  set kAudioSession_RouteChangeKey_Reason(coreFoundation.CFStringRef value) =>
      _kAudioSession_RouteChangeKey_Reason.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_AudioRouteChangeKey_PreviousRouteDescription =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_AudioRouteChangeKey_PreviousRouteDescription');

  coreFoundation.CFStringRef
      get kAudioSession_AudioRouteChangeKey_PreviousRouteDescription =>
          _kAudioSession_AudioRouteChangeKey_PreviousRouteDescription.value;

  set kAudioSession_AudioRouteChangeKey_PreviousRouteDescription(
          coreFoundation.CFStringRef value) =>
      _kAudioSession_AudioRouteChangeKey_PreviousRouteDescription.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_AudioRouteChangeKey_CurrentRouteDescription =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_AudioRouteChangeKey_CurrentRouteDescription');

  coreFoundation.CFStringRef
      get kAudioSession_AudioRouteChangeKey_CurrentRouteDescription =>
          _kAudioSession_AudioRouteChangeKey_CurrentRouteDescription.value;

  set kAudioSession_AudioRouteChangeKey_CurrentRouteDescription(
          coreFoundation.CFStringRef value) =>
      _kAudioSession_AudioRouteChangeKey_CurrentRouteDescription.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_AudioRouteKey_Inputs =
      _lookup<coreFoundation.CFStringRef>('kAudioSession_AudioRouteKey_Inputs');

  coreFoundation.CFStringRef get kAudioSession_AudioRouteKey_Inputs =>
      _kAudioSession_AudioRouteKey_Inputs.value;

  set kAudioSession_AudioRouteKey_Inputs(coreFoundation.CFStringRef value) =>
      _kAudioSession_AudioRouteKey_Inputs.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_AudioRouteKey_Outputs =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_AudioRouteKey_Outputs');

  coreFoundation.CFStringRef get kAudioSession_AudioRouteKey_Outputs =>
      _kAudioSession_AudioRouteKey_Outputs.value;

  set kAudioSession_AudioRouteKey_Outputs(coreFoundation.CFStringRef value) =>
      _kAudioSession_AudioRouteKey_Outputs.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_AudioRouteKey_Type =
      _lookup<coreFoundation.CFStringRef>('kAudioSession_AudioRouteKey_Type');

  coreFoundation.CFStringRef get kAudioSession_AudioRouteKey_Type =>
      _kAudioSession_AudioRouteKey_Type.value;

  set kAudioSession_AudioRouteKey_Type(coreFoundation.CFStringRef value) =>
      _kAudioSession_AudioRouteKey_Type.value = value;

  /// These are the strings used with the kAudioSession_AudioRouteKey_Type key for
  /// the CFDictionary associated with kAudioSession_AudioRouteKey_Inputs.
  /// Available in iOS 5.0 or greater A line in input A built-in microphone input.
  /// (Note that some devices like early iPods do not have this input) A
  /// microphone that is part of a headset (combined microphone and headphones) A
  /// microphone that is part of a Bluetooth Hands-Free Profile device A Universal
  /// Serial Bus input
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionInputRoute_LineIn =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionInputRoute_LineIn');

  coreFoundation.CFStringRef get kAudioSessionInputRoute_LineIn =>
      _kAudioSessionInputRoute_LineIn.value;

  set kAudioSessionInputRoute_LineIn(coreFoundation.CFStringRef value) =>
      _kAudioSessionInputRoute_LineIn.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionInputRoute_BuiltInMic =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionInputRoute_BuiltInMic');

  coreFoundation.CFStringRef get kAudioSessionInputRoute_BuiltInMic =>
      _kAudioSessionInputRoute_BuiltInMic.value;

  set kAudioSessionInputRoute_BuiltInMic(coreFoundation.CFStringRef value) =>
      _kAudioSessionInputRoute_BuiltInMic.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionInputRoute_HeadsetMic =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionInputRoute_HeadsetMic');

  coreFoundation.CFStringRef get kAudioSessionInputRoute_HeadsetMic =>
      _kAudioSessionInputRoute_HeadsetMic.value;

  set kAudioSessionInputRoute_HeadsetMic(coreFoundation.CFStringRef value) =>
      _kAudioSessionInputRoute_HeadsetMic.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionInputRoute_BluetoothHFP =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSessionInputRoute_BluetoothHFP');

  coreFoundation.CFStringRef get kAudioSessionInputRoute_BluetoothHFP =>
      _kAudioSessionInputRoute_BluetoothHFP.value;

  set kAudioSessionInputRoute_BluetoothHFP(coreFoundation.CFStringRef value) =>
      _kAudioSessionInputRoute_BluetoothHFP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionInputRoute_USBAudio =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionInputRoute_USBAudio');

  coreFoundation.CFStringRef get kAudioSessionInputRoute_USBAudio =>
      _kAudioSessionInputRoute_USBAudio.value;

  set kAudioSessionInputRoute_USBAudio(coreFoundation.CFStringRef value) =>
      _kAudioSessionInputRoute_USBAudio.value = value;

  /// These are strings used with the kAudioSession_AudioRouteKey_Type key for the
  /// CFDictionary associated with kAudioSession_AudioRouteKey_Outputs. Available
  /// in iOS 5.0 or greater A line out output Speakers in a headset (mic and
  /// headphones) or simple headphones Speakers that are part of a Bluetooth
  /// Hands-Free Profile device Speakers in a Bluetooth A2DP device The speaker
  /// you hold to your ear when on a phone call The built-in speaker Speaker(s) in
  /// a Universal Serial Bus device Output via High-Definition Multimedia
  /// Interface Output on a remote Air Play device
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_LineOut =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionOutputRoute_LineOut');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_LineOut =>
      _kAudioSessionOutputRoute_LineOut.value;

  set kAudioSessionOutputRoute_LineOut(coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_LineOut.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_Headphones =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSessionOutputRoute_Headphones');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_Headphones =>
      _kAudioSessionOutputRoute_Headphones.value;

  set kAudioSessionOutputRoute_Headphones(coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_Headphones.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_BluetoothHFP =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSessionOutputRoute_BluetoothHFP');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_BluetoothHFP =>
      _kAudioSessionOutputRoute_BluetoothHFP.value;

  set kAudioSessionOutputRoute_BluetoothHFP(coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_BluetoothHFP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_BluetoothA2DP =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSessionOutputRoute_BluetoothA2DP');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_BluetoothA2DP =>
      _kAudioSessionOutputRoute_BluetoothA2DP.value;

  set kAudioSessionOutputRoute_BluetoothA2DP(
          coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_BluetoothA2DP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_BuiltInReceiver =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSessionOutputRoute_BuiltInReceiver');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_BuiltInReceiver =>
      _kAudioSessionOutputRoute_BuiltInReceiver.value;

  set kAudioSessionOutputRoute_BuiltInReceiver(
          coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_BuiltInReceiver.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_BuiltInSpeaker =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSessionOutputRoute_BuiltInSpeaker');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_BuiltInSpeaker =>
      _kAudioSessionOutputRoute_BuiltInSpeaker.value;

  set kAudioSessionOutputRoute_BuiltInSpeaker(
          coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_BuiltInSpeaker.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_USBAudio =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionOutputRoute_USBAudio');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_USBAudio =>
      _kAudioSessionOutputRoute_USBAudio.value;

  set kAudioSessionOutputRoute_USBAudio(coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_USBAudio.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_HDMI =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionOutputRoute_HDMI');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_HDMI =>
      _kAudioSessionOutputRoute_HDMI.value;

  set kAudioSessionOutputRoute_HDMI(coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_HDMI.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSessionOutputRoute_AirPlay =
      _lookup<coreFoundation.CFStringRef>('kAudioSessionOutputRoute_AirPlay');

  coreFoundation.CFStringRef get kAudioSessionOutputRoute_AirPlay =>
      _kAudioSessionOutputRoute_AirPlay.value;

  set kAudioSessionOutputRoute_AirPlay(coreFoundation.CFStringRef value) =>
      _kAudioSessionOutputRoute_AirPlay.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_InputSourceKey_ID =
      _lookup<coreFoundation.CFStringRef>('kAudioSession_InputSourceKey_ID');

  coreFoundation.CFStringRef get kAudioSession_InputSourceKey_ID =>
      _kAudioSession_InputSourceKey_ID.value;

  set kAudioSession_InputSourceKey_ID(coreFoundation.CFStringRef value) =>
      _kAudioSession_InputSourceKey_ID.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_InputSourceKey_Description =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_InputSourceKey_Description');

  coreFoundation.CFStringRef get kAudioSession_InputSourceKey_Description =>
      _kAudioSession_InputSourceKey_Description.value;

  set kAudioSession_InputSourceKey_Description(
          coreFoundation.CFStringRef value) =>
      _kAudioSession_InputSourceKey_Description.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_OutputDestinationKey_ID =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_OutputDestinationKey_ID');

  coreFoundation.CFStringRef get kAudioSession_OutputDestinationKey_ID =>
      _kAudioSession_OutputDestinationKey_ID.value;

  set kAudioSession_OutputDestinationKey_ID(coreFoundation.CFStringRef value) =>
      _kAudioSession_OutputDestinationKey_ID.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kAudioSession_OutputDestinationKey_Description =
      _lookup<coreFoundation.CFStringRef>(
          'kAudioSession_OutputDestinationKey_Description');

  coreFoundation.CFStringRef
      get kAudioSession_OutputDestinationKey_Description =>
          _kAudioSession_OutputDestinationKey_Description.value;

  set kAudioSession_OutputDestinationKey_Description(
          coreFoundation.CFStringRef value) =>
      _kAudioSession_OutputDestinationKey_Description.value = value;

  /// Initialize the AudioSession.
  int AudioSessionInitialize(
    CFRunLoopRef inRunLoop,
    coreFoundation.CFStringRef inRunLoopMode,
    AudioSessionInterruptionListener inInterruptionListener,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioSessionInitialize(
      inRunLoop,
      inRunLoopMode,
      inInterruptionListener,
      inClientData,
    );
  }

  late final _AudioSessionInitializePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              CFRunLoopRef,
              coreFoundation.CFStringRef,
              AudioSessionInterruptionListener,
              ffi.Pointer<ffi.Void>)>>('AudioSessionInitialize');
  late final _AudioSessionInitialize = _AudioSessionInitializePtr.asFunction<
      int Function(CFRunLoopRef, coreFoundation.CFStringRef,
          AudioSessionInterruptionListener, ffi.Pointer<ffi.Void>)>();

  /// Activate or deactivate the AudioSession.
  int AudioSessionSetActive(
    int active,
  ) {
    return _AudioSessionSetActive(
      active,
    );
  }

  late final _AudioSessionSetActivePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(Boolean)>>(
          'AudioSessionSetActive');
  late final _AudioSessionSetActive =
      _AudioSessionSetActivePtr.asFunction<int Function(int)>();

  /// Same functionality as AudioSessionSetActive, with an additional flags
  /// parameter for refining behavior.
  int AudioSessionSetActiveWithFlags(
    int active,
    int inFlags,
  ) {
    return _AudioSessionSetActiveWithFlags(
      active,
      inFlags,
    );
  }

  late final _AudioSessionSetActiveWithFlagsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(Boolean, UInt32)>>(
          'AudioSessionSetActiveWithFlags');
  late final _AudioSessionSetActiveWithFlags =
      _AudioSessionSetActiveWithFlagsPtr.asFunction<int Function(int, int)>();

  /// Get the value of a property.
  int AudioSessionGetProperty(
    int inID,
    ffi.Pointer<UInt32> ioDataSize,
    ffi.Pointer<ffi.Void> outData,
  ) {
    return _AudioSessionGetProperty(
      inID,
      ioDataSize,
      outData,
    );
  }

  late final _AudioSessionGetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioSessionPropertyID, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Void>)>>('AudioSessionGetProperty');
  late final _AudioSessionGetProperty = _AudioSessionGetPropertyPtr.asFunction<
      int Function(int, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Void>)>();

  /// Set the value of a property.
  int AudioSessionSetProperty(
    int inID,
    int inDataSize,
    ffi.Pointer<ffi.Void> inData,
  ) {
    return _AudioSessionSetProperty(
      inID,
      inDataSize,
      inData,
    );
  }

  late final _AudioSessionSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioSessionPropertyID, UInt32,
              ffi.Pointer<ffi.Void>)>>('AudioSessionSetProperty');
  late final _AudioSessionSetProperty = _AudioSessionSetPropertyPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Void>)>();

  /// Get the size of the payload for a property.
  int AudioSessionGetPropertySize(
    int inID,
    ffi.Pointer<UInt32> outDataSize,
  ) {
    return _AudioSessionGetPropertySize(
      inID,
      outDataSize,
    );
  }

  late final _AudioSessionGetPropertySizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(AudioSessionPropertyID,
              ffi.Pointer<UInt32>)>>('AudioSessionGetPropertySize');
  late final _AudioSessionGetPropertySize = _AudioSessionGetPropertySizePtr
      .asFunction<int Function(int, ffi.Pointer<UInt32>)>();

  /// Add a property listener.
  int AudioSessionAddPropertyListener(
    int inID,
    AudioSessionPropertyListener inProc,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioSessionAddPropertyListener(
      inID,
      inProc,
      inClientData,
    );
  }

  late final _AudioSessionAddPropertyListenerPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              AudioSessionPropertyID,
              AudioSessionPropertyListener,
              ffi.Pointer<ffi.Void>)>>('AudioSessionAddPropertyListener');
  late final _AudioSessionAddPropertyListener =
      _AudioSessionAddPropertyListenerPtr.asFunction<
          int Function(
              int, AudioSessionPropertyListener, ffi.Pointer<ffi.Void>)>();

  /// see AudioSessionRemovePropertyListenerWithUserData
  int AudioSessionRemovePropertyListener(
    int inID,
  ) {
    return _AudioSessionRemovePropertyListener(
      inID,
    );
  }

  late final _AudioSessionRemovePropertyListenerPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(AudioSessionPropertyID)>>(
          'AudioSessionRemovePropertyListener');
  late final _AudioSessionRemovePropertyListener =
      _AudioSessionRemovePropertyListenerPtr.asFunction<int Function(int)>();

  /// Remove a property listener.
  int AudioSessionRemovePropertyListenerWithUserData(
    int inID,
    AudioSessionPropertyListener inProc,
    ffi.Pointer<ffi.Void> inClientData,
  ) {
    return _AudioSessionRemovePropertyListenerWithUserData(
      inID,
      inProc,
      inClientData,
    );
  }

  late final _AudioSessionRemovePropertyListenerWithUserDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(AudioSessionPropertyID,
                  AudioSessionPropertyListener, ffi.Pointer<ffi.Void>)>>(
      'AudioSessionRemovePropertyListenerWithUserData');
  late final _AudioSessionRemovePropertyListenerWithUserData =
      _AudioSessionRemovePropertyListenerWithUserDataPtr.asFunction<
          int Function(
              int, AudioSessionPropertyListener, ffi.Pointer<ffi.Void>)>();
}

typedef Float64 = ffi.Double;

/// The type used to represent a class of particular audio components
typedef AudioComponent = ffi.Pointer<OpaqueAudioComponent>;

class OpaqueAudioComponent extends ffi.Opaque {}

class AudioComponentDescription extends ffi.Struct {
  @OSType()
  external int componentType;

  @OSType()
  external int componentSubType;

  @OSType()
  external int componentManufacturer;

  @UInt32()
  external int componentFlags;

  @UInt32()
  external int componentFlagsMask;
}

typedef OSType = FourCharCode;
typedef FourCharCode = UInt32;
typedef UInt32 = ffi.UnsignedInt;
typedef OSStatus = SInt32;
typedef SInt32 = ffi.Int;
typedef AudioComponentInstance = ffi.Pointer<ComponentInstanceRecord>;

class ComponentInstanceRecord extends ffi.Opaque {}

/// ******************************************************************************
typedef Boolean = ffi.UnsignedChar;
typedef SInt16 = ffi.Short;

/// A function that creates AudioComponentInstances.
typedef AudioComponentFactoryFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<AudioComponentPlugInInterface> Function(
            ffi.Pointer<AudioComponentDescription>)>>;

class AudioComponentPlugInInterface extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              OSStatus Function(ffi.Pointer<ffi.Void>, AudioComponentInstance)>>
      Open;

  external ffi
          .Pointer<ffi.NativeFunction<OSStatus Function(ffi.Pointer<ffi.Void>)>>
      Close;

  external ffi
          .Pointer<ffi.NativeFunction<AudioComponentMethod Function(SInt16)>>
      Lookup;

  external ffi.Pointer<ffi.Void> reserved;
}

/// Generic prototype for an audio plugin method.
typedef AudioComponentMethod
    = ffi.Pointer<ffi.NativeFunction<OSStatus Function(ffi.Pointer<ffi.Void>)>>;

/// Constants for describing the result of validating an AudioComponent The
/// AudioComponent passed validation. The AudioComponent failed validation. The
/// validation operation timed out before completing. The AudioComponent failed
/// validation during open operation as it is not authorized. The AudioComponent
/// failed validation during initialization as it is not authorized.
typedef AudioComponentValidationResult = UInt32;
typedef AudioCodec = AudioComponentInstance;
typedef AudioCodecPropertyID = UInt32;

/// This structure encapsulates all the information for describing the basic
/// format properties of a stream of audio data.
class AudioStreamBasicDescription extends ffi.Struct {
  @Float64()
  external double mSampleRate;

  @AudioFormatID()
  external int mFormatID;

  @AudioFormatFlags()
  external int mFormatFlags;

  @UInt32()
  external int mBytesPerPacket;

  @UInt32()
  external int mFramesPerPacket;

  @UInt32()
  external int mBytesPerFrame;

  @UInt32()
  external int mChannelsPerFrame;

  @UInt32()
  external int mBitsPerChannel;

  @UInt32()
  external int mReserved;
}

/// A four char code indicating the general kind of data in the stream.
typedef AudioFormatID = UInt32;

/// Flags that are specific to each format.
typedef AudioFormatFlags = UInt32;

/// This structure describes the packet layout of a buffer of data where the
/// size of each packet may not be the same or where there is extraneous data
/// between packets. The number of bytes from the start of the buffer to the
/// beginning of the packet. The number of sample frames of data in the packet.
/// For formats with a constant number of frames per packet, this field is set
/// to 0. The number of bytes in the packet.
class AudioStreamPacketDescription extends ffi.Struct {
  @SInt64()
  external int mStartOffset;

  @UInt32()
  external int mVariableFramesInPacket;

  @UInt32()
  external int mDataByteSize;
}

typedef SInt64 = ffi.LongLong;

/// A variable length array of AudioBuffer structures. The number of
/// AudioBuffers in the mBuffers array. A variable length array of AudioBuffers.
class AudioBufferList extends ffi.Struct {
  @UInt32()
  external int mNumberBuffers;

  @ffi.Array.multi([1])
  external ffi.Array<AudioBuffer> mBuffers;
}

/// A structure to hold a buffer of audio data. The number of interleaved
/// channels in the buffer. The number of bytes in the buffer pointed at by
/// mData. A pointer to the buffer of audio data.
class AudioBuffer extends ffi.Struct {
  @UInt32()
  external int mNumberChannels;

  @UInt32()
  external int mDataByteSize;

  external ffi.Pointer<ffi.Void> mData;
}

typedef AudioUnit = AudioComponentInstance;
typedef AudioUnitPropertyID = UInt32;
typedef AudioUnitScope = UInt32;
typedef AudioUnitElement = UInt32;
typedef AudioUnitPropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, AudioUnit, AudioUnitPropertyID,
            AudioUnitScope, AudioUnitElement)>>;
typedef AURenderCallback = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<AudioUnitRenderActionFlags>,
            ffi.Pointer<AudioTimeStamp>,
            UInt32,
            UInt32,
            ffi.Pointer<AudioBufferList>)>>;
typedef AudioUnitRenderActionFlags = UInt32;

/// A structure that holds different representations of the same point in time.
/// The absolute sample frame time. The host machine's time base,
/// mach_absolute_time. The ratio of actual host ticks per sample frame to the
/// nominal host ticks per sample frame. The word clock time. The SMPTE time. A
/// set of flags indicating which representations of the time are valid. Pads
/// the structure out to force an even 8 byte alignment.
class AudioTimeStamp extends ffi.Struct {
  @Float64()
  external double mSampleTime;

  @UInt64()
  external int mHostTime;

  @Float64()
  external double mRateScalar;

  @UInt64()
  external int mWordClockTime;

  external SMPTETime mSMPTETime;

  @AudioTimeStampFlags()
  external int mFlags;

  @UInt32()
  external int mReserved;
}

typedef UInt64 = ffi.UnsignedLongLong;

/// A structure for holding a SMPTE time. The number of subframes in the full
/// message. The number of subframes per frame (typically 80). The total number
/// of messages received. The kind of SMPTE time using the SMPTE time type
/// constants. A set of flags that indicate the SMPTE state. The number of hours
/// in the full message. The number of minutes in the full message. The number
/// of seconds in the full message. The number of frames in the full message.
class SMPTETime extends ffi.Struct {
  @SInt16()
  external int mSubframes;

  @SInt16()
  external int mSubframeDivisor;

  @UInt32()
  external int mCounter;

  @SMPTETimeType()
  external int mType;

  @SMPTETimeFlags()
  external int mFlags;

  @SInt16()
  external int mHours;

  @SInt16()
  external int mMinutes;

  @SInt16()
  external int mSeconds;

  @SInt16()
  external int mFrames;
}

/// Constants that describe the type of SMPTE time. 24 Frame 25 Frame 30 Drop
/// Frame 30 Frame 29.97 Frame 29.97 Drop Frame 60 Frame 59.94 Frame 60 Drop
/// Frame 59.94 Drop Frame 50 Frame 23.98 Frame
typedef SMPTETimeType = UInt32;

/// Flags that describe the SMPTE time state. The full time is valid. Time is
/// running.
typedef SMPTETimeFlags = UInt32;

/// The flags that indicate which fields in an AudioTimeStamp structure are
/// valid. The sample frame time is valid. The host time is valid. The rate
/// scalar is valid. The word clock time is valid. The SMPTE time is valid. The
/// sample frame time and the host time are valid.
typedef AudioTimeStampFlags = UInt32;
typedef AudioUnitParameterID = UInt32;
typedef AudioUnitParameterValue = Float32;

/// ******************************************************************************
typedef Float32 = ffi.Float;

class AudioUnitParameterEvent extends ffi.Struct {
  @AudioUnitScope()
  external int scope;

  @AudioUnitElement()
  external int element;

  @AudioUnitParameterID()
  external int parameter;

  @AUParameterEventType()
  external int eventType;

  external UnnamedUnion1 eventValues;
}

typedef AUParameterEventType = UInt32;

class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct1 ramp;

  external UnnamedStruct2 immediate;
}

class UnnamedStruct1 extends ffi.Struct {
  @SInt32()
  external int startBufferOffset;

  @UInt32()
  external int durationInFrames;

  @AudioUnitParameterValue()
  external double startValue;

  @AudioUnitParameterValue()
  external double endValue;
}

class UnnamedStruct2 extends ffi.Struct {
  @UInt32()
  external int bufferOffset;

  @AudioUnitParameterValue()
  external double value;
}

/// A reference to an AudioConverter object.
typedef AudioConverterRef = ffi.Pointer<OpaqueAudioConverter>;

class OpaqueAudioConverter extends ffi.Opaque {}

/// This structure is used to describe codecs installed on the system. The four
/// char code codec type. The four char code codec subtype. The four char code
/// codec manufacturer.
class AudioClassDescription extends ffi.Struct {
  @OSType()
  external int mType;

  @OSType()
  external int mSubType;

  @OSType()
  external int mManufacturer;
}

typedef AudioConverterPropertyID = UInt32;

/// Callback function for supplying input data to
/// AudioConverterFillComplexBuffer.
typedef AudioConverterComplexInputDataProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(
            AudioConverterRef,
            ffi.Pointer<UInt32>,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<ffi.Pointer<AudioStreamPacketDescription>>,
            ffi.Pointer<ffi.Void>)>>;

/// Callback function for supplying input data to AudioConverterFillBuffer.
typedef AudioConverterInputDataProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(AudioConverterRef, ffi.Pointer<UInt32>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Void>)>>;

/// Identifier for an audio file type.
typedef AudioFileTypeID = UInt32;

/// These are flags that can be used with the CreateURL API call If set, then
/// the CreateURL call will erase the contents of an existing file If not set,
/// then the CreateURL call will fail if the file already exists Normally, newly
/// created and optimized files will have padding added in order to page align
/// the data to 4KB boundaries. This makes reading the data more efficient. When
/// disk space is a concern, this flag can be set so that the padding will not
/// be added.
typedef AudioFileFlags = UInt32;

/// An opaque reference to an AudioFile object.
typedef AudioFileID = ffi.Pointer<OpaqueAudioFileID>;

class OpaqueAudioFileID extends ffi.Opaque {}

typedef AudioFilePermissions = SInt8;
typedef SInt8 = ffi.SignedChar;

/// A callback for reading data. used with AudioFileOpenWithCallbacks or
/// AudioFileInitializeWithCallbacks.
typedef AudioFile_ReadProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(ffi.Pointer<ffi.Void>, SInt64, UInt32,
            ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>>;

/// A callback for writing data. used with AudioFileOpenWithCallbacks or
/// AudioFileInitializeWithCallbacks.
typedef AudioFile_WriteProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(ffi.Pointer<ffi.Void>, SInt64, UInt32,
            ffi.Pointer<ffi.Void>, ffi.Pointer<UInt32>)>>;

/// A callback for getting the size of the file data. used with
/// AudioFileOpenWithCallbacks or AudioFileInitializeWithCallbacks.
typedef AudioFile_GetSizeProc
    = ffi.Pointer<ffi.NativeFunction<SInt64 Function(ffi.Pointer<ffi.Void>)>>;

/// A callback for setting the size of the file data. used with
/// AudioFileOpenWithCallbacks or AudioFileInitializeWithCallbacks.
typedef AudioFile_SetSizeProc = ffi.Pointer<
    ffi.NativeFunction<OSStatus Function(ffi.Pointer<ffi.Void>, SInt64)>>;

/// A constant for an AudioFile property.
typedef AudioFilePropertyID = UInt32;

class FSRef extends ffi.Opaque {}

typedef AudioFileStream_PropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            AudioFileStreamID,
            AudioFileStreamPropertyID,
            ffi.Pointer<AudioFileStreamPropertyFlags>)>>;
typedef AudioFileStreamID = ffi.Pointer<OpaqueAudioFileStreamID>;

class OpaqueAudioFileStreamID extends ffi.Opaque {}

typedef AudioFileStreamPropertyID = UInt32;

/// This flag is set in a call to AudioFileStream_PropertyListenerProc when the
/// value of the property can be obtained at any later time. If this flag is not
/// set, then you should either get the value of the property from within this
/// callback or set the flag kAudioFileStreamPropertyFlag_CacheProperty in order
/// to signal to the parser to begin caching the property data. Otherwise the
/// value may not be available in the future.
typedef AudioFileStreamPropertyFlags = UInt32;
typedef AudioFileStream_PacketsProc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, UInt32, UInt32,
            ffi.Pointer<ffi.Void>, ffi.Pointer<AudioStreamPacketDescription>)>>;

/// This flag is passed in to AudioFileStreamParseBytes to signal a
/// discontinuity. Any partial packet straddling a buffer boundary will be
/// discarded. This is necessary to avoid being called with a corrupt packet.
/// After a discontinuity occurs seeking may be approximate in some data
/// formats.
typedef AudioFileStreamParseFlags = UInt32;

/// This flag may be returned from AudioFileStreamSeek if the byte offset is
/// only an estimate, not exact.
typedef AudioFileStreamSeekFlags = UInt32;

/// A type for four char codes for property IDs
typedef AudioFormatPropertyID = UInt32;

/// Defines a pointer to a callback function that is called when a playback
/// audio queue has finished taking data from a buffer.
typedef AudioQueueOutputCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, AudioQueueRef, AudioQueueBufferRef)>>;

/// An opaque data type that represents an audio queue.
typedef AudioQueueRef = ffi.Pointer<OpaqueAudioQueue>;

class OpaqueAudioQueue extends ffi.Opaque {}

/// An pointer to an AudioQueueBuffer.
typedef AudioQueueBufferRef = ffi.Pointer<AudioQueueBuffer>;

/// Defines a buffer of audio data to be managed by an audio queue.
class AudioQueueBuffer extends ffi.Struct {
  @UInt32()
  external int mAudioDataBytesCapacity;

  external ffi.Pointer<ffi.Void> mAudioData;

  @UInt32()
  external int mAudioDataByteSize;

  external ffi.Pointer<ffi.Void> mUserData;

  @UInt32()
  external int mPacketDescriptionCapacity;

  external ffi.Pointer<AudioStreamPacketDescription> mPacketDescriptions;

  @UInt32()
  external int mPacketDescriptionCount;
}

typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;

class __CFRunLoop extends ffi.Opaque {}

/// Defines a pointer to a callback function that is called when a recording
/// audio queue has finished filling a buffer.
typedef AudioQueueInputCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            AudioQueueRef,
            AudioQueueBufferRef,
            ffi.Pointer<AudioTimeStamp>,
            UInt32,
            ffi.Pointer<AudioStreamPacketDescription>)>>;

/// Specifies a value for an audio queue parameter.
class AudioQueueParameterEvent extends ffi.Struct {
  @AudioQueueParameterID()
  external int mID;

  @AudioQueueParameterValue()
  external double mValue;
}

/// A value that uniquely identifies an audio queue parameter.
typedef AudioQueueParameterID = UInt32;

/// A value for an audio queue parameter.
typedef AudioQueueParameterValue = Float32;

/// A value that uniquely identifies an audio queue property.
typedef AudioQueuePropertyID = UInt32;

/// Defines a pointer to a callback function that is called when a specified
/// property changes value.
typedef AudioQueuePropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, AudioQueueRef, AudioQueuePropertyID)>>;

/// An opaque data type that represents an audio queue timeline.
typedef AudioQueueTimelineRef = ffi.Pointer<OpaqueAudioQueueTimeline>;

class OpaqueAudioQueueTimeline extends ffi.Opaque {}

/// This structure is used to specify channel layouts in files and hardware. The
/// AudioChannelLayoutTag that indicates the layout. If mChannelLayoutTag is set
/// to kAudioChannelLayoutTag_UseChannelBitmap, this field is the channel usage
/// bitmap. The number of items in the mChannelDescriptions array. A variable
/// length array of AudioChannelDescriptions that describe the layout.
class AudioChannelLayout extends ffi.Struct {
  @AudioChannelLayoutTag()
  external int mChannelLayoutTag;

  @AudioChannelBitmap()
  external int mChannelBitmap;

  @UInt32()
  external int mNumberChannelDescriptions;

  @ffi.Array.multi([1])
  external ffi.Array<AudioChannelDescription> mChannelDescriptions;
}

/// A tag identifying a particular pre-defined channel layout.
typedef AudioChannelLayoutTag = UInt32;

/// These constants are for use in the mChannelBitmap field of an
/// AudioChannelLayout structure.
typedef AudioChannelBitmap = UInt32;

/// This structure describes a single channel. The AudioChannelLabel that
/// describes the channel. Flags that control the interpretation of
/// mCoordinates. An ordered triple that specifies a precise speaker location.
class AudioChannelDescription extends ffi.Struct {
  @AudioChannelLabel()
  external int mChannelLabel;

  @AudioChannelFlags()
  external int mChannelFlags;

  @ffi.Array.multi([3])
  external ffi.Array<Float32> mCoordinates;
}

/// A tag identifying how the channel is to be used.
typedef AudioChannelLabel = UInt32;

/// These constants are used in the mChannelFlags field of an
/// AudioChannelDescription structure. The channel is specified by the cartesian
/// coordinates of the speaker position. This flag is mutally exclusive with
/// kAudioChannelFlags_SphericalCoordinates. The channel is specified by the
/// spherical coordinates of the speaker position. This flag is mutally
/// exclusive with kAudioChannelFlags_RectangularCoordinates. Set to indicate
/// the units are in meters, clear to indicate the units are relative to the
/// unit cube or unit sphere.
typedef AudioChannelFlags = UInt32;

/// A function called when an audio queue has data to be processed by its tap
typedef AudioQueueProcessingTapCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            AudioQueueProcessingTapRef,
            UInt32,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Pointer<AudioQueueProcessingTapFlags>,
            ffi.Pointer<UInt32>,
            ffi.Pointer<AudioBufferList>)>>;

/// An object for intercepting and processing audio within an audio queue.
typedef AudioQueueProcessingTapRef = ffi.Pointer<OpaqueAudioQueueProcessingTap>;

class OpaqueAudioQueueProcessingTap extends ffi.Opaque {}

/// Flags used in conjunction with processing taps
typedef AudioQueueProcessingTapFlags = UInt32;

/// A UInt32 that provides a handle on a specific AudioObject.
typedef AudioObjectID = UInt32;

/// An AudioObjectPropertyAddress collects the three parts that identify a
/// specific property together in a struct for easy transmission. mSelector The
/// AudioObjectPropertySelector for the property. mScope The
/// AudioObjectPropertyScope for the property. mElement The
/// AudioObjectPropertyElement for the property.
class AudioObjectPropertyAddress extends ffi.Struct {
  @AudioObjectPropertySelector()
  external int mSelector;

  @AudioObjectPropertyScope()
  external int mScope;

  @AudioObjectPropertyElement()
  external int mElement;
}

/// An AudioObjectPropertySelector is a four char code that identifies, along
/// with the AudioObjectPropertyScope and AudioObjectPropertyElement, a specific
/// piece of information about an AudioObject.
typedef AudioObjectPropertySelector = UInt32;

/// An AudioObjectPropertyScope is a four char code that identifies, along with
/// the AudioObjectPropertySelector and AudioObjectPropertyElement, a specific
/// piece of information about an AudioObject.
typedef AudioObjectPropertyScope = UInt32;

/// An AudioObjectPropertyElement is an integer that identifies, along with the
/// AudioObjectPropertySelector and AudioObjectPropertyScope, a specific piece
/// of information about an AudioObject.
typedef AudioObjectPropertyElement = UInt32;

/// Clients register an AudioObjectPropertyListenerProc with an AudioObject in
/// order to receive notifications when the properties of the object change.
typedef AudioObjectPropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(AudioObjectID, UInt32,
            ffi.Pointer<AudioObjectPropertyAddress>, ffi.Pointer<ffi.Void>)>>;

/// An AudioDeviceIOProc is called by an AudioDevice to provide input data read
/// from the device and collect output data to be written to the device for the
/// current IO cycle.
typedef AudioDeviceIOProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(
            AudioObjectID,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Pointer<AudioBufferList>,
            ffi.Pointer<AudioTimeStamp>,
            ffi.Pointer<ffi.Void>)>>;

/// An AudioDeviceIOProcID represents both an IOProc and the client data that
/// goes with it. Once created, an AudioDeviceIOProcID can be used everywhere
/// one would use a regular IOProc. The purpose for an AudioDeviceIOProcID is to
/// allow a client to register the same function pointer as an IOProc with a
/// device multiple times provided
typedef AudioDeviceIOProcID = AudioDeviceIOProc;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;

class __CFRunLoopSource extends ffi.Opaque {}

/// An AudioHardwarePropertyID is a integer that identifies a specific piece of
/// information about the AudioSystemObject.
typedef AudioHardwarePropertyID = AudioObjectPropertySelector;

/// Clients register an AudioHardwarePropertyListenerProc with the
/// AudioSystemObject in order to receive notifications when the properties of
/// the object change.
typedef AudioHardwarePropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(AudioHardwarePropertyID, ffi.Pointer<ffi.Void>)>>;

/// AudioDevice is the base class for all objects that represent an audio
/// device.
typedef AudioDeviceID = AudioObjectID;

/// An AudioDevicePropertyID is an integer that identifies a specific piece of
/// information about the object.
typedef AudioDevicePropertyID = AudioObjectPropertySelector;

/// Clients register an AudioDevicePropertyListenerProc with the AudioDevice
/// object in order to receive notifications when the properties of the object
/// change.
typedef AudioDevicePropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(AudioDeviceID, UInt32, Boolean, AudioDevicePropertyID,
            ffi.Pointer<ffi.Void>)>>;

/// AudioStream is the base class for all objects that represent a stream of
/// data on an audio device.
typedef AudioStreamID = AudioObjectID;

/// Clients register an AudioStreamPropertyListenerProc with the AudioStream
/// object in order to receive notifications when the properties of the object
/// change.
typedef AudioStreamPropertyListenerProc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(AudioStreamID, UInt32, AudioDevicePropertyID,
            ffi.Pointer<ffi.Void>)>>;

/// SystemSoundIDs are created by the System Sound client application for
/// playback of a provided AudioFile.
typedef SystemSoundID = UInt32;

/// Type used for specifying an AudioServices property.
typedef AudioServicesPropertyID = UInt32;

/// A function to be executed when a SystemSoundID finishes playing.
typedef AudioServicesSystemSoundCompletionProc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(SystemSoundID, ffi.Pointer<ffi.Void>)>>;
typedef os_workgroup_interval_t = os_workgroup_t;
typedef os_workgroup_t = ffi.Pointer<os_workgroup_s>;

class os_workgroup_s extends ffi.Opaque {}

abstract class os_clockid_t {
  static const int OS_CLOCK_MACH_ABSOLUTE_TIME = 32;
}

typedef os_workgroup_attr_t = ffi.Pointer<os_workgroup_attr_opaque_s>;

class os_workgroup_attr_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Char> opaque;
}

/// represents an instance of an AudioFileComponent.
typedef AudioFileComponent = AudioComponentInstance;

/// a four char code for a property ID.
typedef AudioFileComponentPropertyID = UInt32;

/// A function to be called when an interruption begins or ends.
typedef AudioSessionInterruptionListener = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, UInt32)>>;

/// Type used for specifying an AudioSession property.
typedef AudioSessionPropertyID = UInt32;

/// A function to be executed when a property changes.
typedef AudioSessionPropertyListener = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, AudioSessionPropertyID, UInt32,
            ffi.Pointer<ffi.Void>)>>;

const int kSystemSoundID_UserPreferredAlert = 4096;

const int kSystemSoundID_FlashScreen = 4094;

const int kSystemSoundID_Vibrate = 4095;
