// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:core_foundation_framework/core_foundation_framework.dart'
    as coreFoundation;

/// Bindings for the Security Framework
class Security {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Security(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Security.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Returns a string describing the specified error result code.
  coreFoundation.CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString =
      _SecCopyErrorMessageStringPtr.asFunction<
          coreFoundation.CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  /// Returns the type identifier of SecCertificate instances.
  int SecCertificateGetTypeID() {
    return _SecCertificateGetTypeID();
  }

  late final _SecCertificateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecCertificateGetTypeID');
  late final _SecCertificateGetTypeID =
      _SecCertificateGetTypeIDPtr.asFunction<int Function()>();

  /// Create a certificate given it's DER representation as a CFData.
  SecCertificateRef SecCertificateCreateWithData(
    coreFoundation.CFAllocatorRef allocator,
    coreFoundation.CFDataRef data,
  ) {
    return _SecCertificateCreateWithData(
      allocator,
      data,
    );
  }

  late final _SecCertificateCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(coreFoundation.CFAllocatorRef,
              coreFoundation.CFDataRef)>>('SecCertificateCreateWithData');
  late final _SecCertificateCreateWithData =
      _SecCertificateCreateWithDataPtr.asFunction<
          SecCertificateRef Function(
              coreFoundation.CFAllocatorRef, coreFoundation.CFDataRef)>();

  /// Return the DER representation of an X.509 certificate.
  coreFoundation.CFDataRef SecCertificateCopyData(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyData(
      certificate,
    );
  }

  late final _SecCertificateCopyDataPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFDataRef Function(
              SecCertificateRef)>>('SecCertificateCopyData');
  late final _SecCertificateCopyData = _SecCertificateCopyDataPtr.asFunction<
      coreFoundation.CFDataRef Function(SecCertificateRef)>();

  /// Return a simple string which hopefully represents a human understandable
  /// summary.
  coreFoundation.CFStringRef SecCertificateCopySubjectSummary(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopySubjectSummary(
      certificate,
    );
  }

  late final _SecCertificateCopySubjectSummaryPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFStringRef Function(
              SecCertificateRef)>>('SecCertificateCopySubjectSummary');
  late final _SecCertificateCopySubjectSummary =
      _SecCertificateCopySubjectSummaryPtr.asFunction<
          coreFoundation.CFStringRef Function(SecCertificateRef)>();

  /// Retrieves the common name of the subject of a given certificate.
  int SecCertificateCopyCommonName(
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFStringRef> commonName,
  ) {
    return _SecCertificateCopyCommonName(
      certificate,
      commonName,
    );
  }

  late final _SecCertificateCopyCommonNamePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFStringRef>)>>(
      'SecCertificateCopyCommonName');
  late final _SecCertificateCopyCommonName =
      _SecCertificateCopyCommonNamePtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<coreFoundation.CFStringRef>)>();

  /// Returns an array of zero or more email addresses for the subject of a
  /// given certificate.
  int SecCertificateCopyEmailAddresses(
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFArrayRef> emailAddresses,
  ) {
    return _SecCertificateCopyEmailAddresses(
      certificate,
      emailAddresses,
    );
  }

  late final _SecCertificateCopyEmailAddressesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecCertificateCopyEmailAddresses');
  late final _SecCertificateCopyEmailAddresses =
      _SecCertificateCopyEmailAddressesPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Return the certificate's normalized issuer
  coreFoundation.CFDataRef SecCertificateCopyNormalizedIssuerSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedIssuerSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerSequencePtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(SecCertificateRef)>>(
      'SecCertificateCopyNormalizedIssuerSequence');
  late final _SecCertificateCopyNormalizedIssuerSequence =
      _SecCertificateCopyNormalizedIssuerSequencePtr.asFunction<
          coreFoundation.CFDataRef Function(SecCertificateRef)>();

  /// Return the certificate's normalized subject
  coreFoundation.CFDataRef SecCertificateCopyNormalizedSubjectSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedSubjectSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectSequencePtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(SecCertificateRef)>>(
      'SecCertificateCopyNormalizedSubjectSequence');
  late final _SecCertificateCopyNormalizedSubjectSequence =
      _SecCertificateCopyNormalizedSubjectSequencePtr.asFunction<
          coreFoundation.CFDataRef Function(SecCertificateRef)>();

  /// Retrieves the public key for a given certificate.
  SecKeyRef SecCertificateCopyKey(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyKey(
      certificate,
    );
  }

  late final _SecCertificateCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecCertificateRef)>>(
          'SecCertificateCopyKey');
  late final _SecCertificateCopyKey = _SecCertificateCopyKeyPtr.asFunction<
      SecKeyRef Function(SecCertificateRef)>();

  /// Retrieves the public key for a given certificate.
  int SecCertificateCopyPublicKey(
    SecCertificateRef certificate,
    ffi.Pointer<SecKeyRef> key,
  ) {
    return _SecCertificateCopyPublicKey(
      certificate,
      key,
    );
  }

  late final _SecCertificateCopyPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<SecKeyRef>)>>('SecCertificateCopyPublicKey');
  late final _SecCertificateCopyPublicKey = _SecCertificateCopyPublicKeyPtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<SecKeyRef>)>();

  /// Return the certificate's serial number.
  coreFoundation.CFDataRef SecCertificateCopySerialNumberData(
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumberData(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberDataPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopySerialNumberData');
  late final _SecCertificateCopySerialNumberData =
      _SecCertificateCopySerialNumberDataPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the certificate's serial number.
  coreFoundation.CFDataRef SecCertificateCopySerialNumber(
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumber(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopySerialNumber');
  late final _SecCertificateCopySerialNumber =
      _SecCertificateCopySerialNumberPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Creates a certificate based on the input data, type, and encoding.
  int SecCertificateCreateFromData(
    ffi.Pointer<SecAsn1Item> data,
    int type,
    int encoding,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCreateFromData(
      data,
      type,
      encoding,
      certificate,
    );
  }

  late final _SecCertificateCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<SecAsn1Item>,
              CSSM_CERT_TYPE,
              CSSM_CERT_ENCODING,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCreateFromData');
  late final _SecCertificateCreateFromData =
      _SecCertificateCreateFromDataPtr.asFunction<
          int Function(ffi.Pointer<SecAsn1Item>, int, int,
              ffi.Pointer<SecCertificateRef>)>();

  /// Adds a certificate to the specified keychain.
  int SecCertificateAddToKeychain(
    SecCertificateRef certificate,
    SecKeychainRef keychain,
  ) {
    return _SecCertificateAddToKeychain(
      certificate,
      keychain,
    );
  }

  late final _SecCertificateAddToKeychainPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecKeychainRef)>>('SecCertificateAddToKeychain');
  late final _SecCertificateAddToKeychain = _SecCertificateAddToKeychainPtr
      .asFunction<int Function(SecCertificateRef, SecKeychainRef)>();

  /// Retrieves the data for a given certificate.
  int SecCertificateGetData(
    SecCertificateRef certificate,
    CSSM_DATA_PTR data,
  ) {
    return _SecCertificateGetData(
      certificate,
      data,
    );
  }

  late final _SecCertificateGetDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCertificateRef, CSSM_DATA_PTR)>>('SecCertificateGetData');
  late final _SecCertificateGetData = _SecCertificateGetDataPtr.asFunction<
      int Function(SecCertificateRef, CSSM_DATA_PTR)>();

  /// Retrieves the type for a given certificate.
  int SecCertificateGetType(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CERT_TYPE> certificateType,
  ) {
    return _SecCertificateGetType(
      certificate,
      certificateType,
    );
  }

  late final _SecCertificateGetTypePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CERT_TYPE>)>>('SecCertificateGetType');
  late final _SecCertificateGetType = _SecCertificateGetTypePtr.asFunction<
      int Function(SecCertificateRef, ffi.Pointer<CSSM_CERT_TYPE>)>();

  /// Retrieves the subject name for a given certificate.
  int SecCertificateGetSubject(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> subject,
  ) {
    return _SecCertificateGetSubject(
      certificate,
      subject,
    );
  }

  late final _SecCertificateGetSubjectPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetSubject');
  late final _SecCertificateGetSubject =
      _SecCertificateGetSubjectPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  /// Retrieves the issuer name for a given certificate.
  int SecCertificateGetIssuer(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> issuer,
  ) {
    return _SecCertificateGetIssuer(
      certificate,
      issuer,
    );
  }

  late final _SecCertificateGetIssuerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetIssuer');
  late final _SecCertificateGetIssuer = _SecCertificateGetIssuerPtr.asFunction<
      int Function(
          SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  /// Retrieves the certificate library handle for a given certificate.
  int SecCertificateGetCLHandle(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CL_HANDLE> clHandle,
  ) {
    return _SecCertificateGetCLHandle(
      certificate,
      clHandle,
    );
  }

  late final _SecCertificateGetCLHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CL_HANDLE>)>>('SecCertificateGetCLHandle');
  late final _SecCertificateGetCLHandle =
      _SecCertificateGetCLHandlePtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CSSM_CL_HANDLE>)>();

  /// Retrieves the algorithm identifier for a given certificate.
  int SecCertificateGetAlgorithmID(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<SecAsn1AlgId>> algid,
  ) {
    return _SecCertificateGetAlgorithmID(
      certificate,
      algid,
    );
  }

  late final _SecCertificateGetAlgorithmIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>>(
      'SecCertificateGetAlgorithmID');
  late final _SecCertificateGetAlgorithmID =
      _SecCertificateGetAlgorithmIDPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>();

  /// Returns the preferred certificate for the specified name and key usage. If
  /// a preferred certificate does not exist for the specified name and key
  /// usage, NULL is returned.
  int SecCertificateCopyPreference(
    coreFoundation.CFStringRef name,
    int keyUsage,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCopyPreference(
      name,
      keyUsage,
      certificate,
    );
  }

  late final _SecCertificateCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFStringRef, uint32,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCopyPreference');
  late final _SecCertificateCopyPreference =
      _SecCertificateCopyPreferencePtr.asFunction<
          int Function(coreFoundation.CFStringRef, int,
              ffi.Pointer<SecCertificateRef>)>();

  /// Returns the preferred certificate for the specified name and key usage. If
  /// a preferred certificate does not exist for the specified name and key
  /// usage, NULL is returned.
  SecCertificateRef SecCertificateCopyPreferred(
    coreFoundation.CFStringRef name,
    coreFoundation.CFArrayRef keyUsage,
  ) {
    return _SecCertificateCopyPreferred(
      name,
      keyUsage,
    );
  }

  late final _SecCertificateCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef)>>('SecCertificateCopyPreferred');
  late final _SecCertificateCopyPreferred =
      _SecCertificateCopyPreferredPtr.asFunction<
          SecCertificateRef Function(
              coreFoundation.CFStringRef, coreFoundation.CFArrayRef)>();

  /// Sets the preferred certificate for a specified name, key usage, and date.
  int SecCertificateSetPreference(
    SecCertificateRef certificate,
    coreFoundation.CFStringRef name,
    int keyUsage,
    coreFoundation.CFDateRef date,
  ) {
    return _SecCertificateSetPreference(
      certificate,
      name,
      keyUsage,
      date,
    );
  }

  late final _SecCertificateSetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCertificateRef,
              coreFoundation.CFStringRef,
              uint32,
              coreFoundation.CFDateRef)>>('SecCertificateSetPreference');
  late final _SecCertificateSetPreference =
      _SecCertificateSetPreferencePtr.asFunction<
          int Function(SecCertificateRef, coreFoundation.CFStringRef, int,
              coreFoundation.CFDateRef)>();

  /// Sets the preferred certificate for a specified name and optional key
  /// usage.
  int SecCertificateSetPreferred(
    SecCertificateRef certificate,
    coreFoundation.CFStringRef name,
    coreFoundation.CFArrayRef keyUsage,
  ) {
    return _SecCertificateSetPreferred(
      certificate,
      name,
      keyUsage,
    );
  }

  late final _SecCertificateSetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef)>>('SecCertificateSetPreferred');
  late final _SecCertificateSetPreferred =
      _SecCertificateSetPreferredPtr.asFunction<
          int Function(SecCertificateRef, coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef)>();

  /// Constants used to access dictionary entries returned by
  /// SecCertificateCopyValues
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyKeyType =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyKeyType');

  coreFoundation.CFStringRef get kSecPropertyKeyType =>
      _kSecPropertyKeyType.value;

  set kSecPropertyKeyType(coreFoundation.CFStringRef value) =>
      _kSecPropertyKeyType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyKeyLabel =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyKeyLabel');

  coreFoundation.CFStringRef get kSecPropertyKeyLabel =>
      _kSecPropertyKeyLabel.value;

  set kSecPropertyKeyLabel(coreFoundation.CFStringRef value) =>
      _kSecPropertyKeyLabel.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPropertyKeyLocalizedLabel =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyKeyLocalizedLabel');

  coreFoundation.CFStringRef get kSecPropertyKeyLocalizedLabel =>
      _kSecPropertyKeyLocalizedLabel.value;

  set kSecPropertyKeyLocalizedLabel(coreFoundation.CFStringRef value) =>
      _kSecPropertyKeyLocalizedLabel.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyKeyValue =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyKeyValue');

  coreFoundation.CFStringRef get kSecPropertyKeyValue =>
      _kSecPropertyKeyValue.value;

  set kSecPropertyKeyValue(coreFoundation.CFStringRef value) =>
      _kSecPropertyKeyValue.value = value;

  /// Public Constants for property list values returned by
  /// SecCertificateCopyValues
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeWarning =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeWarning');

  coreFoundation.CFStringRef get kSecPropertyTypeWarning =>
      _kSecPropertyTypeWarning.value;

  set kSecPropertyTypeWarning(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeWarning.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeSuccess =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeSuccess');

  coreFoundation.CFStringRef get kSecPropertyTypeSuccess =>
      _kSecPropertyTypeSuccess.value;

  set kSecPropertyTypeSuccess(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeSuccess.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeSection =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeSection');

  coreFoundation.CFStringRef get kSecPropertyTypeSection =>
      _kSecPropertyTypeSection.value;

  set kSecPropertyTypeSection(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeSection.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeData =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeData');

  coreFoundation.CFStringRef get kSecPropertyTypeData =>
      _kSecPropertyTypeData.value;

  set kSecPropertyTypeData(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeData.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeString =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeString');

  coreFoundation.CFStringRef get kSecPropertyTypeString =>
      _kSecPropertyTypeString.value;

  set kSecPropertyTypeString(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeString.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeURL =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeURL');

  coreFoundation.CFStringRef get kSecPropertyTypeURL =>
      _kSecPropertyTypeURL.value;

  set kSecPropertyTypeURL(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeURL.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeDate =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeDate');

  coreFoundation.CFStringRef get kSecPropertyTypeDate =>
      _kSecPropertyTypeDate.value;

  set kSecPropertyTypeDate(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeArray =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeArray');

  coreFoundation.CFStringRef get kSecPropertyTypeArray =>
      _kSecPropertyTypeArray.value;

  set kSecPropertyTypeArray(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeArray.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeNumber =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeNumber');

  coreFoundation.CFStringRef get kSecPropertyTypeNumber =>
      _kSecPropertyTypeNumber.value;

  set kSecPropertyTypeNumber(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeNumber.value = value;

  /// Creates a dictionary that represents a certificate's contents.
  coreFoundation.CFDictionaryRef SecCertificateCopyValues(
    SecCertificateRef certificate,
    coreFoundation.CFArrayRef keys,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopyValues(
      certificate,
      keys,
      error,
    );
  }

  late final _SecCertificateCopyValuesPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDictionaryRef Function(
                  SecCertificateRef,
                  coreFoundation.CFArrayRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopyValues');
  late final _SecCertificateCopyValues =
      _SecCertificateCopyValuesPtr.asFunction<
          coreFoundation.CFDictionaryRef Function(
              SecCertificateRef,
              coreFoundation.CFArrayRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the long description of a certificate
  coreFoundation.CFStringRef SecCertificateCopyLongDescription(
    coreFoundation.CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopyLongDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyLongDescriptionPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFStringRef Function(coreFoundation.CFAllocatorRef,
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopyLongDescription');
  late final _SecCertificateCopyLongDescription =
      _SecCertificateCopyLongDescriptionPtr.asFunction<
          coreFoundation.CFStringRef Function(coreFoundation.CFAllocatorRef,
              SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the short description of a certificate
  coreFoundation.CFStringRef SecCertificateCopyShortDescription(
    coreFoundation.CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopyShortDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyShortDescriptionPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFStringRef Function(coreFoundation.CFAllocatorRef,
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopyShortDescription');
  late final _SecCertificateCopyShortDescription =
      _SecCertificateCopyShortDescriptionPtr.asFunction<
          coreFoundation.CFStringRef Function(coreFoundation.CFAllocatorRef,
              SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the certificate's normalized issuer
  coreFoundation.CFDataRef SecCertificateCopyNormalizedIssuerContent(
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedIssuerContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerContentPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopyNormalizedIssuerContent');
  late final _SecCertificateCopyNormalizedIssuerContent =
      _SecCertificateCopyNormalizedIssuerContentPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the certificate's normalized subject
  coreFoundation.CFDataRef SecCertificateCopyNormalizedSubjectContent(
    SecCertificateRef certificate,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedSubjectContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectContentPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCertificateCopyNormalizedSubjectContent');
  late final _SecCertificateCopyNormalizedSubjectContent =
      _SecCertificateCopyNormalizedSubjectContentPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecCertificateRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns the type identifier of SecIdentity instances.
  int SecIdentityGetTypeID() {
    return _SecIdentityGetTypeID();
  }

  late final _SecIdentityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID =
      _SecIdentityGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a new identity reference for the given certificate, assuming the
  /// associated private key is in one of the specified keychains.
  int SecIdentityCreateWithCertificate(
    coreFoundation.CFTypeRef keychainOrArray,
    SecCertificateRef certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(coreFoundation.CFTypeRef, SecCertificateRef,
                  ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate =
      _SecIdentityCreateWithCertificatePtr.asFunction<
          int Function(coreFoundation.CFTypeRef, SecCertificateRef,
              ffi.Pointer<SecIdentityRef>)>();

  /// Returns a reference to a certificate for the given identity reference.
  int SecIdentityCopyCertificate(
    SecIdentityRef identityRef,
    ffi.Pointer<SecCertificateRef> certificateRef,
  ) {
    return _SecIdentityCopyCertificate(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecCertificateRef>)>>('SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate =
      _SecIdentityCopyCertificatePtr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<SecCertificateRef>)>();

  /// Returns the private key associated with an identity.
  int SecIdentityCopyPrivateKey(
    SecIdentityRef identityRef,
    ffi.Pointer<SecKeyRef> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecKeyRef>)>>('SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey = _SecIdentityCopyPrivateKeyPtr
      .asFunction<int Function(SecIdentityRef, ffi.Pointer<SecKeyRef>)>();

  /// Returns the preferred identity for the specified name and key usage,
  /// optionally limiting the result to an identity issued by a certificate
  /// whose subject is one of the distinguished names in validIssuers. If a
  /// preferred identity does not exist, NULL is returned.
  int SecIdentityCopyPreference(
    coreFoundation.CFStringRef name,
    int keyUsage,
    coreFoundation.CFArrayRef validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFStringRef,
              CSSM_KEYUSE,
              coreFoundation.CFArrayRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference =
      _SecIdentityCopyPreferencePtr.asFunction<
          int Function(coreFoundation.CFStringRef, int,
              coreFoundation.CFArrayRef, ffi.Pointer<SecIdentityRef>)>();

  /// Returns the preferred identity for the specified name and key usage,
  /// optionally limiting the result to an identity issued by a certificate
  /// whose subject is one of the distinguished names in validIssuers. If a
  /// preferred identity does not exist, NULL is returned.
  SecIdentityRef SecIdentityCopyPreferred(
    coreFoundation.CFStringRef name,
    coreFoundation.CFArrayRef keyUsage,
    coreFoundation.CFArrayRef validIssuers,
  ) {
    return _SecIdentityCopyPreferred(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(
              coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef,
              coreFoundation.CFArrayRef)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred =
      _SecIdentityCopyPreferredPtr.asFunction<
          SecIdentityRef Function(coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef, coreFoundation.CFArrayRef)>();

  /// Sets the preferred identity for the specified name and key usage.
  int SecIdentitySetPreference(
    SecIdentityRef identity,
    coreFoundation.CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, coreFoundation.CFStringRef,
              CSSM_KEYUSE)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference =
      _SecIdentitySetPreferencePtr.asFunction<
          int Function(SecIdentityRef, coreFoundation.CFStringRef, int)>();

  /// Sets the preferred identity for the specified name and key usage.
  int SecIdentitySetPreferred(
    SecIdentityRef identity,
    coreFoundation.CFStringRef name,
    coreFoundation.CFArrayRef keyUsage,
  ) {
    return _SecIdentitySetPreferred(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred = _SecIdentitySetPreferredPtr.asFunction<
      int Function(SecIdentityRef, coreFoundation.CFStringRef,
          coreFoundation.CFArrayRef)>();

  /// Obtain the system-wide SecIdentityRef associated with a specified domain.
  int SecIdentityCopySystemIdentity(
    coreFoundation.CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<coreFoundation.CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentityPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFStringRef,
                  ffi.Pointer<SecIdentityRef>,
                  ffi.Pointer<coreFoundation.CFStringRef>)>>(
      'SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity =
      _SecIdentityCopySystemIdentityPtr.asFunction<
          int Function(coreFoundation.CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<coreFoundation.CFStringRef>)>();

  /// Assign the supplied SecIdentityRef to the specified domain.
  int SecIdentitySetSystemIdentity(
    coreFoundation.CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFStringRef,
              SecIdentityRef)>>('SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity = _SecIdentitySetSystemIdentityPtr
      .asFunction<int Function(coreFoundation.CFStringRef, SecIdentityRef)>();

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecIdentityDomainDefault =
      _lookup<coreFoundation.CFStringRef>('kSecIdentityDomainDefault');

  coreFoundation.CFStringRef get kSecIdentityDomainDefault =>
      _kSecIdentityDomainDefault.value;

  set kSecIdentityDomainDefault(coreFoundation.CFStringRef value) =>
      _kSecIdentityDomainDefault.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecIdentityDomainKerberosKDC =
      _lookup<coreFoundation.CFStringRef>('kSecIdentityDomainKerberosKDC');

  coreFoundation.CFStringRef get kSecIdentityDomainKerberosKDC =>
      _kSecIdentityDomainKerberosKDC.value;

  set kSecIdentityDomainKerberosKDC(coreFoundation.CFStringRef value) =>
      _kSecIdentityDomainKerberosKDC.value = value;

  /// Returns the type identifier of SecAccessControl instances.
  int SecAccessControlGetTypeID() {
    return _SecAccessControlGetTypeID();
  }

  late final _SecAccessControlGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecAccessControlGetTypeID');
  late final _SecAccessControlGetTypeID =
      _SecAccessControlGetTypeIDPtr.asFunction<int Function()>();

  /// Creates new access control object based on protection type and additional
  /// flags.
  SecAccessControlRef SecAccessControlCreateWithFlags(
    coreFoundation.CFAllocatorRef allocator,
    coreFoundation.CFTypeRef protection,
    int flags,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecAccessControlCreateWithFlags(
      allocator,
      protection,
      flags,
      error,
    );
  }

  late final _SecAccessControlCreateWithFlagsPtr = _lookup<
          ffi.NativeFunction<
              SecAccessControlRef Function(
                  coreFoundation.CFAllocatorRef,
                  coreFoundation.CFTypeRef,
                  SecAccessControlCreateFlags,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecAccessControlCreateWithFlags');
  late final _SecAccessControlCreateWithFlags =
      _SecAccessControlCreateWithFlagsPtr.asFunction<
          SecAccessControlRef Function(
              coreFoundation.CFAllocatorRef,
              coreFoundation.CFTypeRef,
              int,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecClass =
      _lookup<coreFoundation.CFStringRef>('kSecClass');

  coreFoundation.CFStringRef get kSecClass => _kSecClass.value;

  set kSecClass(coreFoundation.CFStringRef value) => _kSecClass.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecClassInternetPassword =
      _lookup<coreFoundation.CFStringRef>('kSecClassInternetPassword');

  coreFoundation.CFStringRef get kSecClassInternetPassword =>
      _kSecClassInternetPassword.value;

  set kSecClassInternetPassword(coreFoundation.CFStringRef value) =>
      _kSecClassInternetPassword.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecClassGenericPassword =
      _lookup<coreFoundation.CFStringRef>('kSecClassGenericPassword');

  coreFoundation.CFStringRef get kSecClassGenericPassword =>
      _kSecClassGenericPassword.value;

  set kSecClassGenericPassword(coreFoundation.CFStringRef value) =>
      _kSecClassGenericPassword.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecClassCertificate =
      _lookup<coreFoundation.CFStringRef>('kSecClassCertificate');

  coreFoundation.CFStringRef get kSecClassCertificate =>
      _kSecClassCertificate.value;

  set kSecClassCertificate(coreFoundation.CFStringRef value) =>
      _kSecClassCertificate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecClassKey =
      _lookup<coreFoundation.CFStringRef>('kSecClassKey');

  coreFoundation.CFStringRef get kSecClassKey => _kSecClassKey.value;

  set kSecClassKey(coreFoundation.CFStringRef value) =>
      _kSecClassKey.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecClassIdentity =
      _lookup<coreFoundation.CFStringRef>('kSecClassIdentity');

  coreFoundation.CFStringRef get kSecClassIdentity => _kSecClassIdentity.value;

  set kSecClassIdentity(coreFoundation.CFStringRef value) =>
      _kSecClassIdentity.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccessible =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessible');

  coreFoundation.CFStringRef get kSecAttrAccessible =>
      _kSecAttrAccessible.value;

  set kSecAttrAccessible(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessible.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccess =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccess');

  coreFoundation.CFStringRef get kSecAttrAccess => _kSecAttrAccess.value;

  set kSecAttrAccess(coreFoundation.CFStringRef value) =>
      _kSecAttrAccess.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccessControl =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessControl');

  coreFoundation.CFStringRef get kSecAttrAccessControl =>
      _kSecAttrAccessControl.value;

  set kSecAttrAccessControl(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessControl.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccessGroup =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessGroup');

  coreFoundation.CFStringRef get kSecAttrAccessGroup =>
      _kSecAttrAccessGroup.value;

  set kSecAttrAccessGroup(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessGroup.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSynchronizable =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSynchronizable');

  coreFoundation.CFStringRef get kSecAttrSynchronizable =>
      _kSecAttrSynchronizable.value;

  set kSecAttrSynchronizable(coreFoundation.CFStringRef value) =>
      _kSecAttrSynchronizable.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrSynchronizableAny =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSynchronizableAny');

  coreFoundation.CFStringRef get kSecAttrSynchronizableAny =>
      _kSecAttrSynchronizableAny.value;

  set kSecAttrSynchronizableAny(coreFoundation.CFStringRef value) =>
      _kSecAttrSynchronizableAny.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCreationDate =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCreationDate');

  coreFoundation.CFStringRef get kSecAttrCreationDate =>
      _kSecAttrCreationDate.value;

  set kSecAttrCreationDate(coreFoundation.CFStringRef value) =>
      _kSecAttrCreationDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrModificationDate =
      _lookup<coreFoundation.CFStringRef>('kSecAttrModificationDate');

  coreFoundation.CFStringRef get kSecAttrModificationDate =>
      _kSecAttrModificationDate.value;

  set kSecAttrModificationDate(coreFoundation.CFStringRef value) =>
      _kSecAttrModificationDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrDescription =
      _lookup<coreFoundation.CFStringRef>('kSecAttrDescription');

  coreFoundation.CFStringRef get kSecAttrDescription =>
      _kSecAttrDescription.value;

  set kSecAttrDescription(coreFoundation.CFStringRef value) =>
      _kSecAttrDescription.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrComment =
      _lookup<coreFoundation.CFStringRef>('kSecAttrComment');

  coreFoundation.CFStringRef get kSecAttrComment => _kSecAttrComment.value;

  set kSecAttrComment(coreFoundation.CFStringRef value) =>
      _kSecAttrComment.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCreator =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCreator');

  coreFoundation.CFStringRef get kSecAttrCreator => _kSecAttrCreator.value;

  set kSecAttrCreator(coreFoundation.CFStringRef value) =>
      _kSecAttrCreator.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrType =
      _lookup<coreFoundation.CFStringRef>('kSecAttrType');

  coreFoundation.CFStringRef get kSecAttrType => _kSecAttrType.value;

  set kSecAttrType(coreFoundation.CFStringRef value) =>
      _kSecAttrType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrLabel =
      _lookup<coreFoundation.CFStringRef>('kSecAttrLabel');

  coreFoundation.CFStringRef get kSecAttrLabel => _kSecAttrLabel.value;

  set kSecAttrLabel(coreFoundation.CFStringRef value) =>
      _kSecAttrLabel.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrIsInvisible =
      _lookup<coreFoundation.CFStringRef>('kSecAttrIsInvisible');

  coreFoundation.CFStringRef get kSecAttrIsInvisible =>
      _kSecAttrIsInvisible.value;

  set kSecAttrIsInvisible(coreFoundation.CFStringRef value) =>
      _kSecAttrIsInvisible.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrIsNegative =
      _lookup<coreFoundation.CFStringRef>('kSecAttrIsNegative');

  coreFoundation.CFStringRef get kSecAttrIsNegative =>
      _kSecAttrIsNegative.value;

  set kSecAttrIsNegative(coreFoundation.CFStringRef value) =>
      _kSecAttrIsNegative.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccount =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccount');

  coreFoundation.CFStringRef get kSecAttrAccount => _kSecAttrAccount.value;

  set kSecAttrAccount(coreFoundation.CFStringRef value) =>
      _kSecAttrAccount.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrService =
      _lookup<coreFoundation.CFStringRef>('kSecAttrService');

  coreFoundation.CFStringRef get kSecAttrService => _kSecAttrService.value;

  set kSecAttrService(coreFoundation.CFStringRef value) =>
      _kSecAttrService.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrGeneric =
      _lookup<coreFoundation.CFStringRef>('kSecAttrGeneric');

  coreFoundation.CFStringRef get kSecAttrGeneric => _kSecAttrGeneric.value;

  set kSecAttrGeneric(coreFoundation.CFStringRef value) =>
      _kSecAttrGeneric.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSecurityDomain =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSecurityDomain');

  coreFoundation.CFStringRef get kSecAttrSecurityDomain =>
      _kSecAttrSecurityDomain.value;

  set kSecAttrSecurityDomain(coreFoundation.CFStringRef value) =>
      _kSecAttrSecurityDomain.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrServer =
      _lookup<coreFoundation.CFStringRef>('kSecAttrServer');

  coreFoundation.CFStringRef get kSecAttrServer => _kSecAttrServer.value;

  set kSecAttrServer(coreFoundation.CFStringRef value) =>
      _kSecAttrServer.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocol =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocol');

  coreFoundation.CFStringRef get kSecAttrProtocol => _kSecAttrProtocol.value;

  set kSecAttrProtocol(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocol.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationType =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationType');

  coreFoundation.CFStringRef get kSecAttrAuthenticationType =>
      _kSecAttrAuthenticationType.value;

  set kSecAttrAuthenticationType(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPort =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPort');

  coreFoundation.CFStringRef get kSecAttrPort => _kSecAttrPort.value;

  set kSecAttrPort(coreFoundation.CFStringRef value) =>
      _kSecAttrPort.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPath =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPath');

  coreFoundation.CFStringRef get kSecAttrPath => _kSecAttrPath.value;

  set kSecAttrPath(coreFoundation.CFStringRef value) =>
      _kSecAttrPath.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSubject =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSubject');

  coreFoundation.CFStringRef get kSecAttrSubject => _kSecAttrSubject.value;

  set kSecAttrSubject(coreFoundation.CFStringRef value) =>
      _kSecAttrSubject.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrIssuer =
      _lookup<coreFoundation.CFStringRef>('kSecAttrIssuer');

  coreFoundation.CFStringRef get kSecAttrIssuer => _kSecAttrIssuer.value;

  set kSecAttrIssuer(coreFoundation.CFStringRef value) =>
      _kSecAttrIssuer.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSerialNumber =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSerialNumber');

  coreFoundation.CFStringRef get kSecAttrSerialNumber =>
      _kSecAttrSerialNumber.value;

  set kSecAttrSerialNumber(coreFoundation.CFStringRef value) =>
      _kSecAttrSerialNumber.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSubjectKeyID =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSubjectKeyID');

  coreFoundation.CFStringRef get kSecAttrSubjectKeyID =>
      _kSecAttrSubjectKeyID.value;

  set kSecAttrSubjectKeyID(coreFoundation.CFStringRef value) =>
      _kSecAttrSubjectKeyID.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPublicKeyHash =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPublicKeyHash');

  coreFoundation.CFStringRef get kSecAttrPublicKeyHash =>
      _kSecAttrPublicKeyHash.value;

  set kSecAttrPublicKeyHash(coreFoundation.CFStringRef value) =>
      _kSecAttrPublicKeyHash.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCertificateType =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCertificateType');

  coreFoundation.CFStringRef get kSecAttrCertificateType =>
      _kSecAttrCertificateType.value;

  set kSecAttrCertificateType(coreFoundation.CFStringRef value) =>
      _kSecAttrCertificateType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrCertificateEncoding =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCertificateEncoding');

  coreFoundation.CFStringRef get kSecAttrCertificateEncoding =>
      _kSecAttrCertificateEncoding.value;

  set kSecAttrCertificateEncoding(coreFoundation.CFStringRef value) =>
      _kSecAttrCertificateEncoding.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyClass =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyClass');

  coreFoundation.CFStringRef get kSecAttrKeyClass => _kSecAttrKeyClass.value;

  set kSecAttrKeyClass(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyClass.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrApplicationLabel =
      _lookup<coreFoundation.CFStringRef>('kSecAttrApplicationLabel');

  coreFoundation.CFStringRef get kSecAttrApplicationLabel =>
      _kSecAttrApplicationLabel.value;

  set kSecAttrApplicationLabel(coreFoundation.CFStringRef value) =>
      _kSecAttrApplicationLabel.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrIsPermanent =
      _lookup<coreFoundation.CFStringRef>('kSecAttrIsPermanent');

  coreFoundation.CFStringRef get kSecAttrIsPermanent =>
      _kSecAttrIsPermanent.value;

  set kSecAttrIsPermanent(coreFoundation.CFStringRef value) =>
      _kSecAttrIsPermanent.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrIsSensitive =
      _lookup<coreFoundation.CFStringRef>('kSecAttrIsSensitive');

  coreFoundation.CFStringRef get kSecAttrIsSensitive =>
      _kSecAttrIsSensitive.value;

  set kSecAttrIsSensitive(coreFoundation.CFStringRef value) =>
      _kSecAttrIsSensitive.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrIsExtractable =
      _lookup<coreFoundation.CFStringRef>('kSecAttrIsExtractable');

  coreFoundation.CFStringRef get kSecAttrIsExtractable =>
      _kSecAttrIsExtractable.value;

  set kSecAttrIsExtractable(coreFoundation.CFStringRef value) =>
      _kSecAttrIsExtractable.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrApplicationTag =
      _lookup<coreFoundation.CFStringRef>('kSecAttrApplicationTag');

  coreFoundation.CFStringRef get kSecAttrApplicationTag =>
      _kSecAttrApplicationTag.value;

  set kSecAttrApplicationTag(coreFoundation.CFStringRef value) =>
      _kSecAttrApplicationTag.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyType =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyType');

  coreFoundation.CFStringRef get kSecAttrKeyType => _kSecAttrKeyType.value;

  set kSecAttrKeyType(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPRF =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPRF');

  coreFoundation.CFStringRef get kSecAttrPRF => _kSecAttrPRF.value;

  set kSecAttrPRF(coreFoundation.CFStringRef value) =>
      _kSecAttrPRF.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSalt =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSalt');

  coreFoundation.CFStringRef get kSecAttrSalt => _kSecAttrSalt.value;

  set kSecAttrSalt(coreFoundation.CFStringRef value) =>
      _kSecAttrSalt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrRounds =
      _lookup<coreFoundation.CFStringRef>('kSecAttrRounds');

  coreFoundation.CFStringRef get kSecAttrRounds => _kSecAttrRounds.value;

  set kSecAttrRounds(coreFoundation.CFStringRef value) =>
      _kSecAttrRounds.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeySizeInBits =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeySizeInBits');

  coreFoundation.CFStringRef get kSecAttrKeySizeInBits =>
      _kSecAttrKeySizeInBits.value;

  set kSecAttrKeySizeInBits(coreFoundation.CFStringRef value) =>
      _kSecAttrKeySizeInBits.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrEffectiveKeySize =
      _lookup<coreFoundation.CFStringRef>('kSecAttrEffectiveKeySize');

  coreFoundation.CFStringRef get kSecAttrEffectiveKeySize =>
      _kSecAttrEffectiveKeySize.value;

  set kSecAttrEffectiveKeySize(coreFoundation.CFStringRef value) =>
      _kSecAttrEffectiveKeySize.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanEncrypt =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanEncrypt');

  coreFoundation.CFStringRef get kSecAttrCanEncrypt =>
      _kSecAttrCanEncrypt.value;

  set kSecAttrCanEncrypt(coreFoundation.CFStringRef value) =>
      _kSecAttrCanEncrypt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanDecrypt =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanDecrypt');

  coreFoundation.CFStringRef get kSecAttrCanDecrypt =>
      _kSecAttrCanDecrypt.value;

  set kSecAttrCanDecrypt(coreFoundation.CFStringRef value) =>
      _kSecAttrCanDecrypt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanDerive =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanDerive');

  coreFoundation.CFStringRef get kSecAttrCanDerive => _kSecAttrCanDerive.value;

  set kSecAttrCanDerive(coreFoundation.CFStringRef value) =>
      _kSecAttrCanDerive.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanSign =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanSign');

  coreFoundation.CFStringRef get kSecAttrCanSign => _kSecAttrCanSign.value;

  set kSecAttrCanSign(coreFoundation.CFStringRef value) =>
      _kSecAttrCanSign.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanVerify =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanVerify');

  coreFoundation.CFStringRef get kSecAttrCanVerify => _kSecAttrCanVerify.value;

  set kSecAttrCanVerify(coreFoundation.CFStringRef value) =>
      _kSecAttrCanVerify.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanWrap =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanWrap');

  coreFoundation.CFStringRef get kSecAttrCanWrap => _kSecAttrCanWrap.value;

  set kSecAttrCanWrap(coreFoundation.CFStringRef value) =>
      _kSecAttrCanWrap.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrCanUnwrap =
      _lookup<coreFoundation.CFStringRef>('kSecAttrCanUnwrap');

  coreFoundation.CFStringRef get kSecAttrCanUnwrap => _kSecAttrCanUnwrap.value;

  set kSecAttrCanUnwrap(coreFoundation.CFStringRef value) =>
      _kSecAttrCanUnwrap.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrSyncViewHint =
      _lookup<coreFoundation.CFStringRef>('kSecAttrSyncViewHint');

  coreFoundation.CFStringRef get kSecAttrSyncViewHint =>
      _kSecAttrSyncViewHint.value;

  set kSecAttrSyncViewHint(coreFoundation.CFStringRef value) =>
      _kSecAttrSyncViewHint.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrTokenID =
      _lookup<coreFoundation.CFStringRef>('kSecAttrTokenID');

  coreFoundation.CFStringRef get kSecAttrTokenID => _kSecAttrTokenID.value;

  set kSecAttrTokenID(coreFoundation.CFStringRef value) =>
      _kSecAttrTokenID.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrPersistantReference =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPersistantReference');

  coreFoundation.CFStringRef get kSecAttrPersistantReference =>
      _kSecAttrPersistantReference.value;

  set kSecAttrPersistantReference(coreFoundation.CFStringRef value) =>
      _kSecAttrPersistantReference.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrPersistentReference =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPersistentReference');

  coreFoundation.CFStringRef get kSecAttrPersistentReference =>
      _kSecAttrPersistentReference.value;

  set kSecAttrPersistentReference(coreFoundation.CFStringRef value) =>
      _kSecAttrPersistentReference.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAccessibleWhenUnlocked =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessibleWhenUnlocked');

  coreFoundation.CFStringRef get kSecAttrAccessibleWhenUnlocked =>
      _kSecAttrAccessibleWhenUnlocked.value;

  set kSecAttrAccessibleWhenUnlocked(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleWhenUnlocked.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAccessibleAfterFirstUnlock =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessibleAfterFirstUnlock');

  coreFoundation.CFStringRef get kSecAttrAccessibleAfterFirstUnlock =>
      _kSecAttrAccessibleAfterFirstUnlock.value;

  set kSecAttrAccessibleAfterFirstUnlock(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleAfterFirstUnlock.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccessibleAlways =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessibleAlways');

  coreFoundation.CFStringRef get kSecAttrAccessibleAlways =>
      _kSecAttrAccessibleAlways.value;

  set kSecAttrAccessibleAlways(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleAlways.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly =
      _lookup<coreFoundation.CFStringRef>(
          'kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly');

  coreFoundation.CFStringRef
      get kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly =>
          _kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly.value;

  set kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly(
          coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAccessibleWhenUnlockedThisDeviceOnly =
      _lookup<coreFoundation.CFStringRef>(
          'kSecAttrAccessibleWhenUnlockedThisDeviceOnly');

  coreFoundation.CFStringRef get kSecAttrAccessibleWhenUnlockedThisDeviceOnly =>
      _kSecAttrAccessibleWhenUnlockedThisDeviceOnly.value;

  set kSecAttrAccessibleWhenUnlockedThisDeviceOnly(
          coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleWhenUnlockedThisDeviceOnly.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly =
      _lookup<coreFoundation.CFStringRef>(
          'kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly');

  coreFoundation.CFStringRef
      get kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly =>
          _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly.value;

  set kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly(
          coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAccessibleAlwaysThisDeviceOnly =
      _lookup<coreFoundation.CFStringRef>(
          'kSecAttrAccessibleAlwaysThisDeviceOnly');

  coreFoundation.CFStringRef get kSecAttrAccessibleAlwaysThisDeviceOnly =>
      _kSecAttrAccessibleAlwaysThisDeviceOnly.value;

  set kSecAttrAccessibleAlwaysThisDeviceOnly(
          coreFoundation.CFStringRef value) =>
      _kSecAttrAccessibleAlwaysThisDeviceOnly.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolFTP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolFTP');

  coreFoundation.CFStringRef get kSecAttrProtocolFTP =>
      _kSecAttrProtocolFTP.value;

  set kSecAttrProtocolFTP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolFTP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrProtocolFTPAccount =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolFTPAccount');

  coreFoundation.CFStringRef get kSecAttrProtocolFTPAccount =>
      _kSecAttrProtocolFTPAccount.value;

  set kSecAttrProtocolFTPAccount(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolFTPAccount.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolHTTP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolHTTP');

  coreFoundation.CFStringRef get kSecAttrProtocolHTTP =>
      _kSecAttrProtocolHTTP.value;

  set kSecAttrProtocolHTTP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolHTTP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolIRC =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolIRC');

  coreFoundation.CFStringRef get kSecAttrProtocolIRC =>
      _kSecAttrProtocolIRC.value;

  set kSecAttrProtocolIRC(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolIRC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolNNTP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolNNTP');

  coreFoundation.CFStringRef get kSecAttrProtocolNNTP =>
      _kSecAttrProtocolNNTP.value;

  set kSecAttrProtocolNNTP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolNNTP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolPOP3 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolPOP3');

  coreFoundation.CFStringRef get kSecAttrProtocolPOP3 =>
      _kSecAttrProtocolPOP3.value;

  set kSecAttrProtocolPOP3(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolPOP3.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolSMTP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolSMTP');

  coreFoundation.CFStringRef get kSecAttrProtocolSMTP =>
      _kSecAttrProtocolSMTP.value;

  set kSecAttrProtocolSMTP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolSMTP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolSOCKS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolSOCKS');

  coreFoundation.CFStringRef get kSecAttrProtocolSOCKS =>
      _kSecAttrProtocolSOCKS.value;

  set kSecAttrProtocolSOCKS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolSOCKS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolIMAP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolIMAP');

  coreFoundation.CFStringRef get kSecAttrProtocolIMAP =>
      _kSecAttrProtocolIMAP.value;

  set kSecAttrProtocolIMAP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolIMAP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolLDAP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolLDAP');

  coreFoundation.CFStringRef get kSecAttrProtocolLDAP =>
      _kSecAttrProtocolLDAP.value;

  set kSecAttrProtocolLDAP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolLDAP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrProtocolAppleTalk =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolAppleTalk');

  coreFoundation.CFStringRef get kSecAttrProtocolAppleTalk =>
      _kSecAttrProtocolAppleTalk.value;

  set kSecAttrProtocolAppleTalk(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolAppleTalk.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolAFP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolAFP');

  coreFoundation.CFStringRef get kSecAttrProtocolAFP =>
      _kSecAttrProtocolAFP.value;

  set kSecAttrProtocolAFP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolAFP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolTelnet =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolTelnet');

  coreFoundation.CFStringRef get kSecAttrProtocolTelnet =>
      _kSecAttrProtocolTelnet.value;

  set kSecAttrProtocolTelnet(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolTelnet.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolSSH =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolSSH');

  coreFoundation.CFStringRef get kSecAttrProtocolSSH =>
      _kSecAttrProtocolSSH.value;

  set kSecAttrProtocolSSH(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolSSH.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolFTPS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolFTPS');

  coreFoundation.CFStringRef get kSecAttrProtocolFTPS =>
      _kSecAttrProtocolFTPS.value;

  set kSecAttrProtocolFTPS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolFTPS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolHTTPS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolHTTPS');

  coreFoundation.CFStringRef get kSecAttrProtocolHTTPS =>
      _kSecAttrProtocolHTTPS.value;

  set kSecAttrProtocolHTTPS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolHTTPS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrProtocolHTTPProxy =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolHTTPProxy');

  coreFoundation.CFStringRef get kSecAttrProtocolHTTPProxy =>
      _kSecAttrProtocolHTTPProxy.value;

  set kSecAttrProtocolHTTPProxy(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolHTTPProxy.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrProtocolHTTPSProxy =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolHTTPSProxy');

  coreFoundation.CFStringRef get kSecAttrProtocolHTTPSProxy =>
      _kSecAttrProtocolHTTPSProxy.value;

  set kSecAttrProtocolHTTPSProxy(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolHTTPSProxy.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolFTPProxy =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolFTPProxy');

  coreFoundation.CFStringRef get kSecAttrProtocolFTPProxy =>
      _kSecAttrProtocolFTPProxy.value;

  set kSecAttrProtocolFTPProxy(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolFTPProxy.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolSMB =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolSMB');

  coreFoundation.CFStringRef get kSecAttrProtocolSMB =>
      _kSecAttrProtocolSMB.value;

  set kSecAttrProtocolSMB(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolSMB.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolRTSP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolRTSP');

  coreFoundation.CFStringRef get kSecAttrProtocolRTSP =>
      _kSecAttrProtocolRTSP.value;

  set kSecAttrProtocolRTSP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolRTSP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrProtocolRTSPProxy =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolRTSPProxy');

  coreFoundation.CFStringRef get kSecAttrProtocolRTSPProxy =>
      _kSecAttrProtocolRTSPProxy.value;

  set kSecAttrProtocolRTSPProxy(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolRTSPProxy.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolDAAP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolDAAP');

  coreFoundation.CFStringRef get kSecAttrProtocolDAAP =>
      _kSecAttrProtocolDAAP.value;

  set kSecAttrProtocolDAAP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolDAAP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolEPPC =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolEPPC');

  coreFoundation.CFStringRef get kSecAttrProtocolEPPC =>
      _kSecAttrProtocolEPPC.value;

  set kSecAttrProtocolEPPC(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolEPPC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolIPP =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolIPP');

  coreFoundation.CFStringRef get kSecAttrProtocolIPP =>
      _kSecAttrProtocolIPP.value;

  set kSecAttrProtocolIPP(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolIPP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolNNTPS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolNNTPS');

  coreFoundation.CFStringRef get kSecAttrProtocolNNTPS =>
      _kSecAttrProtocolNNTPS.value;

  set kSecAttrProtocolNNTPS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolNNTPS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolLDAPS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolLDAPS');

  coreFoundation.CFStringRef get kSecAttrProtocolLDAPS =>
      _kSecAttrProtocolLDAPS.value;

  set kSecAttrProtocolLDAPS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolLDAPS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolTelnetS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolTelnetS');

  coreFoundation.CFStringRef get kSecAttrProtocolTelnetS =>
      _kSecAttrProtocolTelnetS.value;

  set kSecAttrProtocolTelnetS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolTelnetS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolIMAPS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolIMAPS');

  coreFoundation.CFStringRef get kSecAttrProtocolIMAPS =>
      _kSecAttrProtocolIMAPS.value;

  set kSecAttrProtocolIMAPS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolIMAPS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolIRCS =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolIRCS');

  coreFoundation.CFStringRef get kSecAttrProtocolIRCS =>
      _kSecAttrProtocolIRCS.value;

  set kSecAttrProtocolIRCS(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolIRCS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrProtocolPOP3S =
      _lookup<coreFoundation.CFStringRef>('kSecAttrProtocolPOP3S');

  coreFoundation.CFStringRef get kSecAttrProtocolPOP3S =>
      _kSecAttrProtocolPOP3S.value;

  set kSecAttrProtocolPOP3S(coreFoundation.CFStringRef value) =>
      _kSecAttrProtocolPOP3S.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeNTLM =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationTypeNTLM');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeNTLM =>
      _kSecAttrAuthenticationTypeNTLM.value;

  set kSecAttrAuthenticationTypeNTLM(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeNTLM.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeMSN =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationTypeMSN');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeMSN =>
      _kSecAttrAuthenticationTypeMSN.value;

  set kSecAttrAuthenticationTypeMSN(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeMSN.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeDPA =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationTypeDPA');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeDPA =>
      _kSecAttrAuthenticationTypeDPA.value;

  set kSecAttrAuthenticationTypeDPA(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeDPA.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeRPA =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationTypeRPA');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeRPA =>
      _kSecAttrAuthenticationTypeRPA.value;

  set kSecAttrAuthenticationTypeRPA(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeRPA.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeHTTPBasic =
      _lookup<coreFoundation.CFStringRef>(
          'kSecAttrAuthenticationTypeHTTPBasic');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeHTTPBasic =>
      _kSecAttrAuthenticationTypeHTTPBasic.value;

  set kSecAttrAuthenticationTypeHTTPBasic(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeHTTPBasic.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeHTTPDigest =
      _lookup<coreFoundation.CFStringRef>(
          'kSecAttrAuthenticationTypeHTTPDigest');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeHTTPDigest =>
      _kSecAttrAuthenticationTypeHTTPDigest.value;

  set kSecAttrAuthenticationTypeHTTPDigest(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeHTTPDigest.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeHTMLForm =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationTypeHTMLForm');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeHTMLForm =>
      _kSecAttrAuthenticationTypeHTMLForm.value;

  set kSecAttrAuthenticationTypeHTMLForm(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeHTMLForm.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrAuthenticationTypeDefault =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAuthenticationTypeDefault');

  coreFoundation.CFStringRef get kSecAttrAuthenticationTypeDefault =>
      _kSecAttrAuthenticationTypeDefault.value;

  set kSecAttrAuthenticationTypeDefault(coreFoundation.CFStringRef value) =>
      _kSecAttrAuthenticationTypeDefault.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyClassPublic =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyClassPublic');

  coreFoundation.CFStringRef get kSecAttrKeyClassPublic =>
      _kSecAttrKeyClassPublic.value;

  set kSecAttrKeyClassPublic(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyClassPublic.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyClassPrivate =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyClassPrivate');

  coreFoundation.CFStringRef get kSecAttrKeyClassPrivate =>
      _kSecAttrKeyClassPrivate.value;

  set kSecAttrKeyClassPrivate(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyClassPrivate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrKeyClassSymmetric =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyClassSymmetric');

  coreFoundation.CFStringRef get kSecAttrKeyClassSymmetric =>
      _kSecAttrKeyClassSymmetric.value;

  set kSecAttrKeyClassSymmetric(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyClassSymmetric.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeRSA =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeRSA');

  coreFoundation.CFStringRef get kSecAttrKeyTypeRSA =>
      _kSecAttrKeyTypeRSA.value;

  set kSecAttrKeyTypeRSA(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeRSA.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeDSA =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeDSA');

  coreFoundation.CFStringRef get kSecAttrKeyTypeDSA =>
      _kSecAttrKeyTypeDSA.value;

  set kSecAttrKeyTypeDSA(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeDSA.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeAES =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeAES');

  coreFoundation.CFStringRef get kSecAttrKeyTypeAES =>
      _kSecAttrKeyTypeAES.value;

  set kSecAttrKeyTypeAES(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeAES.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeDES =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeDES');

  coreFoundation.CFStringRef get kSecAttrKeyTypeDES =>
      _kSecAttrKeyTypeDES.value;

  set kSecAttrKeyTypeDES(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeDES.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyType3DES =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyType3DES');

  coreFoundation.CFStringRef get kSecAttrKeyType3DES =>
      _kSecAttrKeyType3DES.value;

  set kSecAttrKeyType3DES(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyType3DES.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeRC4 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeRC4');

  coreFoundation.CFStringRef get kSecAttrKeyTypeRC4 =>
      _kSecAttrKeyTypeRC4.value;

  set kSecAttrKeyTypeRC4(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeRC4.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeRC2 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeRC2');

  coreFoundation.CFStringRef get kSecAttrKeyTypeRC2 =>
      _kSecAttrKeyTypeRC2.value;

  set kSecAttrKeyTypeRC2(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeRC2.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeCAST =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeCAST');

  coreFoundation.CFStringRef get kSecAttrKeyTypeCAST =>
      _kSecAttrKeyTypeCAST.value;

  set kSecAttrKeyTypeCAST(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeCAST.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeECDSA =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeECDSA');

  coreFoundation.CFStringRef get kSecAttrKeyTypeECDSA =>
      _kSecAttrKeyTypeECDSA.value;

  set kSecAttrKeyTypeECDSA(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeECDSA.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrKeyTypeEC =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeEC');

  coreFoundation.CFStringRef get kSecAttrKeyTypeEC => _kSecAttrKeyTypeEC.value;

  set kSecAttrKeyTypeEC(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeEC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrKeyTypeECSECPrimeRandom =
      _lookup<coreFoundation.CFStringRef>('kSecAttrKeyTypeECSECPrimeRandom');

  coreFoundation.CFStringRef get kSecAttrKeyTypeECSECPrimeRandom =>
      _kSecAttrKeyTypeECSECPrimeRandom.value;

  set kSecAttrKeyTypeECSECPrimeRandom(coreFoundation.CFStringRef value) =>
      _kSecAttrKeyTypeECSECPrimeRandom.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPRFHmacAlgSHA1 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPRFHmacAlgSHA1');

  coreFoundation.CFStringRef get kSecAttrPRFHmacAlgSHA1 =>
      _kSecAttrPRFHmacAlgSHA1.value;

  set kSecAttrPRFHmacAlgSHA1(coreFoundation.CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA1.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPRFHmacAlgSHA224 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPRFHmacAlgSHA224');

  coreFoundation.CFStringRef get kSecAttrPRFHmacAlgSHA224 =>
      _kSecAttrPRFHmacAlgSHA224.value;

  set kSecAttrPRFHmacAlgSHA224(coreFoundation.CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA224.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPRFHmacAlgSHA256 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPRFHmacAlgSHA256');

  coreFoundation.CFStringRef get kSecAttrPRFHmacAlgSHA256 =>
      _kSecAttrPRFHmacAlgSHA256.value;

  set kSecAttrPRFHmacAlgSHA256(coreFoundation.CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA256.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPRFHmacAlgSHA384 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPRFHmacAlgSHA384');

  coreFoundation.CFStringRef get kSecAttrPRFHmacAlgSHA384 =>
      _kSecAttrPRFHmacAlgSHA384.value;

  set kSecAttrPRFHmacAlgSHA384(coreFoundation.CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA384.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrPRFHmacAlgSHA512 =
      _lookup<coreFoundation.CFStringRef>('kSecAttrPRFHmacAlgSHA512');

  coreFoundation.CFStringRef get kSecAttrPRFHmacAlgSHA512 =>
      _kSecAttrPRFHmacAlgSHA512.value;

  set kSecAttrPRFHmacAlgSHA512(coreFoundation.CFStringRef value) =>
      _kSecAttrPRFHmacAlgSHA512.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchPolicy =
      _lookup<coreFoundation.CFStringRef>('kSecMatchPolicy');

  coreFoundation.CFStringRef get kSecMatchPolicy => _kSecMatchPolicy.value;

  set kSecMatchPolicy(coreFoundation.CFStringRef value) =>
      _kSecMatchPolicy.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchItemList =
      _lookup<coreFoundation.CFStringRef>('kSecMatchItemList');

  coreFoundation.CFStringRef get kSecMatchItemList => _kSecMatchItemList.value;

  set kSecMatchItemList(coreFoundation.CFStringRef value) =>
      _kSecMatchItemList.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchSearchList =
      _lookup<coreFoundation.CFStringRef>('kSecMatchSearchList');

  coreFoundation.CFStringRef get kSecMatchSearchList =>
      _kSecMatchSearchList.value;

  set kSecMatchSearchList(coreFoundation.CFStringRef value) =>
      _kSecMatchSearchList.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchIssuers =
      _lookup<coreFoundation.CFStringRef>('kSecMatchIssuers');

  coreFoundation.CFStringRef get kSecMatchIssuers => _kSecMatchIssuers.value;

  set kSecMatchIssuers(coreFoundation.CFStringRef value) =>
      _kSecMatchIssuers.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecMatchEmailAddressIfPresent =
      _lookup<coreFoundation.CFStringRef>('kSecMatchEmailAddressIfPresent');

  coreFoundation.CFStringRef get kSecMatchEmailAddressIfPresent =>
      _kSecMatchEmailAddressIfPresent.value;

  set kSecMatchEmailAddressIfPresent(coreFoundation.CFStringRef value) =>
      _kSecMatchEmailAddressIfPresent.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchSubjectContains =
      _lookup<coreFoundation.CFStringRef>('kSecMatchSubjectContains');

  coreFoundation.CFStringRef get kSecMatchSubjectContains =>
      _kSecMatchSubjectContains.value;

  set kSecMatchSubjectContains(coreFoundation.CFStringRef value) =>
      _kSecMatchSubjectContains.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecMatchSubjectStartsWith =
      _lookup<coreFoundation.CFStringRef>('kSecMatchSubjectStartsWith');

  coreFoundation.CFStringRef get kSecMatchSubjectStartsWith =>
      _kSecMatchSubjectStartsWith.value;

  set kSecMatchSubjectStartsWith(coreFoundation.CFStringRef value) =>
      _kSecMatchSubjectStartsWith.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchSubjectEndsWith =
      _lookup<coreFoundation.CFStringRef>('kSecMatchSubjectEndsWith');

  coreFoundation.CFStringRef get kSecMatchSubjectEndsWith =>
      _kSecMatchSubjectEndsWith.value;

  set kSecMatchSubjectEndsWith(coreFoundation.CFStringRef value) =>
      _kSecMatchSubjectEndsWith.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecMatchSubjectWholeString =
      _lookup<coreFoundation.CFStringRef>('kSecMatchSubjectWholeString');

  coreFoundation.CFStringRef get kSecMatchSubjectWholeString =>
      _kSecMatchSubjectWholeString.value;

  set kSecMatchSubjectWholeString(coreFoundation.CFStringRef value) =>
      _kSecMatchSubjectWholeString.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchCaseInsensitive =
      _lookup<coreFoundation.CFStringRef>('kSecMatchCaseInsensitive');

  coreFoundation.CFStringRef get kSecMatchCaseInsensitive =>
      _kSecMatchCaseInsensitive.value;

  set kSecMatchCaseInsensitive(coreFoundation.CFStringRef value) =>
      _kSecMatchCaseInsensitive.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecMatchDiacriticInsensitive =
      _lookup<coreFoundation.CFStringRef>('kSecMatchDiacriticInsensitive');

  coreFoundation.CFStringRef get kSecMatchDiacriticInsensitive =>
      _kSecMatchDiacriticInsensitive.value;

  set kSecMatchDiacriticInsensitive(coreFoundation.CFStringRef value) =>
      _kSecMatchDiacriticInsensitive.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecMatchWidthInsensitive =
      _lookup<coreFoundation.CFStringRef>('kSecMatchWidthInsensitive');

  coreFoundation.CFStringRef get kSecMatchWidthInsensitive =>
      _kSecMatchWidthInsensitive.value;

  set kSecMatchWidthInsensitive(coreFoundation.CFStringRef value) =>
      _kSecMatchWidthInsensitive.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchTrustedOnly =
      _lookup<coreFoundation.CFStringRef>('kSecMatchTrustedOnly');

  coreFoundation.CFStringRef get kSecMatchTrustedOnly =>
      _kSecMatchTrustedOnly.value;

  set kSecMatchTrustedOnly(coreFoundation.CFStringRef value) =>
      _kSecMatchTrustedOnly.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchValidOnDate =
      _lookup<coreFoundation.CFStringRef>('kSecMatchValidOnDate');

  coreFoundation.CFStringRef get kSecMatchValidOnDate =>
      _kSecMatchValidOnDate.value;

  set kSecMatchValidOnDate(coreFoundation.CFStringRef value) =>
      _kSecMatchValidOnDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchLimit =
      _lookup<coreFoundation.CFStringRef>('kSecMatchLimit');

  coreFoundation.CFStringRef get kSecMatchLimit => _kSecMatchLimit.value;

  set kSecMatchLimit(coreFoundation.CFStringRef value) =>
      _kSecMatchLimit.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchLimitOne =
      _lookup<coreFoundation.CFStringRef>('kSecMatchLimitOne');

  coreFoundation.CFStringRef get kSecMatchLimitOne => _kSecMatchLimitOne.value;

  set kSecMatchLimitOne(coreFoundation.CFStringRef value) =>
      _kSecMatchLimitOne.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecMatchLimitAll =
      _lookup<coreFoundation.CFStringRef>('kSecMatchLimitAll');

  coreFoundation.CFStringRef get kSecMatchLimitAll => _kSecMatchLimitAll.value;

  set kSecMatchLimitAll(coreFoundation.CFStringRef value) =>
      _kSecMatchLimitAll.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecReturnData =
      _lookup<coreFoundation.CFStringRef>('kSecReturnData');

  coreFoundation.CFStringRef get kSecReturnData => _kSecReturnData.value;

  set kSecReturnData(coreFoundation.CFStringRef value) =>
      _kSecReturnData.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecReturnAttributes =
      _lookup<coreFoundation.CFStringRef>('kSecReturnAttributes');

  coreFoundation.CFStringRef get kSecReturnAttributes =>
      _kSecReturnAttributes.value;

  set kSecReturnAttributes(coreFoundation.CFStringRef value) =>
      _kSecReturnAttributes.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecReturnRef =
      _lookup<coreFoundation.CFStringRef>('kSecReturnRef');

  coreFoundation.CFStringRef get kSecReturnRef => _kSecReturnRef.value;

  set kSecReturnRef(coreFoundation.CFStringRef value) =>
      _kSecReturnRef.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecReturnPersistentRef =
      _lookup<coreFoundation.CFStringRef>('kSecReturnPersistentRef');

  coreFoundation.CFStringRef get kSecReturnPersistentRef =>
      _kSecReturnPersistentRef.value;

  set kSecReturnPersistentRef(coreFoundation.CFStringRef value) =>
      _kSecReturnPersistentRef.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecValueData =
      _lookup<coreFoundation.CFStringRef>('kSecValueData');

  coreFoundation.CFStringRef get kSecValueData => _kSecValueData.value;

  set kSecValueData(coreFoundation.CFStringRef value) =>
      _kSecValueData.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecValueRef =
      _lookup<coreFoundation.CFStringRef>('kSecValueRef');

  coreFoundation.CFStringRef get kSecValueRef => _kSecValueRef.value;

  set kSecValueRef(coreFoundation.CFStringRef value) =>
      _kSecValueRef.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecValuePersistentRef =
      _lookup<coreFoundation.CFStringRef>('kSecValuePersistentRef');

  coreFoundation.CFStringRef get kSecValuePersistentRef =>
      _kSecValuePersistentRef.value;

  set kSecValuePersistentRef(coreFoundation.CFStringRef value) =>
      _kSecValuePersistentRef.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecUseItemList =
      _lookup<coreFoundation.CFStringRef>('kSecUseItemList');

  coreFoundation.CFStringRef get kSecUseItemList => _kSecUseItemList.value;

  set kSecUseItemList(coreFoundation.CFStringRef value) =>
      _kSecUseItemList.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecUseKeychain =
      _lookup<coreFoundation.CFStringRef>('kSecUseKeychain');

  coreFoundation.CFStringRef get kSecUseKeychain => _kSecUseKeychain.value;

  set kSecUseKeychain(coreFoundation.CFStringRef value) =>
      _kSecUseKeychain.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecUseOperationPrompt =
      _lookup<coreFoundation.CFStringRef>('kSecUseOperationPrompt');

  coreFoundation.CFStringRef get kSecUseOperationPrompt =>
      _kSecUseOperationPrompt.value;

  set kSecUseOperationPrompt(coreFoundation.CFStringRef value) =>
      _kSecUseOperationPrompt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecUseNoAuthenticationUI =
      _lookup<coreFoundation.CFStringRef>('kSecUseNoAuthenticationUI');

  coreFoundation.CFStringRef get kSecUseNoAuthenticationUI =>
      _kSecUseNoAuthenticationUI.value;

  set kSecUseNoAuthenticationUI(coreFoundation.CFStringRef value) =>
      _kSecUseNoAuthenticationUI.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecUseAuthenticationUI =
      _lookup<coreFoundation.CFStringRef>('kSecUseAuthenticationUI');

  coreFoundation.CFStringRef get kSecUseAuthenticationUI =>
      _kSecUseAuthenticationUI.value;

  set kSecUseAuthenticationUI(coreFoundation.CFStringRef value) =>
      _kSecUseAuthenticationUI.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecUseAuthenticationContext =
      _lookup<coreFoundation.CFStringRef>('kSecUseAuthenticationContext');

  coreFoundation.CFStringRef get kSecUseAuthenticationContext =>
      _kSecUseAuthenticationContext.value;

  set kSecUseAuthenticationContext(coreFoundation.CFStringRef value) =>
      _kSecUseAuthenticationContext.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecUseDataProtectionKeychain =
      _lookup<coreFoundation.CFStringRef>('kSecUseDataProtectionKeychain');

  coreFoundation.CFStringRef get kSecUseDataProtectionKeychain =>
      _kSecUseDataProtectionKeychain.value;

  set kSecUseDataProtectionKeychain(coreFoundation.CFStringRef value) =>
      _kSecUseDataProtectionKeychain.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecUseAuthenticationUIAllow =
      _lookup<coreFoundation.CFStringRef>('kSecUseAuthenticationUIAllow');

  coreFoundation.CFStringRef get kSecUseAuthenticationUIAllow =>
      _kSecUseAuthenticationUIAllow.value;

  set kSecUseAuthenticationUIAllow(coreFoundation.CFStringRef value) =>
      _kSecUseAuthenticationUIAllow.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecUseAuthenticationUIFail =
      _lookup<coreFoundation.CFStringRef>('kSecUseAuthenticationUIFail');

  coreFoundation.CFStringRef get kSecUseAuthenticationUIFail =>
      _kSecUseAuthenticationUIFail.value;

  set kSecUseAuthenticationUIFail(coreFoundation.CFStringRef value) =>
      _kSecUseAuthenticationUIFail.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecUseAuthenticationUISkip =
      _lookup<coreFoundation.CFStringRef>('kSecUseAuthenticationUISkip');

  coreFoundation.CFStringRef get kSecUseAuthenticationUISkip =>
      _kSecUseAuthenticationUISkip.value;

  set kSecUseAuthenticationUISkip(coreFoundation.CFStringRef value) =>
      _kSecUseAuthenticationUISkip.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecAttrTokenIDSecureEnclave =
      _lookup<coreFoundation.CFStringRef>('kSecAttrTokenIDSecureEnclave');

  coreFoundation.CFStringRef get kSecAttrTokenIDSecureEnclave =>
      _kSecAttrTokenIDSecureEnclave.value;

  set kSecAttrTokenIDSecureEnclave(coreFoundation.CFStringRef value) =>
      _kSecAttrTokenIDSecureEnclave.value = value;

  /// which contains items provided by external token (typically smart card). This
  /// may be used as a value for kSecAttrAccessGroup attribute. Every application
  /// has access to this access group so it is not needed to explicitly list it in
  /// keychain-access-groups entitlement, but application must explicitly state
  /// this access group in keychain queries in order to be able to access items
  /// from external tokens.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecAttrAccessGroupToken =
      _lookup<coreFoundation.CFStringRef>('kSecAttrAccessGroupToken');

  coreFoundation.CFStringRef get kSecAttrAccessGroupToken =>
      _kSecAttrAccessGroupToken.value;

  set kSecAttrAccessGroupToken(coreFoundation.CFStringRef value) =>
      _kSecAttrAccessGroupToken.value = value;

  /// Returns one or more items which match a search query.
  int SecItemCopyMatching(
    coreFoundation.CFDictionaryRef query,
    ffi.Pointer<coreFoundation.CFTypeRef> result,
  ) {
    return _SecItemCopyMatching(
      query,
      result,
    );
  }

  late final _SecItemCopyMatchingPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFTypeRef>)>>('SecItemCopyMatching');
  late final _SecItemCopyMatching = _SecItemCopyMatchingPtr.asFunction<
      int Function(coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFTypeRef>)>();

  /// Add one or more items to a keychain.
  int SecItemAdd(
    coreFoundation.CFDictionaryRef attributes,
    ffi.Pointer<coreFoundation.CFTypeRef> result,
  ) {
    return _SecItemAdd(
      attributes,
      result,
    );
  }

  late final _SecItemAddPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFTypeRef>)>>('SecItemAdd');
  late final _SecItemAdd = _SecItemAddPtr.asFunction<
      int Function(coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFTypeRef>)>();

  /// Modify zero or more items which match a search query.
  int SecItemUpdate(
    coreFoundation.CFDictionaryRef query,
    coreFoundation.CFDictionaryRef attributesToUpdate,
  ) {
    return _SecItemUpdate(
      query,
      attributesToUpdate,
    );
  }

  late final _SecItemUpdatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFDictionaryRef,
              coreFoundation.CFDictionaryRef)>>('SecItemUpdate');
  late final _SecItemUpdate = _SecItemUpdatePtr.asFunction<
      int Function(
          coreFoundation.CFDictionaryRef, coreFoundation.CFDictionaryRef)>();

  /// Delete zero or more items which match a search query.
  int SecItemDelete(
    coreFoundation.CFDictionaryRef query,
  ) {
    return _SecItemDelete(
      query,
    );
  }

  late final _SecItemDeletePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFDictionaryRef)>>('SecItemDelete');
  late final _SecItemDelete = _SecItemDeletePtr.asFunction<
      int Function(coreFoundation.CFDictionaryRef)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecACLAuthorizationAny =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationAny');

  coreFoundation.CFStringRef get kSecACLAuthorizationAny =>
      _kSecACLAuthorizationAny.value;

  set kSecACLAuthorizationAny(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationAny.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationLogin =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationLogin');

  coreFoundation.CFStringRef get kSecACLAuthorizationLogin =>
      _kSecACLAuthorizationLogin.value;

  set kSecACLAuthorizationLogin(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationLogin.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationGenKey =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationGenKey');

  coreFoundation.CFStringRef get kSecACLAuthorizationGenKey =>
      _kSecACLAuthorizationGenKey.value;

  set kSecACLAuthorizationGenKey(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationGenKey.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationDelete =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationDelete');

  coreFoundation.CFStringRef get kSecACLAuthorizationDelete =>
      _kSecACLAuthorizationDelete.value;

  set kSecACLAuthorizationDelete(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationDelete.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationExportWrapped =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationExportWrapped');

  coreFoundation.CFStringRef get kSecACLAuthorizationExportWrapped =>
      _kSecACLAuthorizationExportWrapped.value;

  set kSecACLAuthorizationExportWrapped(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationExportWrapped.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationExportClear =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationExportClear');

  coreFoundation.CFStringRef get kSecACLAuthorizationExportClear =>
      _kSecACLAuthorizationExportClear.value;

  set kSecACLAuthorizationExportClear(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationExportClear.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationImportWrapped =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationImportWrapped');

  coreFoundation.CFStringRef get kSecACLAuthorizationImportWrapped =>
      _kSecACLAuthorizationImportWrapped.value;

  set kSecACLAuthorizationImportWrapped(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationImportWrapped.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationImportClear =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationImportClear');

  coreFoundation.CFStringRef get kSecACLAuthorizationImportClear =>
      _kSecACLAuthorizationImportClear.value;

  set kSecACLAuthorizationImportClear(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationImportClear.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecACLAuthorizationSign =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationSign');

  coreFoundation.CFStringRef get kSecACLAuthorizationSign =>
      _kSecACLAuthorizationSign.value;

  set kSecACLAuthorizationSign(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationSign.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationEncrypt =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationEncrypt');

  coreFoundation.CFStringRef get kSecACLAuthorizationEncrypt =>
      _kSecACLAuthorizationEncrypt.value;

  set kSecACLAuthorizationEncrypt(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationEncrypt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationDecrypt =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationDecrypt');

  coreFoundation.CFStringRef get kSecACLAuthorizationDecrypt =>
      _kSecACLAuthorizationDecrypt.value;

  set kSecACLAuthorizationDecrypt(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationDecrypt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecACLAuthorizationMAC =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationMAC');

  coreFoundation.CFStringRef get kSecACLAuthorizationMAC =>
      _kSecACLAuthorizationMAC.value;

  set kSecACLAuthorizationMAC(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationMAC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationDerive =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationDerive');

  coreFoundation.CFStringRef get kSecACLAuthorizationDerive =>
      _kSecACLAuthorizationDerive.value;

  set kSecACLAuthorizationDerive(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationDerive.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationKeychainCreate =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationKeychainCreate');

  coreFoundation.CFStringRef get kSecACLAuthorizationKeychainCreate =>
      _kSecACLAuthorizationKeychainCreate.value;

  set kSecACLAuthorizationKeychainCreate(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationKeychainCreate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationKeychainDelete =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationKeychainDelete');

  coreFoundation.CFStringRef get kSecACLAuthorizationKeychainDelete =>
      _kSecACLAuthorizationKeychainDelete.value;

  set kSecACLAuthorizationKeychainDelete(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationKeychainDelete.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationKeychainItemRead =
      _lookup<coreFoundation.CFStringRef>(
          'kSecACLAuthorizationKeychainItemRead');

  coreFoundation.CFStringRef get kSecACLAuthorizationKeychainItemRead =>
      _kSecACLAuthorizationKeychainItemRead.value;

  set kSecACLAuthorizationKeychainItemRead(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemRead.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationKeychainItemInsert =
      _lookup<coreFoundation.CFStringRef>(
          'kSecACLAuthorizationKeychainItemInsert');

  coreFoundation.CFStringRef get kSecACLAuthorizationKeychainItemInsert =>
      _kSecACLAuthorizationKeychainItemInsert.value;

  set kSecACLAuthorizationKeychainItemInsert(
          coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemInsert.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationKeychainItemModify =
      _lookup<coreFoundation.CFStringRef>(
          'kSecACLAuthorizationKeychainItemModify');

  coreFoundation.CFStringRef get kSecACLAuthorizationKeychainItemModify =>
      _kSecACLAuthorizationKeychainItemModify.value;

  set kSecACLAuthorizationKeychainItemModify(
          coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemModify.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationKeychainItemDelete =
      _lookup<coreFoundation.CFStringRef>(
          'kSecACLAuthorizationKeychainItemDelete');

  coreFoundation.CFStringRef get kSecACLAuthorizationKeychainItemDelete =>
      _kSecACLAuthorizationKeychainItemDelete.value;

  set kSecACLAuthorizationKeychainItemDelete(
          coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationKeychainItemDelete.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationChangeACL =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationChangeACL');

  coreFoundation.CFStringRef get kSecACLAuthorizationChangeACL =>
      _kSecACLAuthorizationChangeACL.value;

  set kSecACLAuthorizationChangeACL(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationChangeACL.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationChangeOwner =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationChangeOwner');

  coreFoundation.CFStringRef get kSecACLAuthorizationChangeOwner =>
      _kSecACLAuthorizationChangeOwner.value;

  set kSecACLAuthorizationChangeOwner(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationChangeOwner.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationPartitionID =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationPartitionID');

  coreFoundation.CFStringRef get kSecACLAuthorizationPartitionID =>
      _kSecACLAuthorizationPartitionID.value;

  set kSecACLAuthorizationPartitionID(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationPartitionID.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecACLAuthorizationIntegrity =
      _lookup<coreFoundation.CFStringRef>('kSecACLAuthorizationIntegrity');

  coreFoundation.CFStringRef get kSecACLAuthorizationIntegrity =>
      _kSecACLAuthorizationIntegrity.value;

  set kSecACLAuthorizationIntegrity(coreFoundation.CFStringRef value) =>
      _kSecACLAuthorizationIntegrity.value = value;

  /// Returns the type identifier of SecAccess instances.
  int SecAccessGetTypeID() {
    return _SecAccessGetTypeID();
  }

  late final _SecAccessGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecAccessGetTypeID');
  late final _SecAccessGetTypeID =
      _SecAccessGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a new SecAccessRef that is set to the currently designated system
  /// default configuration of a (newly created) security object. Note that the
  /// precise nature of this default may change between releases.
  int SecAccessCreate(
    coreFoundation.CFStringRef descriptor,
    coreFoundation.CFArrayRef trustedlist,
    ffi.Pointer<SecAccessRef> accessRef,
  ) {
    return _SecAccessCreate(
      descriptor,
      trustedlist,
      accessRef,
    );
  }

  late final _SecAccessCreatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFStringRef,
              coreFoundation.CFArrayRef,
              ffi.Pointer<SecAccessRef>)>>('SecAccessCreate');
  late final _SecAccessCreate = _SecAccessCreatePtr.asFunction<
      int Function(coreFoundation.CFStringRef, coreFoundation.CFArrayRef,
          ffi.Pointer<SecAccessRef>)>();

  /// Creates a new SecAccessRef using the owner and access control list you
  /// provide.
  int SecAccessCreateFromOwnerAndACL(
    ffi.Pointer<CSSM_ACL_OWNER_PROTOTYPE> owner,
    int aclCount,
    ffi.Pointer<CSSM_ACL_ENTRY_INFO> acls,
    ffi.Pointer<SecAccessRef> accessRef,
  ) {
    return _SecAccessCreateFromOwnerAndACL(
      owner,
      aclCount,
      acls,
      accessRef,
    );
  }

  late final _SecAccessCreateFromOwnerAndACLPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<CSSM_ACL_OWNER_PROTOTYPE>,
              uint32,
              ffi.Pointer<CSSM_ACL_ENTRY_INFO>,
              ffi.Pointer<SecAccessRef>)>>('SecAccessCreateFromOwnerAndACL');
  late final _SecAccessCreateFromOwnerAndACL =
      _SecAccessCreateFromOwnerAndACLPtr.asFunction<
          int Function(ffi.Pointer<CSSM_ACL_OWNER_PROTOTYPE>, int,
              ffi.Pointer<CSSM_ACL_ENTRY_INFO>, ffi.Pointer<SecAccessRef>)>();

  /// Creates a new SecAccessRef using either for a user or a group with a list
  /// of ACLs
  SecAccessRef SecAccessCreateWithOwnerAndACL(
    int userId,
    int groupId,
    int ownerType,
    coreFoundation.CFArrayRef acls,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecAccessCreateWithOwnerAndACL(
      userId,
      groupId,
      ownerType,
      acls,
      error,
    );
  }

  late final _SecAccessCreateWithOwnerAndACLPtr = _lookup<
          ffi.NativeFunction<
              SecAccessRef Function(
                  uid_t,
                  gid_t,
                  SecAccessOwnerType,
                  coreFoundation.CFArrayRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecAccessCreateWithOwnerAndACL');
  late final _SecAccessCreateWithOwnerAndACL =
      _SecAccessCreateWithOwnerAndACLPtr.asFunction<
          SecAccessRef Function(int, int, int, coreFoundation.CFArrayRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Retrieves the owner and the access control list of a given access.
  int SecAccessGetOwnerAndACL(
    SecAccessRef accessRef,
    ffi.Pointer<CSSM_ACL_OWNER_PROTOTYPE_PTR> owner,
    ffi.Pointer<uint32> aclCount,
    ffi.Pointer<CSSM_ACL_ENTRY_INFO_PTR> acls,
  ) {
    return _SecAccessGetOwnerAndACL(
      accessRef,
      owner,
      aclCount,
      acls,
    );
  }

  late final _SecAccessGetOwnerAndACLPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecAccessRef,
                  ffi.Pointer<CSSM_ACL_OWNER_PROTOTYPE_PTR>,
                  ffi.Pointer<uint32>,
                  ffi.Pointer<CSSM_ACL_ENTRY_INFO_PTR>)>>(
      'SecAccessGetOwnerAndACL');
  late final _SecAccessGetOwnerAndACL = _SecAccessGetOwnerAndACLPtr.asFunction<
      int Function(SecAccessRef, ffi.Pointer<CSSM_ACL_OWNER_PROTOTYPE_PTR>,
          ffi.Pointer<uint32>, ffi.Pointer<CSSM_ACL_ENTRY_INFO_PTR>)>();

  /// Retrieves the owner and the access control list of a given access.
  int SecAccessCopyOwnerAndACL(
    SecAccessRef accessRef,
    ffi.Pointer<uid_t> userId,
    ffi.Pointer<gid_t> groupId,
    ffi.Pointer<SecAccessOwnerType> ownerType,
    ffi.Pointer<coreFoundation.CFArrayRef> aclList,
  ) {
    return _SecAccessCopyOwnerAndACL(
      accessRef,
      userId,
      groupId,
      ownerType,
      aclList,
    );
  }

  late final _SecAccessCopyOwnerAndACLPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecAccessRef,
                  ffi.Pointer<uid_t>,
                  ffi.Pointer<gid_t>,
                  ffi.Pointer<SecAccessOwnerType>,
                  ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecAccessCopyOwnerAndACL');
  late final _SecAccessCopyOwnerAndACL =
      _SecAccessCopyOwnerAndACLPtr.asFunction<
          int Function(
              SecAccessRef,
              ffi.Pointer<uid_t>,
              ffi.Pointer<gid_t>,
              ffi.Pointer<SecAccessOwnerType>,
              ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Copies all the access control lists of a given access.
  int SecAccessCopyACLList(
    SecAccessRef accessRef,
    ffi.Pointer<coreFoundation.CFArrayRef> aclList,
  ) {
    return _SecAccessCopyACLList(
      accessRef,
      aclList,
    );
  }

  late final _SecAccessCopyACLListPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecAccessRef,
              ffi.Pointer<coreFoundation.CFArrayRef>)>>('SecAccessCopyACLList');
  late final _SecAccessCopyACLList = _SecAccessCopyACLListPtr.asFunction<
      int Function(SecAccessRef, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Copies selected access control lists from a given access.
  int SecAccessCopySelectedACLList(
    SecAccessRef accessRef,
    int action,
    ffi.Pointer<coreFoundation.CFArrayRef> aclList,
  ) {
    return _SecAccessCopySelectedACLList(
      accessRef,
      action,
      aclList,
    );
  }

  late final _SecAccessCopySelectedACLListPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecAccessRef, CSSM_ACL_AUTHORIZATION_TAG,
                  ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecAccessCopySelectedACLList');
  late final _SecAccessCopySelectedACLList =
      _SecAccessCopySelectedACLListPtr.asFunction<
          int Function(
              SecAccessRef, int, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Copies selected access control lists from a given access.
  coreFoundation.CFArrayRef SecAccessCopyMatchingACLList(
    SecAccessRef accessRef,
    coreFoundation.CFTypeRef authorizationTag,
  ) {
    return _SecAccessCopyMatchingACLList(
      accessRef,
      authorizationTag,
    );
  }

  late final _SecAccessCopyMatchingACLListPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFArrayRef Function(SecAccessRef,
              coreFoundation.CFTypeRef)>>('SecAccessCopyMatchingACLList');
  late final _SecAccessCopyMatchingACLList =
      _SecAccessCopyMatchingACLListPtr.asFunction<
          coreFoundation.CFArrayRef Function(
              SecAccessRef, coreFoundation.CFTypeRef)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPrivateKeyAttrs =
      _lookup<coreFoundation.CFStringRef>('kSecPrivateKeyAttrs');

  coreFoundation.CFStringRef get kSecPrivateKeyAttrs =>
      _kSecPrivateKeyAttrs.value;

  set kSecPrivateKeyAttrs(coreFoundation.CFStringRef value) =>
      _kSecPrivateKeyAttrs.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPublicKeyAttrs =
      _lookup<coreFoundation.CFStringRef>('kSecPublicKeyAttrs');

  coreFoundation.CFStringRef get kSecPublicKeyAttrs =>
      _kSecPublicKeyAttrs.value;

  set kSecPublicKeyAttrs(coreFoundation.CFStringRef value) =>
      _kSecPublicKeyAttrs.value = value;

  /// Returns the type identifier of SecKey instances.
  int SecKeyGetTypeID() {
    return _SecKeyGetTypeID();
  }

  late final _SecKeyGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecKeyGetTypeID');
  late final _SecKeyGetTypeID =
      _SecKeyGetTypeIDPtr.asFunction<int Function()>();

  /// Creates an asymmetric key pair and stores it in a specified keychain.
  int SecKeyCreatePair(
    SecKeychainRef keychainRef,
    int algorithm,
    int keySizeInBits,
    int contextHandle,
    int publicKeyUsage,
    int publicKeyAttr,
    int privateKeyUsage,
    int privateKeyAttr,
    SecAccessRef initialAccess,
    ffi.Pointer<SecKeyRef> publicKey,
    ffi.Pointer<SecKeyRef> privateKey,
  ) {
    return _SecKeyCreatePair(
      keychainRef,
      algorithm,
      keySizeInBits,
      contextHandle,
      publicKeyUsage,
      publicKeyAttr,
      privateKeyUsage,
      privateKeyAttr,
      initialAccess,
      publicKey,
      privateKey,
    );
  }

  late final _SecKeyCreatePairPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecKeychainRef,
              CSSM_ALGORITHMS,
              uint32,
              CSSM_CC_HANDLE,
              CSSM_KEYUSE,
              uint32,
              CSSM_KEYUSE,
              uint32,
              SecAccessRef,
              ffi.Pointer<SecKeyRef>,
              ffi.Pointer<SecKeyRef>)>>('SecKeyCreatePair');
  late final _SecKeyCreatePair = _SecKeyCreatePairPtr.asFunction<
      int Function(SecKeychainRef, int, int, int, int, int, int, int,
          SecAccessRef, ffi.Pointer<SecKeyRef>, ffi.Pointer<SecKeyRef>)>();

  /// Creates a symmetric key and optionally stores it in a specified keychain.
  int SecKeyGenerate(
    SecKeychainRef keychainRef,
    int algorithm,
    int keySizeInBits,
    int contextHandle,
    int keyUsage,
    int keyAttr,
    SecAccessRef initialAccess,
    ffi.Pointer<SecKeyRef> keyRef,
  ) {
    return _SecKeyGenerate(
      keychainRef,
      algorithm,
      keySizeInBits,
      contextHandle,
      keyUsage,
      keyAttr,
      initialAccess,
      keyRef,
    );
  }

  late final _SecKeyGeneratePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecKeychainRef,
              CSSM_ALGORITHMS,
              uint32,
              CSSM_CC_HANDLE,
              CSSM_KEYUSE,
              uint32,
              SecAccessRef,
              ffi.Pointer<SecKeyRef>)>>('SecKeyGenerate');
  late final _SecKeyGenerate = _SecKeyGeneratePtr.asFunction<
      int Function(SecKeychainRef, int, int, int, int, int, SecAccessRef,
          ffi.Pointer<SecKeyRef>)>();

  /// Returns a pointer to the CSSM_KEY for the given key item reference.
  int SecKeyGetCSSMKey(
    SecKeyRef key,
    ffi.Pointer<ffi.Pointer<CSSM_KEY>> cssmKey,
  ) {
    return _SecKeyGetCSSMKey(
      key,
      cssmKey,
    );
  }

  late final _SecKeyGetCSSMKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeyRef,
              ffi.Pointer<ffi.Pointer<CSSM_KEY>>)>>('SecKeyGetCSSMKey');
  late final _SecKeyGetCSSMKey = _SecKeyGetCSSMKeyPtr.asFunction<
      int Function(SecKeyRef, ffi.Pointer<ffi.Pointer<CSSM_KEY>>)>();

  /// Returns the CSSM_CSP_HANDLE for the given key reference. The handle is
  /// valid until the key reference is released.
  int SecKeyGetCSPHandle(
    SecKeyRef keyRef,
    ffi.Pointer<CSSM_CSP_HANDLE> cspHandle,
  ) {
    return _SecKeyGetCSPHandle(
      keyRef,
      cspHandle,
    );
  }

  late final _SecKeyGetCSPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecKeyRef, ffi.Pointer<CSSM_CSP_HANDLE>)>>('SecKeyGetCSPHandle');
  late final _SecKeyGetCSPHandle = _SecKeyGetCSPHandlePtr.asFunction<
      int Function(SecKeyRef, ffi.Pointer<CSSM_CSP_HANDLE>)>();

  /// For a given key, return a pointer to a CSSM_ACCESS_CREDENTIALS structure
  /// which will allow the key to be used.
  int SecKeyGetCredentials(
    SecKeyRef keyRef,
    int operation,
    int credentialType,
    ffi.Pointer<ffi.Pointer<CSSM_ACCESS_CREDENTIALS>> outCredentials,
  ) {
    return _SecKeyGetCredentials(
      keyRef,
      operation,
      credentialType,
      outCredentials,
    );
  }

  late final _SecKeyGetCredentialsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeyRef,
                  CSSM_ACL_AUTHORIZATION_TAG,
                  SecCredentialType,
                  ffi.Pointer<ffi.Pointer<CSSM_ACCESS_CREDENTIALS>>)>>(
      'SecKeyGetCredentials');
  late final _SecKeyGetCredentials = _SecKeyGetCredentialsPtr.asFunction<
      int Function(SecKeyRef, int, int,
          ffi.Pointer<ffi.Pointer<CSSM_ACCESS_CREDENTIALS>>)>();

  /// Generates a random symmetric key with the specified length and algorithm
  /// type.
  SecKeyRef SecKeyGenerateSymmetric(
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyGenerateSymmetric(
      parameters,
      error,
    );
  }

  late final _SecKeyGenerateSymmetricPtr = _lookup<
          ffi.NativeFunction<
              SecKeyRef Function(coreFoundation.CFDictionaryRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyGenerateSymmetric');
  late final _SecKeyGenerateSymmetric = _SecKeyGenerateSymmetricPtr.asFunction<
      SecKeyRef Function(coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Creates a symmetric key with the given data and sets the algorithm type
  /// specified.
  SecKeyRef SecKeyCreateFromData(
    coreFoundation.CFDictionaryRef parameters,
    coreFoundation.CFDataRef keyData,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCreateFromData(
      parameters,
      keyData,
      error,
    );
  }

  late final _SecKeyCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          SecKeyRef Function(
              coreFoundation.CFDictionaryRef,
              coreFoundation.CFDataRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>>('SecKeyCreateFromData');
  late final _SecKeyCreateFromData = _SecKeyCreateFromDataPtr.asFunction<
      SecKeyRef Function(coreFoundation.CFDictionaryRef,
          coreFoundation.CFDataRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Derives a symmetric key from a password.
  SecKeyRef SecKeyDeriveFromPassword(
    coreFoundation.CFStringRef password,
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyDeriveFromPassword(
      password,
      parameters,
      error,
    );
  }

  late final _SecKeyDeriveFromPasswordPtr = _lookup<
          ffi.NativeFunction<
              SecKeyRef Function(
                  coreFoundation.CFStringRef,
                  coreFoundation.CFDictionaryRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyDeriveFromPassword');
  late final _SecKeyDeriveFromPassword =
      _SecKeyDeriveFromPasswordPtr.asFunction<
          SecKeyRef Function(
              coreFoundation.CFStringRef,
              coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Wraps a symmetric key with a symmetric key.
  coreFoundation.CFDataRef SecKeyWrapSymmetric(
    SecKeyRef keyToWrap,
    SecKeyRef wrappingKey,
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyWrapSymmetric(
      keyToWrap,
      wrappingKey,
      parameters,
      error,
    );
  }

  late final _SecKeyWrapSymmetricPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFDataRef Function(
              SecKeyRef,
              SecKeyRef,
              coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>>('SecKeyWrapSymmetric');
  late final _SecKeyWrapSymmetric = _SecKeyWrapSymmetricPtr.asFunction<
      coreFoundation.CFDataRef Function(
          SecKeyRef,
          SecKeyRef,
          coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Unwrap a wrapped symmetric key.
  SecKeyRef SecKeyUnwrapSymmetric(
    ffi.Pointer<coreFoundation.CFDataRef> keyToUnwrap,
    SecKeyRef unwrappingKey,
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyUnwrapSymmetric(
      keyToUnwrap,
      unwrappingKey,
      parameters,
      error,
    );
  }

  late final _SecKeyUnwrapSymmetricPtr = _lookup<
          ffi.NativeFunction<
              SecKeyRef Function(
                  ffi.Pointer<coreFoundation.CFDataRef>,
                  SecKeyRef,
                  coreFoundation.CFDictionaryRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyUnwrapSymmetric');
  late final _SecKeyUnwrapSymmetric = _SecKeyUnwrapSymmetricPtr.asFunction<
      SecKeyRef Function(
          ffi.Pointer<coreFoundation.CFDataRef>,
          SecKeyRef,
          coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Generate a private/public keypair.
  int SecKeyGeneratePair(
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<SecKeyRef> publicKey,
    ffi.Pointer<SecKeyRef> privateKey,
  ) {
    return _SecKeyGeneratePair(
      parameters,
      publicKey,
      privateKey,
    );
  }

  late final _SecKeyGeneratePairPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFDictionaryRef,
              ffi.Pointer<SecKeyRef>,
              ffi.Pointer<SecKeyRef>)>>('SecKeyGeneratePair');
  late final _SecKeyGeneratePair = _SecKeyGeneratePairPtr.asFunction<
      int Function(coreFoundation.CFDictionaryRef, ffi.Pointer<SecKeyRef>,
          ffi.Pointer<SecKeyRef>)>();

  /// Generates a new public/private key pair.
  SecKeyRef SecKeyCreateRandomKey(
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCreateRandomKey(
      parameters,
      error,
    );
  }

  late final _SecKeyCreateRandomKeyPtr = _lookup<
          ffi.NativeFunction<
              SecKeyRef Function(coreFoundation.CFDictionaryRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyCreateRandomKey');
  late final _SecKeyCreateRandomKey = _SecKeyCreateRandomKeyPtr.asFunction<
      SecKeyRef Function(coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Create a SecKey from a well-defined external representation.
  SecKeyRef SecKeyCreateWithData(
    coreFoundation.CFDataRef keyData,
    coreFoundation.CFDictionaryRef attributes,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCreateWithData(
      keyData,
      attributes,
      error,
    );
  }

  late final _SecKeyCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          SecKeyRef Function(
              coreFoundation.CFDataRef,
              coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>>('SecKeyCreateWithData');
  late final _SecKeyCreateWithData = _SecKeyCreateWithDataPtr.asFunction<
      SecKeyRef Function(
          coreFoundation.CFDataRef,
          coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns block length of the key in bytes.
  int SecKeyGetBlockSize(
    SecKeyRef key,
  ) {
    return _SecKeyGetBlockSize(
      key,
    );
  }

  late final _SecKeyGetBlockSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(SecKeyRef)>>(
          'SecKeyGetBlockSize');
  late final _SecKeyGetBlockSize =
      _SecKeyGetBlockSizePtr.asFunction<int Function(SecKeyRef)>();

  /// Create an external representation for the given key suitable for the key's
  /// type.
  coreFoundation.CFDataRef SecKeyCopyExternalRepresentation(
    SecKeyRef key,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCopyExternalRepresentation(
      key,
      error,
    );
  }

  late final _SecKeyCopyExternalRepresentationPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyCopyExternalRepresentation');
  late final _SecKeyCopyExternalRepresentation =
      _SecKeyCopyExternalRepresentationPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Retrieve keychain attributes of a key.
  coreFoundation.CFDictionaryRef SecKeyCopyAttributes(
    SecKeyRef key,
  ) {
    return _SecKeyCopyAttributes(
      key,
    );
  }

  late final _SecKeyCopyAttributesPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFDictionaryRef Function(
              SecKeyRef)>>('SecKeyCopyAttributes');
  late final _SecKeyCopyAttributes = _SecKeyCopyAttributesPtr.asFunction<
      coreFoundation.CFDictionaryRef Function(SecKeyRef)>();

  /// Retrieve the public key from a key pair or private key.
  SecKeyRef SecKeyCopyPublicKey(
    SecKeyRef key,
  ) {
    return _SecKeyCopyPublicKey(
      key,
    );
  }

  late final _SecKeyCopyPublicKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecKeyRef)>>(
          'SecKeyCopyPublicKey');
  late final _SecKeyCopyPublicKey =
      _SecKeyCopyPublicKeyPtr.asFunction<SecKeyRef Function(SecKeyRef)>();

  late final ffi.Pointer<SecKeyAlgorithm> _kSecKeyAlgorithmRSASignatureRaw =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureRaw');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureRaw =>
      _kSecKeyAlgorithmRSASignatureRaw.value;

  set kSecKeyAlgorithmRSASignatureRaw(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureRaw.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512 =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512.value;

  set kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512 =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512.value;

  set kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA1 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureDigestPSSSHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPSSSHA1 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA1.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA224 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureDigestPSSSHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPSSSHA224 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA224.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA224(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA256 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureDigestPSSSHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPSSSHA256 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA256.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA256(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA384 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureDigestPSSSHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPSSSHA384 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA384.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA384(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA512 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureDigestPSSSHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureDigestPSSSHA512 =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA512.value;

  set kSecKeyAlgorithmRSASignatureDigestPSSSHA512(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureDigestPSSSHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA1 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureMessagePSSSHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePSSSHA1 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA1.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA224 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureMessagePSSSHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePSSSHA224 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA224.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA224(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA256 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureMessagePSSSHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePSSSHA256 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA256.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA256(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA384 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureMessagePSSSHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePSSSHA384 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA384.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA384(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA512 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSASignatureMessagePSSSHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmRSASignatureMessagePSSSHA512 =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA512.value;

  set kSecKeyAlgorithmRSASignatureMessagePSSSHA512(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSASignatureMessagePSSSHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureRFC4754 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmECDSASignatureRFC4754');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureRFC4754 =>
      _kSecKeyAlgorithmECDSASignatureRFC4754.value;

  set kSecKeyAlgorithmECDSASignatureRFC4754(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureRFC4754.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureDigestX962 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmECDSASignatureDigestX962');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureDigestX962 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA1 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmECDSASignatureDigestX962SHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureDigestX962SHA1 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA1.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA224 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureDigestX962SHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureDigestX962SHA224 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA224.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA224(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA256 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureDigestX962SHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureDigestX962SHA256 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA256.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA256(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA384 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureDigestX962SHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureDigestX962SHA384 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA384.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA384(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA512 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureDigestX962SHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureDigestX962SHA512 =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA512.value;

  set kSecKeyAlgorithmECDSASignatureDigestX962SHA512(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureDigestX962SHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA1 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmECDSASignatureMessageX962SHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureMessageX962SHA1 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA1.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA224 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureMessageX962SHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureMessageX962SHA224 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA224.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA224(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA256 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureMessageX962SHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureMessageX962SHA256 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA256.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA256(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA384 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureMessageX962SHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureMessageX962SHA384 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA384.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA384(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA512 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDSASignatureMessageX962SHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmECDSASignatureMessageX962SHA512 =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA512.value;

  set kSecKeyAlgorithmECDSASignatureMessageX962SHA512(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDSASignatureMessageX962SHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm> _kSecKeyAlgorithmRSAEncryptionRaw =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionRaw');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionRaw =>
      _kSecKeyAlgorithmRSAEncryptionRaw.value;

  set kSecKeyAlgorithmRSAEncryptionRaw(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionRaw.value = value;

  late final ffi.Pointer<SecKeyAlgorithm> _kSecKeyAlgorithmRSAEncryptionPKCS1 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionPKCS1');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionPKCS1 =>
      _kSecKeyAlgorithmRSAEncryptionPKCS1.value;

  set kSecKeyAlgorithmRSAEncryptionPKCS1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionPKCS1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA1 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA224 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA224(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA256 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA256(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA384 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA384(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512 =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA512 =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA512(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM.value;

  set kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM');

  SecKeyAlgorithm get kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM.value;

  set kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM');

  SecKeyAlgorithm
      get kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM =>
          _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM
              .value;

  set kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM.value =
          value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeStandard =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmECDHKeyExchangeStandard');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeStandard =>
      _kSecKeyAlgorithmECDHKeyExchangeStandard.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandard(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandard.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512 =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512.value;

  set kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeCofactor =
      _lookup<SecKeyAlgorithm>('kSecKeyAlgorithmECDHKeyExchangeCofactor');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeCofactor =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactor.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactor(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactor.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1(SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384.value = value;

  late final ffi.Pointer<SecKeyAlgorithm>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 =
      _lookup<SecKeyAlgorithm>(
          'kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512');

  SecKeyAlgorithm get kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512 =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512.value;

  set kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512(
          SecKeyAlgorithm value) =>
      _kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512.value = value;

  /// Given a private key and data to sign, generate a digital signature.
  coreFoundation.CFDataRef SecKeyCreateSignature(
    SecKeyRef key,
    SecKeyAlgorithm algorithm,
    coreFoundation.CFDataRef dataToSign,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCreateSignature(
      key,
      algorithm,
      dataToSign,
      error,
    );
  }

  late final _SecKeyCreateSignaturePtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecKeyRef,
                  SecKeyAlgorithm,
                  coreFoundation.CFDataRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyCreateSignature');
  late final _SecKeyCreateSignature = _SecKeyCreateSignaturePtr.asFunction<
      coreFoundation.CFDataRef Function(SecKeyRef, SecKeyAlgorithm,
          coreFoundation.CFDataRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Given a public key, data which has been signed, and a signature, verify
  /// the signature.
  int SecKeyVerifySignature(
    SecKeyRef key,
    SecKeyAlgorithm algorithm,
    coreFoundation.CFDataRef signedData,
    coreFoundation.CFDataRef signature,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyVerifySignature(
      key,
      algorithm,
      signedData,
      signature,
      error,
    );
  }

  late final _SecKeyVerifySignaturePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  SecKeyRef,
                  SecKeyAlgorithm,
                  coreFoundation.CFDataRef,
                  coreFoundation.CFDataRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyVerifySignature');
  late final _SecKeyVerifySignature = _SecKeyVerifySignaturePtr.asFunction<
      int Function(SecKeyRef, SecKeyAlgorithm, coreFoundation.CFDataRef,
          coreFoundation.CFDataRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Encrypt a block of plaintext.
  coreFoundation.CFDataRef SecKeyCreateEncryptedData(
    SecKeyRef key,
    SecKeyAlgorithm algorithm,
    coreFoundation.CFDataRef plaintext,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCreateEncryptedData(
      key,
      algorithm,
      plaintext,
      error,
    );
  }

  late final _SecKeyCreateEncryptedDataPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecKeyRef,
                  SecKeyAlgorithm,
                  coreFoundation.CFDataRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyCreateEncryptedData');
  late final _SecKeyCreateEncryptedData =
      _SecKeyCreateEncryptedDataPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecKeyRef,
              SecKeyAlgorithm,
              coreFoundation.CFDataRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Decrypt a block of ciphertext.
  coreFoundation.CFDataRef SecKeyCreateDecryptedData(
    SecKeyRef key,
    SecKeyAlgorithm algorithm,
    coreFoundation.CFDataRef ciphertext,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCreateDecryptedData(
      key,
      algorithm,
      ciphertext,
      error,
    );
  }

  late final _SecKeyCreateDecryptedDataPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecKeyRef,
                  SecKeyAlgorithm,
                  coreFoundation.CFDataRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyCreateDecryptedData');
  late final _SecKeyCreateDecryptedData =
      _SecKeyCreateDecryptedDataPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecKeyRef,
              SecKeyAlgorithm,
              coreFoundation.CFDataRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  late final ffi.Pointer<SecKeyKeyExchangeParameter>
      _kSecKeyKeyExchangeParameterRequestedSize =
      _lookup<SecKeyKeyExchangeParameter>(
          'kSecKeyKeyExchangeParameterRequestedSize');

  SecKeyKeyExchangeParameter get kSecKeyKeyExchangeParameterRequestedSize =>
      _kSecKeyKeyExchangeParameterRequestedSize.value;

  set kSecKeyKeyExchangeParameterRequestedSize(
          SecKeyKeyExchangeParameter value) =>
      _kSecKeyKeyExchangeParameterRequestedSize.value = value;

  late final ffi.Pointer<SecKeyKeyExchangeParameter>
      _kSecKeyKeyExchangeParameterSharedInfo =
      _lookup<SecKeyKeyExchangeParameter>(
          'kSecKeyKeyExchangeParameterSharedInfo');

  SecKeyKeyExchangeParameter get kSecKeyKeyExchangeParameterSharedInfo =>
      _kSecKeyKeyExchangeParameterSharedInfo.value;

  set kSecKeyKeyExchangeParameterSharedInfo(SecKeyKeyExchangeParameter value) =>
      _kSecKeyKeyExchangeParameterSharedInfo.value = value;

  /// Perform Diffie-Hellman style of key exchange operation, optionally with
  /// additional key-derivation steps.
  coreFoundation.CFDataRef SecKeyCopyKeyExchangeResult(
    SecKeyRef privateKey,
    SecKeyAlgorithm algorithm,
    SecKeyRef publicKey,
    coreFoundation.CFDictionaryRef parameters,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecKeyCopyKeyExchangeResult(
      privateKey,
      algorithm,
      publicKey,
      parameters,
      error,
    );
  }

  late final _SecKeyCopyKeyExchangeResultPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDataRef Function(
                  SecKeyRef,
                  SecKeyAlgorithm,
                  SecKeyRef,
                  coreFoundation.CFDictionaryRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecKeyCopyKeyExchangeResult');
  late final _SecKeyCopyKeyExchangeResult =
      _SecKeyCopyKeyExchangeResultPtr.asFunction<
          coreFoundation.CFDataRef Function(
              SecKeyRef,
              SecKeyAlgorithm,
              SecKeyRef,
              coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Checks whether key supports specified algorithm for specified operation.
  int SecKeyIsAlgorithmSupported(
    SecKeyRef key,
    int operation,
    SecKeyAlgorithm algorithm,
  ) {
    return _SecKeyIsAlgorithmSupported(
      key,
      operation,
      algorithm,
    );
  }

  late final _SecKeyIsAlgorithmSupportedPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(SecKeyRef, SecKeyOperationType,
              SecKeyAlgorithm)>>('SecKeyIsAlgorithmSupported');
  late final _SecKeyIsAlgorithmSupported = _SecKeyIsAlgorithmSupportedPtr
      .asFunction<int Function(SecKeyRef, int, SecKeyAlgorithm)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyAppleX509Basic =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleX509Basic');

  coreFoundation.CFStringRef get kSecPolicyAppleX509Basic =>
      _kSecPolicyAppleX509Basic.value;

  set kSecPolicyAppleX509Basic(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleX509Basic.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyAppleSSL =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleSSL');

  coreFoundation.CFStringRef get kSecPolicyAppleSSL =>
      _kSecPolicyAppleSSL.value;

  set kSecPolicyAppleSSL(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleSSL.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyAppleSMIME =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleSMIME');

  coreFoundation.CFStringRef get kSecPolicyAppleSMIME =>
      _kSecPolicyAppleSMIME.value;

  set kSecPolicyAppleSMIME(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleSMIME.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyAppleEAP =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleEAP');

  coreFoundation.CFStringRef get kSecPolicyAppleEAP =>
      _kSecPolicyAppleEAP.value;

  set kSecPolicyAppleEAP(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleEAP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyAppleIPsec =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleIPsec');

  coreFoundation.CFStringRef get kSecPolicyAppleIPsec =>
      _kSecPolicyAppleIPsec.value;

  set kSecPolicyAppleIPsec(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleIPsec.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyAppleiChat =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleiChat');

  coreFoundation.CFStringRef get kSecPolicyAppleiChat =>
      _kSecPolicyAppleiChat.value;

  set kSecPolicyAppleiChat(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleiChat.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyApplePKINITClient =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyApplePKINITClient');

  coreFoundation.CFStringRef get kSecPolicyApplePKINITClient =>
      _kSecPolicyApplePKINITClient.value;

  set kSecPolicyApplePKINITClient(coreFoundation.CFStringRef value) =>
      _kSecPolicyApplePKINITClient.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyApplePKINITServer =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyApplePKINITServer');

  coreFoundation.CFStringRef get kSecPolicyApplePKINITServer =>
      _kSecPolicyApplePKINITServer.value;

  set kSecPolicyApplePKINITServer(coreFoundation.CFStringRef value) =>
      _kSecPolicyApplePKINITServer.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyAppleCodeSigning =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleCodeSigning');

  coreFoundation.CFStringRef get kSecPolicyAppleCodeSigning =>
      _kSecPolicyAppleCodeSigning.value;

  set kSecPolicyAppleCodeSigning(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleCodeSigning.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyMacAppStoreReceipt =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyMacAppStoreReceipt');

  coreFoundation.CFStringRef get kSecPolicyMacAppStoreReceipt =>
      _kSecPolicyMacAppStoreReceipt.value;

  set kSecPolicyMacAppStoreReceipt(coreFoundation.CFStringRef value) =>
      _kSecPolicyMacAppStoreReceipt.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyAppleIDValidation =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleIDValidation');

  coreFoundation.CFStringRef get kSecPolicyAppleIDValidation =>
      _kSecPolicyAppleIDValidation.value;

  set kSecPolicyAppleIDValidation(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleIDValidation.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyAppleTimeStamping =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleTimeStamping');

  coreFoundation.CFStringRef get kSecPolicyAppleTimeStamping =>
      _kSecPolicyAppleTimeStamping.value;

  set kSecPolicyAppleTimeStamping(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleTimeStamping.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyAppleRevocation =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyAppleRevocation');

  coreFoundation.CFStringRef get kSecPolicyAppleRevocation =>
      _kSecPolicyAppleRevocation.value;

  set kSecPolicyAppleRevocation(coreFoundation.CFStringRef value) =>
      _kSecPolicyAppleRevocation.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyApplePassbookSigning =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyApplePassbookSigning');

  coreFoundation.CFStringRef get kSecPolicyApplePassbookSigning =>
      _kSecPolicyApplePassbookSigning.value;

  set kSecPolicyApplePassbookSigning(coreFoundation.CFStringRef value) =>
      _kSecPolicyApplePassbookSigning.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyApplePayIssuerEncryption =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyApplePayIssuerEncryption');

  coreFoundation.CFStringRef get kSecPolicyApplePayIssuerEncryption =>
      _kSecPolicyApplePayIssuerEncryption.value;

  set kSecPolicyApplePayIssuerEncryption(coreFoundation.CFStringRef value) =>
      _kSecPolicyApplePayIssuerEncryption.value = value;

  /// Predefined property key constants used to get or set values in a dictionary
  /// for a policy instance.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyOid =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyOid');

  coreFoundation.CFStringRef get kSecPolicyOid => _kSecPolicyOid.value;

  set kSecPolicyOid(coreFoundation.CFStringRef value) =>
      _kSecPolicyOid.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyName =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyName');

  coreFoundation.CFStringRef get kSecPolicyName => _kSecPolicyName.value;

  set kSecPolicyName(coreFoundation.CFStringRef value) =>
      _kSecPolicyName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyClient =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyClient');

  coreFoundation.CFStringRef get kSecPolicyClient => _kSecPolicyClient.value;

  set kSecPolicyClient(coreFoundation.CFStringRef value) =>
      _kSecPolicyClient.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyRevocationFlags =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyRevocationFlags');

  coreFoundation.CFStringRef get kSecPolicyRevocationFlags =>
      _kSecPolicyRevocationFlags.value;

  set kSecPolicyRevocationFlags(coreFoundation.CFStringRef value) =>
      _kSecPolicyRevocationFlags.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyTeamIdentifier =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyTeamIdentifier');

  coreFoundation.CFStringRef get kSecPolicyTeamIdentifier =>
      _kSecPolicyTeamIdentifier.value;

  set kSecPolicyTeamIdentifier(coreFoundation.CFStringRef value) =>
      _kSecPolicyTeamIdentifier.value = value;

  /// Returns the type identifier of SecPolicy instances.
  int SecPolicyGetTypeID() {
    return _SecPolicyGetTypeID();
  }

  late final _SecPolicyGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecPolicyGetTypeID');
  late final _SecPolicyGetTypeID =
      _SecPolicyGetTypeIDPtr.asFunction<int Function()>();

  /// Returns a dictionary of this policy's properties.
  coreFoundation.CFDictionaryRef SecPolicyCopyProperties(
    SecPolicyRef policyRef,
  ) {
    return _SecPolicyCopyProperties(
      policyRef,
    );
  }

  late final _SecPolicyCopyPropertiesPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFDictionaryRef Function(
              SecPolicyRef)>>('SecPolicyCopyProperties');
  late final _SecPolicyCopyProperties = _SecPolicyCopyPropertiesPtr.asFunction<
      coreFoundation.CFDictionaryRef Function(SecPolicyRef)>();

  /// Returns a policy object for the default X.509 policy.
  SecPolicyRef SecPolicyCreateBasicX509() {
    return _SecPolicyCreateBasicX509();
  }

  late final _SecPolicyCreateBasicX509Ptr =
      _lookup<ffi.NativeFunction<SecPolicyRef Function()>>(
          'SecPolicyCreateBasicX509');
  late final _SecPolicyCreateBasicX509 =
      _SecPolicyCreateBasicX509Ptr.asFunction<SecPolicyRef Function()>();

  /// Returns a policy object for evaluating SSL certificate chains.
  SecPolicyRef SecPolicyCreateSSL(
    int server,
    coreFoundation.CFStringRef hostname,
  ) {
    return _SecPolicyCreateSSL(
      server,
      hostname,
    );
  }

  late final _SecPolicyCreateSSLPtr = _lookup<
      ffi.NativeFunction<
          SecPolicyRef Function(
              Boolean, coreFoundation.CFStringRef)>>('SecPolicyCreateSSL');
  late final _SecPolicyCreateSSL = _SecPolicyCreateSSLPtr.asFunction<
      SecPolicyRef Function(int, coreFoundation.CFStringRef)>();

  /// Returns a policy object for checking revocation of certificates.
  SecPolicyRef SecPolicyCreateRevocation(
    int revocationFlags,
  ) {
    return _SecPolicyCreateRevocation(
      revocationFlags,
    );
  }

  late final _SecPolicyCreateRevocationPtr = _lookup<
      ffi.NativeFunction<
          SecPolicyRef Function(
              coreFoundation.CFOptionFlags)>>('SecPolicyCreateRevocation');
  late final _SecPolicyCreateRevocation =
      _SecPolicyCreateRevocationPtr.asFunction<SecPolicyRef Function(int)>();

  /// Returns a policy object based on an object identifier for the policy type.
  /// See the "Policy Constants" section for a list of defined policy object
  /// identifiers.
  SecPolicyRef SecPolicyCreateWithProperties(
    coreFoundation.CFTypeRef policyIdentifier,
    coreFoundation.CFDictionaryRef properties,
  ) {
    return _SecPolicyCreateWithProperties(
      policyIdentifier,
      properties,
    );
  }

  late final _SecPolicyCreateWithPropertiesPtr = _lookup<
          ffi.NativeFunction<
              SecPolicyRef Function(
                  coreFoundation.CFTypeRef, coreFoundation.CFDictionaryRef)>>(
      'SecPolicyCreateWithProperties');
  late final _SecPolicyCreateWithProperties =
      _SecPolicyCreateWithPropertiesPtr.asFunction<
          SecPolicyRef Function(
              coreFoundation.CFTypeRef, coreFoundation.CFDictionaryRef)>();

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_DigitalSignature =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_DigitalSignature');

  coreFoundation.CFStringRef get kSecPolicyKU_DigitalSignature =>
      _kSecPolicyKU_DigitalSignature.value;

  set kSecPolicyKU_DigitalSignature(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_DigitalSignature.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_NonRepudiation =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_NonRepudiation');

  coreFoundation.CFStringRef get kSecPolicyKU_NonRepudiation =>
      _kSecPolicyKU_NonRepudiation.value;

  set kSecPolicyKU_NonRepudiation(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_NonRepudiation.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_KeyEncipherment =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_KeyEncipherment');

  coreFoundation.CFStringRef get kSecPolicyKU_KeyEncipherment =>
      _kSecPolicyKU_KeyEncipherment.value;

  set kSecPolicyKU_KeyEncipherment(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_KeyEncipherment.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_DataEncipherment =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_DataEncipherment');

  coreFoundation.CFStringRef get kSecPolicyKU_DataEncipherment =>
      _kSecPolicyKU_DataEncipherment.value;

  set kSecPolicyKU_DataEncipherment(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_DataEncipherment.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_KeyAgreement =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_KeyAgreement');

  coreFoundation.CFStringRef get kSecPolicyKU_KeyAgreement =>
      _kSecPolicyKU_KeyAgreement.value;

  set kSecPolicyKU_KeyAgreement(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_KeyAgreement.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyKU_KeyCertSign =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_KeyCertSign');

  coreFoundation.CFStringRef get kSecPolicyKU_KeyCertSign =>
      _kSecPolicyKU_KeyCertSign.value;

  set kSecPolicyKU_KeyCertSign(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_KeyCertSign.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPolicyKU_CRLSign =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_CRLSign');

  coreFoundation.CFStringRef get kSecPolicyKU_CRLSign =>
      _kSecPolicyKU_CRLSign.value;

  set kSecPolicyKU_CRLSign(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_CRLSign.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_EncipherOnly =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_EncipherOnly');

  coreFoundation.CFStringRef get kSecPolicyKU_EncipherOnly =>
      _kSecPolicyKU_EncipherOnly.value;

  set kSecPolicyKU_EncipherOnly(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_EncipherOnly.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecPolicyKU_DecipherOnly =
      _lookup<coreFoundation.CFStringRef>('kSecPolicyKU_DecipherOnly');

  coreFoundation.CFStringRef get kSecPolicyKU_DecipherOnly =>
      _kSecPolicyKU_DecipherOnly.value;

  set kSecPolicyKU_DecipherOnly(coreFoundation.CFStringRef value) =>
      _kSecPolicyKU_DecipherOnly.value = value;

  /// Returns a policy object based on an object identifier for the policy type.
  /// See the "Policy Constants" section for a list of defined policy object
  /// identifiers.
  SecPolicyRef SecPolicyCreateWithOID(
    coreFoundation.CFTypeRef policyOID,
  ) {
    return _SecPolicyCreateWithOID(
      policyOID,
    );
  }

  late final _SecPolicyCreateWithOIDPtr = _lookup<
          ffi.NativeFunction<SecPolicyRef Function(coreFoundation.CFTypeRef)>>(
      'SecPolicyCreateWithOID');
  late final _SecPolicyCreateWithOID = _SecPolicyCreateWithOIDPtr.asFunction<
      SecPolicyRef Function(coreFoundation.CFTypeRef)>();

  /// Returns a policy's object identifier.
  int SecPolicyGetOID(
    SecPolicyRef policyRef,
    ffi.Pointer<SecAsn1Oid> oid,
  ) {
    return _SecPolicyGetOID(
      policyRef,
      oid,
    );
  }

  late final _SecPolicyGetOIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecPolicyRef, ffi.Pointer<SecAsn1Oid>)>>('SecPolicyGetOID');
  late final _SecPolicyGetOID = _SecPolicyGetOIDPtr.asFunction<
      int Function(SecPolicyRef, ffi.Pointer<SecAsn1Oid>)>();

  /// Returns a policy's value.
  int SecPolicyGetValue(
    SecPolicyRef policyRef,
    ffi.Pointer<SecAsn1Item> value,
  ) {
    return _SecPolicyGetValue(
      policyRef,
      value,
    );
  }

  late final _SecPolicyGetValuePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecPolicyRef, ffi.Pointer<SecAsn1Item>)>>('SecPolicyGetValue');
  late final _SecPolicyGetValue = _SecPolicyGetValuePtr.asFunction<
      int Function(SecPolicyRef, ffi.Pointer<SecAsn1Item>)>();

  /// Sets a policy's value.
  int SecPolicySetValue(
    SecPolicyRef policyRef,
    ffi.Pointer<SecAsn1Item> value,
  ) {
    return _SecPolicySetValue(
      policyRef,
      value,
    );
  }

  late final _SecPolicySetValuePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecPolicyRef, ffi.Pointer<SecAsn1Item>)>>('SecPolicySetValue');
  late final _SecPolicySetValue = _SecPolicySetValuePtr.asFunction<
      int Function(SecPolicyRef, ffi.Pointer<SecAsn1Item>)>();

  /// Sets a policy's properties.
  int SecPolicySetProperties(
    SecPolicyRef policyRef,
    coreFoundation.CFDictionaryRef properties,
  ) {
    return _SecPolicySetProperties(
      policyRef,
      properties,
    );
  }

  late final _SecPolicySetPropertiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecPolicyRef,
              coreFoundation.CFDictionaryRef)>>('SecPolicySetProperties');
  late final _SecPolicySetProperties = _SecPolicySetPropertiesPtr.asFunction<
      int Function(SecPolicyRef, coreFoundation.CFDictionaryRef)>();

  /// Returns the CSSM trust policy handle for the given policy.
  int SecPolicyGetTPHandle(
    SecPolicyRef policyRef,
    ffi.Pointer<CSSM_TP_HANDLE> tpHandle,
  ) {
    return _SecPolicyGetTPHandle(
      policyRef,
      tpHandle,
    );
  }

  late final _SecPolicyGetTPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecPolicyRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecPolicyGetTPHandle');
  late final _SecPolicyGetTPHandle = _SecPolicyGetTPHandlePtr.asFunction<
      int Function(SecPolicyRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  late final ffi.Pointer<SecRandomRef> _kSecRandomDefault =
      _lookup<SecRandomRef>('kSecRandomDefault');

  SecRandomRef get kSecRandomDefault => _kSecRandomDefault.value;

  set kSecRandomDefault(SecRandomRef value) => _kSecRandomDefault.value = value;

  /// Return count random bytes in *bytes, allocated by the caller. It is
  /// critical to check the return value for error.
  int SecRandomCopyBytes(
    SecRandomRef rnd,
    int count,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    return _SecRandomCopyBytes(
      rnd,
      count,
      bytes,
    );
  }

  late final _SecRandomCopyBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(SecRandomRef, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('SecRandomCopyBytes');
  late final _SecRandomCopyBytes = _SecRandomCopyBytesPtr.asFunction<
      int Function(SecRandomRef, int, ffi.Pointer<ffi.Void>)>();

  /// Returns the type identifier of SecKeychain instances.
  int SecKeychainGetTypeID() {
    return _SecKeychainGetTypeID();
  }

  late final _SecKeychainGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecKeychainGetTypeID');
  late final _SecKeychainGetTypeID =
      _SecKeychainGetTypeIDPtr.asFunction<int Function()>();

  /// Create a SecKeychainRef for a keychain at pathName. This keychain might
  /// not currently exist, use SecKeychainGetStatus if you want to confirm the
  /// existence of this keychain.
  int SecKeychainOpen(
    ffi.Pointer<ffi.Char> pathName,
    ffi.Pointer<SecKeychainRef> keychain,
  ) {
    return _SecKeychainOpen(
      pathName,
      keychain,
    );
  }

  late final _SecKeychainOpenPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<SecKeychainRef>)>>('SecKeychainOpen');
  late final _SecKeychainOpen = _SecKeychainOpenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<SecKeychainRef>)>();

  /// Creates a new keychain.
  int SecKeychainCreate(
    ffi.Pointer<ffi.Char> pathName,
    int passwordLength,
    ffi.Pointer<ffi.Void> password,
    int promptUser,
    SecAccessRef initialAccess,
    ffi.Pointer<SecKeychainRef> keychain,
  ) {
    return _SecKeychainCreate(
      pathName,
      passwordLength,
      password,
      promptUser,
      initialAccess,
      keychain,
    );
  }

  late final _SecKeychainCreatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<ffi.Char>,
              UInt32,
              ffi.Pointer<ffi.Void>,
              Boolean,
              SecAccessRef,
              ffi.Pointer<SecKeychainRef>)>>('SecKeychainCreate');
  late final _SecKeychainCreate = _SecKeychainCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>, int,
          SecAccessRef, ffi.Pointer<SecKeychainRef>)>();

  /// Removes one or more keychains from the current keychain searchlist, and
  /// deletes the keychain storage (if the keychains are file-based).
  int SecKeychainDelete(
    SecKeychainRef keychainOrArray,
  ) {
    return _SecKeychainDelete(
      keychainOrArray,
    );
  }

  late final _SecKeychainDeletePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecKeychainRef)>>(
          'SecKeychainDelete');
  late final _SecKeychainDelete =
      _SecKeychainDeletePtr.asFunction<int Function(SecKeychainRef)>();

  /// Changes the settings of a keychain.
  int SecKeychainSetSettings(
    SecKeychainRef keychain,
    ffi.Pointer<SecKeychainSettings> newSettings,
  ) {
    return _SecKeychainSetSettings(
      keychain,
      newSettings,
    );
  }

  late final _SecKeychainSetSettingsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef,
              ffi.Pointer<SecKeychainSettings>)>>('SecKeychainSetSettings');
  late final _SecKeychainSetSettings = _SecKeychainSetSettingsPtr.asFunction<
      int Function(SecKeychainRef, ffi.Pointer<SecKeychainSettings>)>();

  /// Copy the keychain settings.
  int SecKeychainCopySettings(
    SecKeychainRef keychain,
    ffi.Pointer<SecKeychainSettings> outSettings,
  ) {
    return _SecKeychainCopySettings(
      keychain,
      outSettings,
    );
  }

  late final _SecKeychainCopySettingsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef,
              ffi.Pointer<SecKeychainSettings>)>>('SecKeychainCopySettings');
  late final _SecKeychainCopySettings = _SecKeychainCopySettingsPtr.asFunction<
      int Function(SecKeychainRef, ffi.Pointer<SecKeychainSettings>)>();

  /// Unlocks the specified keychain.
  int SecKeychainUnlock(
    SecKeychainRef keychain,
    int passwordLength,
    ffi.Pointer<ffi.Void> password,
    int usePassword,
  ) {
    return _SecKeychainUnlock(
      keychain,
      passwordLength,
      password,
      usePassword,
    );
  }

  late final _SecKeychainUnlockPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef, UInt32, ffi.Pointer<ffi.Void>,
              Boolean)>>('SecKeychainUnlock');
  late final _SecKeychainUnlock = _SecKeychainUnlockPtr.asFunction<
      int Function(SecKeychainRef, int, ffi.Pointer<ffi.Void>, int)>();

  /// Locks the specified keychain.
  int SecKeychainLock(
    SecKeychainRef keychain,
  ) {
    return _SecKeychainLock(
      keychain,
    );
  }

  late final _SecKeychainLockPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecKeychainRef)>>(
          'SecKeychainLock');
  late final _SecKeychainLock =
      _SecKeychainLockPtr.asFunction<int Function(SecKeychainRef)>();

  /// Locks all keychains belonging to the current user.
  int SecKeychainLockAll() {
    return _SecKeychainLockAll();
  }

  late final _SecKeychainLockAllPtr =
      _lookup<ffi.NativeFunction<OSStatus Function()>>('SecKeychainLockAll');
  late final _SecKeychainLockAll =
      _SecKeychainLockAllPtr.asFunction<int Function()>();

  /// Retrieves a reference to the default keychain.
  int SecKeychainCopyDefault(
    ffi.Pointer<SecKeychainRef> keychain,
  ) {
    return _SecKeychainCopyDefault(
      keychain,
    );
  }

  late final _SecKeychainCopyDefaultPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(ffi.Pointer<SecKeychainRef>)>>(
      'SecKeychainCopyDefault');
  late final _SecKeychainCopyDefault = _SecKeychainCopyDefaultPtr.asFunction<
      int Function(ffi.Pointer<SecKeychainRef>)>();

  /// Sets the default keychain.
  int SecKeychainSetDefault(
    SecKeychainRef keychain,
  ) {
    return _SecKeychainSetDefault(
      keychain,
    );
  }

  late final _SecKeychainSetDefaultPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecKeychainRef)>>(
          'SecKeychainSetDefault');
  late final _SecKeychainSetDefault =
      _SecKeychainSetDefaultPtr.asFunction<int Function(SecKeychainRef)>();

  /// Retrieves a keychain search list.
  int SecKeychainCopySearchList(
    ffi.Pointer<coreFoundation.CFArrayRef> searchList,
  ) {
    return _SecKeychainCopySearchList(
      searchList,
    );
  }

  late final _SecKeychainCopySearchListPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecKeychainCopySearchList');
  late final _SecKeychainCopySearchList = _SecKeychainCopySearchListPtr
      .asFunction<int Function(ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Specifies the list of keychains to use in a keychain search list.
  int SecKeychainSetSearchList(
    coreFoundation.CFArrayRef searchList,
  ) {
    return _SecKeychainSetSearchList(
      searchList,
    );
  }

  late final _SecKeychainSetSearchListPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(coreFoundation.CFArrayRef)>>(
          'SecKeychainSetSearchList');
  late final _SecKeychainSetSearchList = _SecKeychainSetSearchListPtr
      .asFunction<int Function(coreFoundation.CFArrayRef)>();

  int SecKeychainCopyDomainDefault(
    int domain,
    ffi.Pointer<SecKeychainRef> keychain,
  ) {
    return _SecKeychainCopyDomainDefault(
      domain,
      keychain,
    );
  }

  late final _SecKeychainCopyDomainDefaultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecPreferencesDomain,
              ffi.Pointer<SecKeychainRef>)>>('SecKeychainCopyDomainDefault');
  late final _SecKeychainCopyDomainDefault = _SecKeychainCopyDomainDefaultPtr
      .asFunction<int Function(int, ffi.Pointer<SecKeychainRef>)>();

  int SecKeychainSetDomainDefault(
    int domain,
    SecKeychainRef keychain,
  ) {
    return _SecKeychainSetDomainDefault(
      domain,
      keychain,
    );
  }

  late final _SecKeychainSetDomainDefaultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecPreferencesDomain,
              SecKeychainRef)>>('SecKeychainSetDomainDefault');
  late final _SecKeychainSetDomainDefault = _SecKeychainSetDomainDefaultPtr
      .asFunction<int Function(int, SecKeychainRef)>();

  int SecKeychainCopyDomainSearchList(
    int domain,
    ffi.Pointer<coreFoundation.CFArrayRef> searchList,
  ) {
    return _SecKeychainCopyDomainSearchList(
      domain,
      searchList,
    );
  }

  late final _SecKeychainCopyDomainSearchListPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecPreferencesDomain,
                  ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecKeychainCopyDomainSearchList');
  late final _SecKeychainCopyDomainSearchList =
      _SecKeychainCopyDomainSearchListPtr.asFunction<
          int Function(int, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  int SecKeychainSetDomainSearchList(
    int domain,
    coreFoundation.CFArrayRef searchList,
  ) {
    return _SecKeychainSetDomainSearchList(
      domain,
      searchList,
    );
  }

  late final _SecKeychainSetDomainSearchListPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecPreferencesDomain,
              coreFoundation.CFArrayRef)>>('SecKeychainSetDomainSearchList');
  late final _SecKeychainSetDomainSearchList =
      _SecKeychainSetDomainSearchListPtr.asFunction<
          int Function(int, coreFoundation.CFArrayRef)>();

  int SecKeychainSetPreferenceDomain(
    int domain,
  ) {
    return _SecKeychainSetPreferenceDomain(
      domain,
    );
  }

  late final _SecKeychainSetPreferenceDomainPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecPreferencesDomain)>>(
          'SecKeychainSetPreferenceDomain');
  late final _SecKeychainSetPreferenceDomain =
      _SecKeychainSetPreferenceDomainPtr.asFunction<int Function(int)>();

  int SecKeychainGetPreferenceDomain(
    ffi.Pointer<SecPreferencesDomain> domain,
  ) {
    return _SecKeychainGetPreferenceDomain(
      domain,
    );
  }

  late final _SecKeychainGetPreferenceDomainPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(ffi.Pointer<SecPreferencesDomain>)>>(
      'SecKeychainGetPreferenceDomain');
  late final _SecKeychainGetPreferenceDomain =
      _SecKeychainGetPreferenceDomainPtr.asFunction<
          int Function(ffi.Pointer<SecPreferencesDomain>)>();

  /// Retrieves status information for the specified keychain.
  int SecKeychainGetStatus(
    SecKeychainRef keychain,
    ffi.Pointer<SecKeychainStatus> keychainStatus,
  ) {
    return _SecKeychainGetStatus(
      keychain,
      keychainStatus,
    );
  }

  late final _SecKeychainGetStatusPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef,
              ffi.Pointer<SecKeychainStatus>)>>('SecKeychainGetStatus');
  late final _SecKeychainGetStatus = _SecKeychainGetStatusPtr.asFunction<
      int Function(SecKeychainRef, ffi.Pointer<SecKeychainStatus>)>();

  /// Get the path of the specified keychain.
  int SecKeychainGetPath(
    SecKeychainRef keychain,
    ffi.Pointer<UInt32> ioPathLength,
    ffi.Pointer<ffi.Char> pathName,
  ) {
    return _SecKeychainGetPath(
      keychain,
      ioPathLength,
      pathName,
    );
  }

  late final _SecKeychainGetPathPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef, ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Char>)>>('SecKeychainGetPath');
  late final _SecKeychainGetPath = _SecKeychainGetPathPtr.asFunction<
      int Function(
          SecKeychainRef, ffi.Pointer<UInt32>, ffi.Pointer<ffi.Char>)>();

  /// Obtains tags for all possible attributes for a given item class.
  int SecKeychainAttributeInfoForItemID(
    SecKeychainRef keychain,
    int itemID,
    ffi.Pointer<ffi.Pointer<SecKeychainAttributeInfo>> info,
  ) {
    return _SecKeychainAttributeInfoForItemID(
      keychain,
      itemID,
      info,
    );
  }

  late final _SecKeychainAttributeInfoForItemIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecKeychainRef, UInt32,
                  ffi.Pointer<ffi.Pointer<SecKeychainAttributeInfo>>)>>(
      'SecKeychainAttributeInfoForItemID');
  late final _SecKeychainAttributeInfoForItemID =
      _SecKeychainAttributeInfoForItemIDPtr.asFunction<
          int Function(SecKeychainRef, int,
              ffi.Pointer<ffi.Pointer<SecKeychainAttributeInfo>>)>();

  /// Releases the memory acquired by calling the
  /// SecKeychainAttributeInfoForItemID function.
  int SecKeychainFreeAttributeInfo(
    ffi.Pointer<SecKeychainAttributeInfo> info,
  ) {
    return _SecKeychainFreeAttributeInfo(
      info,
    );
  }

  late final _SecKeychainFreeAttributeInfoPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(ffi.Pointer<SecKeychainAttributeInfo>)>>(
      'SecKeychainFreeAttributeInfo');
  late final _SecKeychainFreeAttributeInfo = _SecKeychainFreeAttributeInfoPtr
      .asFunction<int Function(ffi.Pointer<SecKeychainAttributeInfo>)>();

  /// Registers your keychain event callback function
  int SecKeychainAddCallback(
    SecKeychainCallback callbackFunction,
    int eventMask,
    ffi.Pointer<ffi.Void> userContext,
  ) {
    return _SecKeychainAddCallback(
      callbackFunction,
      eventMask,
      userContext,
    );
  }

  late final _SecKeychainAddCallbackPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainCallback, SecKeychainEventMask,
              ffi.Pointer<ffi.Void>)>>('SecKeychainAddCallback');
  late final _SecKeychainAddCallback = _SecKeychainAddCallbackPtr.asFunction<
      int Function(SecKeychainCallback, int, ffi.Pointer<ffi.Void>)>();

  /// Unregisters your keychain event callback function. Once removed, keychain
  /// events won't be sent to the owner of the callback.
  int SecKeychainRemoveCallback(
    SecKeychainCallback callbackFunction,
  ) {
    return _SecKeychainRemoveCallback(
      callbackFunction,
    );
  }

  late final _SecKeychainRemoveCallbackPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecKeychainCallback)>>(
          'SecKeychainRemoveCallback');
  late final _SecKeychainRemoveCallback = _SecKeychainRemoveCallbackPtr
      .asFunction<int Function(SecKeychainCallback)>();

  /// Adds an Internet password to the specified keychain.
  int SecKeychainAddInternetPassword(
    SecKeychainRef keychain,
    int serverNameLength,
    ffi.Pointer<ffi.Char> serverName,
    int securityDomainLength,
    ffi.Pointer<ffi.Char> securityDomain,
    int accountNameLength,
    ffi.Pointer<ffi.Char> accountName,
    int pathLength,
    ffi.Pointer<ffi.Char> path,
    int port,
    int protocol,
    int authenticationType,
    int passwordLength,
    ffi.Pointer<ffi.Void> passwordData,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainAddInternetPassword(
      keychain,
      serverNameLength,
      serverName,
      securityDomainLength,
      securityDomain,
      accountNameLength,
      accountName,
      pathLength,
      path,
      port,
      protocol,
      authenticationType,
      passwordLength,
      passwordData,
      itemRef,
    );
  }

  late final _SecKeychainAddInternetPasswordPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeychainRef,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt16,
                  SecProtocolType,
                  SecAuthenticationType,
                  UInt32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<SecKeychainItemRef>)>>(
      'SecKeychainAddInternetPassword');
  late final _SecKeychainAddInternetPassword =
      _SecKeychainAddInternetPasswordPtr.asFunction<
          int Function(
              SecKeychainRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<SecKeychainItemRef>)>();

  /// Finds an Internet password based on the attributes passed.
  int SecKeychainFindInternetPassword(
    coreFoundation.CFTypeRef keychainOrArray,
    int serverNameLength,
    ffi.Pointer<ffi.Char> serverName,
    int securityDomainLength,
    ffi.Pointer<ffi.Char> securityDomain,
    int accountNameLength,
    ffi.Pointer<ffi.Char> accountName,
    int pathLength,
    ffi.Pointer<ffi.Char> path,
    int port,
    int protocol,
    int authenticationType,
    ffi.Pointer<UInt32> passwordLength,
    ffi.Pointer<ffi.Pointer<ffi.Void>> passwordData,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainFindInternetPassword(
      keychainOrArray,
      serverNameLength,
      serverName,
      securityDomainLength,
      securityDomain,
      accountNameLength,
      accountName,
      pathLength,
      path,
      port,
      protocol,
      authenticationType,
      passwordLength,
      passwordData,
      itemRef,
    );
  }

  late final _SecKeychainFindInternetPasswordPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFTypeRef,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt16,
                  SecProtocolType,
                  SecAuthenticationType,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<SecKeychainItemRef>)>>(
      'SecKeychainFindInternetPassword');
  late final _SecKeychainFindInternetPassword =
      _SecKeychainFindInternetPasswordPtr.asFunction<
          int Function(
              coreFoundation.CFTypeRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<SecKeychainItemRef>)>();

  /// Adds a generic password to the specified keychain.
  int SecKeychainAddGenericPassword(
    SecKeychainRef keychain,
    int serviceNameLength,
    ffi.Pointer<ffi.Char> serviceName,
    int accountNameLength,
    ffi.Pointer<ffi.Char> accountName,
    int passwordLength,
    ffi.Pointer<ffi.Void> passwordData,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainAddGenericPassword(
      keychain,
      serviceNameLength,
      serviceName,
      accountNameLength,
      accountName,
      passwordLength,
      passwordData,
      itemRef,
    );
  }

  late final _SecKeychainAddGenericPasswordPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeychainRef,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<SecKeychainItemRef>)>>(
      'SecKeychainAddGenericPassword');
  late final _SecKeychainAddGenericPassword =
      _SecKeychainAddGenericPasswordPtr.asFunction<
          int Function(
              SecKeychainRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<SecKeychainItemRef>)>();

  /// Find a generic password based on the attributes passed.
  int SecKeychainFindGenericPassword(
    coreFoundation.CFTypeRef keychainOrArray,
    int serviceNameLength,
    ffi.Pointer<ffi.Char> serviceName,
    int accountNameLength,
    ffi.Pointer<ffi.Char> accountName,
    ffi.Pointer<UInt32> passwordLength,
    ffi.Pointer<ffi.Pointer<ffi.Void>> passwordData,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainFindGenericPassword(
      keychainOrArray,
      serviceNameLength,
      serviceName,
      accountNameLength,
      accountName,
      passwordLength,
      passwordData,
      itemRef,
    );
  }

  late final _SecKeychainFindGenericPasswordPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFTypeRef,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  UInt32,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<SecKeychainItemRef>)>>(
      'SecKeychainFindGenericPassword');
  late final _SecKeychainFindGenericPassword =
      _SecKeychainFindGenericPasswordPtr.asFunction<
          int Function(
              coreFoundation.CFTypeRef,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<SecKeychainItemRef>)>();

  /// Turns on or off any optional user interaction
  int SecKeychainSetUserInteractionAllowed(
    int state,
  ) {
    return _SecKeychainSetUserInteractionAllowed(
      state,
    );
  }

  late final _SecKeychainSetUserInteractionAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(Boolean)>>(
          'SecKeychainSetUserInteractionAllowed');
  late final _SecKeychainSetUserInteractionAllowed =
      _SecKeychainSetUserInteractionAllowedPtr.asFunction<int Function(int)>();

  /// Retrieves the current state of user interaction.
  int SecKeychainGetUserInteractionAllowed(
    ffi.Pointer<Boolean> state,
  ) {
    return _SecKeychainGetUserInteractionAllowed(
      state,
    );
  }

  late final _SecKeychainGetUserInteractionAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(ffi.Pointer<Boolean>)>>(
          'SecKeychainGetUserInteractionAllowed');
  late final _SecKeychainGetUserInteractionAllowed =
      _SecKeychainGetUserInteractionAllowedPtr.asFunction<
          int Function(ffi.Pointer<Boolean>)>();

  /// Returns the CSSM_CSP_HANDLE attachment for the given keychain reference.
  /// The handle is valid until the keychain reference is released.
  int SecKeychainGetCSPHandle(
    SecKeychainRef keychain,
    ffi.Pointer<CSSM_CSP_HANDLE> cspHandle,
  ) {
    return _SecKeychainGetCSPHandle(
      keychain,
      cspHandle,
    );
  }

  late final _SecKeychainGetCSPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef,
              ffi.Pointer<CSSM_CSP_HANDLE>)>>('SecKeychainGetCSPHandle');
  late final _SecKeychainGetCSPHandle = _SecKeychainGetCSPHandlePtr.asFunction<
      int Function(SecKeychainRef, ffi.Pointer<CSSM_CSP_HANDLE>)>();

  /// Returns the CSSM_DL_DB_HANDLE for a given keychain reference. The handle
  /// is valid until the keychain reference is released.
  int SecKeychainGetDLDBHandle(
    SecKeychainRef keychain,
    ffi.Pointer<CSSM_DL_DB_HANDLE> dldbHandle,
  ) {
    return _SecKeychainGetDLDBHandle(
      keychain,
      dldbHandle,
    );
  }

  late final _SecKeychainGetDLDBHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef,
              ffi.Pointer<CSSM_DL_DB_HANDLE>)>>('SecKeychainGetDLDBHandle');
  late final _SecKeychainGetDLDBHandle =
      _SecKeychainGetDLDBHandlePtr.asFunction<
          int Function(SecKeychainRef, ffi.Pointer<CSSM_DL_DB_HANDLE>)>();

  /// Retrieves the access for a keychain.
  int SecKeychainCopyAccess(
    SecKeychainRef keychain,
    ffi.Pointer<SecAccessRef> access,
  ) {
    return _SecKeychainCopyAccess(
      keychain,
      access,
    );
  }

  late final _SecKeychainCopyAccessPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainRef,
              ffi.Pointer<SecAccessRef>)>>('SecKeychainCopyAccess');
  late final _SecKeychainCopyAccess = _SecKeychainCopyAccessPtr.asFunction<
      int Function(SecKeychainRef, ffi.Pointer<SecAccessRef>)>();

  /// Sets the access for a keychain.
  int SecKeychainSetAccess(
    SecKeychainRef keychain,
    SecAccessRef access,
  ) {
    return _SecKeychainSetAccess(
      keychain,
      access,
    );
  }

  late final _SecKeychainSetAccessPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SecKeychainRef, SecAccessRef)>>(
      'SecKeychainSetAccess');
  late final _SecKeychainSetAccess = _SecKeychainSetAccessPtr.asFunction<
      int Function(SecKeychainRef, SecAccessRef)>();

  int SecKeychainItemExport(
    coreFoundation.CFTypeRef keychainItemOrArray,
    int outputFormat,
    int flags,
    ffi.Pointer<SecKeyImportExportParameters> keyParams,
    ffi.Pointer<coreFoundation.CFDataRef> exportedData,
  ) {
    return _SecKeychainItemExport(
      keychainItemOrArray,
      outputFormat,
      flags,
      keyParams,
      exportedData,
    );
  }

  late final _SecKeychainItemExportPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFTypeRef,
              SecExternalFormat,
              SecItemImportExportFlags,
              ffi.Pointer<SecKeyImportExportParameters>,
              ffi.Pointer<coreFoundation.CFDataRef>)>>('SecKeychainItemExport');
  late final _SecKeychainItemExport = _SecKeychainItemExportPtr.asFunction<
      int Function(
          coreFoundation.CFTypeRef,
          int,
          int,
          ffi.Pointer<SecKeyImportExportParameters>,
          ffi.Pointer<coreFoundation.CFDataRef>)>();

  int SecItemExport(
    coreFoundation.CFTypeRef secItemOrArray,
    int outputFormat,
    int flags,
    ffi.Pointer<SecItemImportExportKeyParameters> keyParams,
    ffi.Pointer<coreFoundation.CFDataRef> exportedData,
  ) {
    return _SecItemExport(
      secItemOrArray,
      outputFormat,
      flags,
      keyParams,
      exportedData,
    );
  }

  late final _SecItemExportPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFTypeRef,
              SecExternalFormat,
              SecItemImportExportFlags,
              ffi.Pointer<SecItemImportExportKeyParameters>,
              ffi.Pointer<coreFoundation.CFDataRef>)>>('SecItemExport');
  late final _SecItemExport = _SecItemExportPtr.asFunction<
      int Function(
          coreFoundation.CFTypeRef,
          int,
          int,
          ffi.Pointer<SecItemImportExportKeyParameters>,
          ffi.Pointer<coreFoundation.CFDataRef>)>();

  int SecKeychainItemImport(
    coreFoundation.CFDataRef importedData,
    coreFoundation.CFStringRef fileNameOrExtension,
    ffi.Pointer<SecExternalFormat> inputFormat,
    ffi.Pointer<SecExternalItemType> itemType,
    int flags,
    ffi.Pointer<SecKeyImportExportParameters> keyParams,
    SecKeychainRef importKeychain,
    ffi.Pointer<coreFoundation.CFArrayRef> outItems,
  ) {
    return _SecKeychainItemImport(
      importedData,
      fileNameOrExtension,
      inputFormat,
      itemType,
      flags,
      keyParams,
      importKeychain,
      outItems,
    );
  }

  late final _SecKeychainItemImportPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFDataRef,
                  coreFoundation.CFStringRef,
                  ffi.Pointer<SecExternalFormat>,
                  ffi.Pointer<SecExternalItemType>,
                  SecItemImportExportFlags,
                  ffi.Pointer<SecKeyImportExportParameters>,
                  SecKeychainRef,
                  ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecKeychainItemImport');
  late final _SecKeychainItemImport = _SecKeychainItemImportPtr.asFunction<
      int Function(
          coreFoundation.CFDataRef,
          coreFoundation.CFStringRef,
          ffi.Pointer<SecExternalFormat>,
          ffi.Pointer<SecExternalItemType>,
          int,
          ffi.Pointer<SecKeyImportExportParameters>,
          SecKeychainRef,
          ffi.Pointer<coreFoundation.CFArrayRef>)>();

  int SecItemImport(
    coreFoundation.CFDataRef importedData,
    coreFoundation.CFStringRef fileNameOrExtension,
    ffi.Pointer<SecExternalFormat> inputFormat,
    ffi.Pointer<SecExternalItemType> itemType,
    int flags,
    ffi.Pointer<SecItemImportExportKeyParameters> keyParams,
    SecKeychainRef importKeychain,
    ffi.Pointer<coreFoundation.CFArrayRef> outItems,
  ) {
    return _SecItemImport(
      importedData,
      fileNameOrExtension,
      inputFormat,
      itemType,
      flags,
      keyParams,
      importKeychain,
      outItems,
    );
  }

  late final _SecItemImportPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFDataRef,
              coreFoundation.CFStringRef,
              ffi.Pointer<SecExternalFormat>,
              ffi.Pointer<SecExternalItemType>,
              SecItemImportExportFlags,
              ffi.Pointer<SecItemImportExportKeyParameters>,
              SecKeychainRef,
              ffi.Pointer<coreFoundation.CFArrayRef>)>>('SecItemImport');
  late final _SecItemImport = _SecItemImportPtr.asFunction<
      int Function(
          coreFoundation.CFDataRef,
          coreFoundation.CFStringRef,
          ffi.Pointer<SecExternalFormat>,
          ffi.Pointer<SecExternalItemType>,
          int,
          ffi.Pointer<SecItemImportExportKeyParameters>,
          SecKeychainRef,
          ffi.Pointer<coreFoundation.CFArrayRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecImportExportPassphrase =
      _lookup<coreFoundation.CFStringRef>('kSecImportExportPassphrase');

  coreFoundation.CFStringRef get kSecImportExportPassphrase =>
      _kSecImportExportPassphrase.value;

  set kSecImportExportPassphrase(coreFoundation.CFStringRef value) =>
      _kSecImportExportPassphrase.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportExportKeychain =
      _lookup<coreFoundation.CFStringRef>('kSecImportExportKeychain');

  coreFoundation.CFStringRef get kSecImportExportKeychain =>
      _kSecImportExportKeychain.value;

  set kSecImportExportKeychain(coreFoundation.CFStringRef value) =>
      _kSecImportExportKeychain.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportExportAccess =
      _lookup<coreFoundation.CFStringRef>('kSecImportExportAccess');

  coreFoundation.CFStringRef get kSecImportExportAccess =>
      _kSecImportExportAccess.value;

  set kSecImportExportAccess(coreFoundation.CFStringRef value) =>
      _kSecImportExportAccess.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportItemLabel =
      _lookup<coreFoundation.CFStringRef>('kSecImportItemLabel');

  coreFoundation.CFStringRef get kSecImportItemLabel =>
      _kSecImportItemLabel.value;

  set kSecImportItemLabel(coreFoundation.CFStringRef value) =>
      _kSecImportItemLabel.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportItemKeyID =
      _lookup<coreFoundation.CFStringRef>('kSecImportItemKeyID');

  coreFoundation.CFStringRef get kSecImportItemKeyID =>
      _kSecImportItemKeyID.value;

  set kSecImportItemKeyID(coreFoundation.CFStringRef value) =>
      _kSecImportItemKeyID.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportItemTrust =
      _lookup<coreFoundation.CFStringRef>('kSecImportItemTrust');

  coreFoundation.CFStringRef get kSecImportItemTrust =>
      _kSecImportItemTrust.value;

  set kSecImportItemTrust(coreFoundation.CFStringRef value) =>
      _kSecImportItemTrust.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportItemCertChain =
      _lookup<coreFoundation.CFStringRef>('kSecImportItemCertChain');

  coreFoundation.CFStringRef get kSecImportItemCertChain =>
      _kSecImportItemCertChain.value;

  set kSecImportItemCertChain(coreFoundation.CFStringRef value) =>
      _kSecImportItemCertChain.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecImportItemIdentity =
      _lookup<coreFoundation.CFStringRef>('kSecImportItemIdentity');

  coreFoundation.CFStringRef get kSecImportItemIdentity =>
      _kSecImportItemIdentity.value;

  set kSecImportItemIdentity(coreFoundation.CFStringRef value) =>
      _kSecImportItemIdentity.value = value;

  /// Imports the contents of a PKCS12 formatted blob.
  int SecPKCS12Import(
    coreFoundation.CFDataRef pkcs12_data,
    coreFoundation.CFDictionaryRef options,
    ffi.Pointer<coreFoundation.CFArrayRef> items,
  ) {
    return _SecPKCS12Import(
      pkcs12_data,
      options,
      items,
    );
  }

  late final _SecPKCS12ImportPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              coreFoundation.CFDataRef,
              coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFArrayRef>)>>('SecPKCS12Import');
  late final _SecPKCS12Import = _SecPKCS12ImportPtr.asFunction<
      int Function(coreFoundation.CFDataRef, coreFoundation.CFDictionaryRef,
          ffi.Pointer<coreFoundation.CFArrayRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeTitle =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeTitle');

  coreFoundation.CFStringRef get kSecPropertyTypeTitle =>
      _kSecPropertyTypeTitle.value;

  set kSecPropertyTypeTitle(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeTitle.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPropertyTypeError =
      _lookup<coreFoundation.CFStringRef>('kSecPropertyTypeError');

  coreFoundation.CFStringRef get kSecPropertyTypeError =>
      _kSecPropertyTypeError.value;

  set kSecPropertyTypeError(coreFoundation.CFStringRef value) =>
      _kSecPropertyTypeError.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecTrustEvaluationDate =
      _lookup<coreFoundation.CFStringRef>('kSecTrustEvaluationDate');

  coreFoundation.CFStringRef get kSecTrustEvaluationDate =>
      _kSecTrustEvaluationDate.value;

  set kSecTrustEvaluationDate(coreFoundation.CFStringRef value) =>
      _kSecTrustEvaluationDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTrustExtendedValidation =
      _lookup<coreFoundation.CFStringRef>('kSecTrustExtendedValidation');

  coreFoundation.CFStringRef get kSecTrustExtendedValidation =>
      _kSecTrustExtendedValidation.value;

  set kSecTrustExtendedValidation(coreFoundation.CFStringRef value) =>
      _kSecTrustExtendedValidation.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTrustOrganizationName =
      _lookup<coreFoundation.CFStringRef>('kSecTrustOrganizationName');

  coreFoundation.CFStringRef get kSecTrustOrganizationName =>
      _kSecTrustOrganizationName.value;

  set kSecTrustOrganizationName(coreFoundation.CFStringRef value) =>
      _kSecTrustOrganizationName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecTrustResultValue =
      _lookup<coreFoundation.CFStringRef>('kSecTrustResultValue');

  coreFoundation.CFStringRef get kSecTrustResultValue =>
      _kSecTrustResultValue.value;

  set kSecTrustResultValue(coreFoundation.CFStringRef value) =>
      _kSecTrustResultValue.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTrustRevocationChecked =
      _lookup<coreFoundation.CFStringRef>('kSecTrustRevocationChecked');

  coreFoundation.CFStringRef get kSecTrustRevocationChecked =>
      _kSecTrustRevocationChecked.value;

  set kSecTrustRevocationChecked(coreFoundation.CFStringRef value) =>
      _kSecTrustRevocationChecked.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTrustRevocationValidUntilDate =
      _lookup<coreFoundation.CFStringRef>('kSecTrustRevocationValidUntilDate');

  coreFoundation.CFStringRef get kSecTrustRevocationValidUntilDate =>
      _kSecTrustRevocationValidUntilDate.value;

  set kSecTrustRevocationValidUntilDate(coreFoundation.CFStringRef value) =>
      _kSecTrustRevocationValidUntilDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTrustCertificateTransparency =
      _lookup<coreFoundation.CFStringRef>('kSecTrustCertificateTransparency');

  coreFoundation.CFStringRef get kSecTrustCertificateTransparency =>
      _kSecTrustCertificateTransparency.value;

  set kSecTrustCertificateTransparency(coreFoundation.CFStringRef value) =>
      _kSecTrustCertificateTransparency.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTrustCertificateTransparencyWhiteList =
      _lookup<coreFoundation.CFStringRef>(
          'kSecTrustCertificateTransparencyWhiteList');

  coreFoundation.CFStringRef get kSecTrustCertificateTransparencyWhiteList =>
      _kSecTrustCertificateTransparencyWhiteList.value;

  set kSecTrustCertificateTransparencyWhiteList(
          coreFoundation.CFStringRef value) =>
      _kSecTrustCertificateTransparencyWhiteList.value = value;

  /// Returns the type identifier of SecTrust instances.
  int SecTrustGetTypeID() {
    return _SecTrustGetTypeID();
  }

  late final _SecTrustGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecTrustGetTypeID');
  late final _SecTrustGetTypeID =
      _SecTrustGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a trust object based on the given certificates and policies.
  int SecTrustCreateWithCertificates(
    coreFoundation.CFTypeRef certificates,
    coreFoundation.CFTypeRef policies,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SecTrustCreateWithCertificates(
      certificates,
      policies,
      trust,
    );
  }

  late final _SecTrustCreateWithCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFTypeRef, coreFoundation.CFTypeRef,
              ffi.Pointer<SecTrustRef>)>>('SecTrustCreateWithCertificates');
  late final _SecTrustCreateWithCertificates =
      _SecTrustCreateWithCertificatesPtr.asFunction<
          int Function(coreFoundation.CFTypeRef, coreFoundation.CFTypeRef,
              ffi.Pointer<SecTrustRef>)>();

  /// Set the policies for which trust should be verified.
  int SecTrustSetPolicies(
    SecTrustRef trust,
    coreFoundation.CFTypeRef policies,
  ) {
    return _SecTrustSetPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustSetPoliciesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, coreFoundation.CFTypeRef)>>('SecTrustSetPolicies');
  late final _SecTrustSetPolicies = _SecTrustSetPoliciesPtr.asFunction<
      int Function(SecTrustRef, coreFoundation.CFTypeRef)>();

  /// Returns an array of policies used for this evaluation.
  int SecTrustCopyPolicies(
    SecTrustRef trust,
    ffi.Pointer<coreFoundation.CFArrayRef> policies,
  ) {
    return _SecTrustCopyPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustCopyPoliciesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<coreFoundation.CFArrayRef>)>>('SecTrustCopyPolicies');
  late final _SecTrustCopyPolicies = _SecTrustCopyPoliciesPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Specifies whether a trust evaluation is permitted to fetch missing
  /// intermediate certificates from the network.
  int SecTrustSetNetworkFetchAllowed(
    SecTrustRef trust,
    int allowFetch,
  ) {
    return _SecTrustSetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustSetNetworkFetchAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetNetworkFetchAllowed');
  late final _SecTrustSetNetworkFetchAllowed =
      _SecTrustSetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, int)>();

  /// Returns whether a trust evaluation is permitted to fetch missing
  /// intermediate certificates from the network.
  int SecTrustGetNetworkFetchAllowed(
    SecTrustRef trust,
    ffi.Pointer<Boolean> allowFetch,
  ) {
    return _SecTrustGetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustGetNetworkFetchAllowedPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<Boolean>)>>('SecTrustGetNetworkFetchAllowed');
  late final _SecTrustGetNetworkFetchAllowed =
      _SecTrustGetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<Boolean>)>();

  /// Sets the anchor certificates for a given trust.
  int SecTrustSetAnchorCertificates(
    SecTrustRef trust,
    coreFoundation.CFArrayRef anchorCertificates,
  ) {
    return _SecTrustSetAnchorCertificates(
      trust,
      anchorCertificates,
    );
  }

  late final _SecTrustSetAnchorCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              coreFoundation.CFArrayRef)>>('SecTrustSetAnchorCertificates');
  late final _SecTrustSetAnchorCertificates = _SecTrustSetAnchorCertificatesPtr
      .asFunction<int Function(SecTrustRef, coreFoundation.CFArrayRef)>();

  /// Reenables trusting anchor certificates in addition to those passed in via
  /// the SecTrustSetAnchorCertificates API.
  int SecTrustSetAnchorCertificatesOnly(
    SecTrustRef trust,
    int anchorCertificatesOnly,
  ) {
    return _SecTrustSetAnchorCertificatesOnly(
      trust,
      anchorCertificatesOnly,
    );
  }

  late final _SecTrustSetAnchorCertificatesOnlyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetAnchorCertificatesOnly');
  late final _SecTrustSetAnchorCertificatesOnly =
      _SecTrustSetAnchorCertificatesOnlyPtr.asFunction<
          int Function(SecTrustRef, int)>();

  /// Returns an array of custom anchor certificates used by a given trust, as
  /// set by a prior call to SecTrustSetAnchorCertificates, or NULL if no custom
  /// anchors have been specified.
  int SecTrustCopyCustomAnchorCertificates(
    SecTrustRef trust,
    ffi.Pointer<coreFoundation.CFArrayRef> anchors,
  ) {
    return _SecTrustCopyCustomAnchorCertificates(
      trust,
      anchors,
    );
  }

  late final _SecTrustCopyCustomAnchorCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef, ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecTrustCopyCustomAnchorCertificates');
  late final _SecTrustCopyCustomAnchorCertificates =
      _SecTrustCopyCustomAnchorCertificatesPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  /// Set the date for which the trust should be verified.
  int SecTrustSetVerifyDate(
    SecTrustRef trust,
    coreFoundation.CFDateRef verifyDate,
  ) {
    return _SecTrustSetVerifyDate(
      trust,
      verifyDate,
    );
  }

  late final _SecTrustSetVerifyDatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, coreFoundation.CFDateRef)>>('SecTrustSetVerifyDate');
  late final _SecTrustSetVerifyDate = _SecTrustSetVerifyDatePtr.asFunction<
      int Function(SecTrustRef, coreFoundation.CFDateRef)>();

  /// Returns the verify time.
  double SecTrustGetVerifyTime(
    SecTrustRef trust,
  ) {
    return _SecTrustGetVerifyTime(
      trust,
    );
  }

  late final _SecTrustGetVerifyTimePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFAbsoluteTime Function(
              SecTrustRef)>>('SecTrustGetVerifyTime');
  late final _SecTrustGetVerifyTime =
      _SecTrustGetVerifyTimePtr.asFunction<double Function(SecTrustRef)>();

  /// Evaluates a trust reference synchronously.
  int SecTrustEvaluate(
    SecTrustRef trust,
    ffi.Pointer<SecTrustResultType> result,
  ) {
    return _SecTrustEvaluate(
      trust,
      result,
    );
  }

  late final _SecTrustEvaluatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<SecTrustResultType>)>>('SecTrustEvaluate');
  late final _SecTrustEvaluate = _SecTrustEvaluatePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<SecTrustResultType>)>();

  /// Evaluates a trust reference synchronously.
  bool SecTrustEvaluateWithError(
    SecTrustRef trust,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTrustEvaluateWithError(
      trust,
      error,
    );
  }

  late final _SecTrustEvaluateWithErrorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  SecTrustRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTrustEvaluateWithError');
  late final _SecTrustEvaluateWithError =
      _SecTrustEvaluateWithErrorPtr.asFunction<
          bool Function(SecTrustRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns A result code. See "Security Error Codes" (SecBase.h). This
  /// function replaces SecTrustGetResult for the purpose of obtaining the
  /// current evaluation result of a given trust reference.
  int SecTrustGetTrustResult(
    SecTrustRef trust,
    ffi.Pointer<SecTrustResultType> result,
  ) {
    return _SecTrustGetTrustResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetTrustResultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<SecTrustResultType>)>>('SecTrustGetTrustResult');
  late final _SecTrustGetTrustResult = _SecTrustGetTrustResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<SecTrustResultType>)>();

  /// Return the public key for a leaf certificate after it has been evaluated.
  SecKeyRef SecTrustCopyPublicKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyPublicKey(
      trust,
    );
  }

  late final _SecTrustCopyPublicKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyPublicKey');
  late final _SecTrustCopyPublicKey =
      _SecTrustCopyPublicKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  /// Return the public key for a leaf certificate after it has been evaluated.
  SecKeyRef SecTrustCopyKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyKey(
      trust,
    );
  }

  late final _SecTrustCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyKey');
  late final _SecTrustCopyKey =
      _SecTrustCopyKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  /// Returns the number of certificates in an evaluated certificate chain.
  int SecTrustGetCertificateCount(
    SecTrustRef trust,
  ) {
    return _SecTrustGetCertificateCount(
      trust,
    );
  }

  late final _SecTrustGetCertificateCountPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFIndex Function(SecTrustRef)>>(
          'SecTrustGetCertificateCount');
  late final _SecTrustGetCertificateCount =
      _SecTrustGetCertificateCountPtr.asFunction<int Function(SecTrustRef)>();

  /// Returns a certificate from the trust chain.
  SecCertificateRef SecTrustGetCertificateAtIndex(
    SecTrustRef trust,
    int ix,
  ) {
    return _SecTrustGetCertificateAtIndex(
      trust,
      ix,
    );
  }

  late final _SecTrustGetCertificateAtIndexPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(SecTrustRef,
              coreFoundation.CFIndex)>>('SecTrustGetCertificateAtIndex');
  late final _SecTrustGetCertificateAtIndex = _SecTrustGetCertificateAtIndexPtr
      .asFunction<SecCertificateRef Function(SecTrustRef, int)>();

  /// Returns an opaque cookie which will allow future evaluations of the
  /// current certificate to succeed.
  coreFoundation.CFDataRef SecTrustCopyExceptions(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyExceptions(
      trust,
    );
  }

  late final _SecTrustCopyExceptionsPtr = _lookup<
          ffi.NativeFunction<coreFoundation.CFDataRef Function(SecTrustRef)>>(
      'SecTrustCopyExceptions');
  late final _SecTrustCopyExceptions = _SecTrustCopyExceptionsPtr.asFunction<
      coreFoundation.CFDataRef Function(SecTrustRef)>();

  /// Set a trust cookie to be used for evaluating this certificate chain.
  bool SecTrustSetExceptions(
    SecTrustRef trust,
    coreFoundation.CFDataRef exceptions,
  ) {
    return _SecTrustSetExceptions(
      trust,
      exceptions,
    );
  }

  late final _SecTrustSetExceptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              SecTrustRef, coreFoundation.CFDataRef)>>('SecTrustSetExceptions');
  late final _SecTrustSetExceptions = _SecTrustSetExceptionsPtr.asFunction<
      bool Function(SecTrustRef, coreFoundation.CFDataRef)>();

  /// Return a property array for this trust evaluation.
  coreFoundation.CFArrayRef SecTrustCopyProperties(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyProperties(
      trust,
    );
  }

  late final _SecTrustCopyPropertiesPtr = _lookup<
          ffi.NativeFunction<coreFoundation.CFArrayRef Function(SecTrustRef)>>(
      'SecTrustCopyProperties');
  late final _SecTrustCopyProperties = _SecTrustCopyPropertiesPtr.asFunction<
      coreFoundation.CFArrayRef Function(SecTrustRef)>();

  /// Returns a dictionary containing information about the evaluated
  /// certificate chain for use by clients.
  coreFoundation.CFDictionaryRef SecTrustCopyResult(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyResult(
      trust,
    );
  }

  late final _SecTrustCopyResultPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFDictionaryRef Function(
              SecTrustRef)>>('SecTrustCopyResult');
  late final _SecTrustCopyResult = _SecTrustCopyResultPtr.asFunction<
      coreFoundation.CFDictionaryRef Function(SecTrustRef)>();

  /// Attach OCSPResponse data to a trust object.
  int SecTrustSetOCSPResponse(
    SecTrustRef trust,
    coreFoundation.CFTypeRef responseData,
  ) {
    return _SecTrustSetOCSPResponse(
      trust,
      responseData,
    );
  }

  late final _SecTrustSetOCSPResponsePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              coreFoundation.CFTypeRef)>>('SecTrustSetOCSPResponse');
  late final _SecTrustSetOCSPResponse = _SecTrustSetOCSPResponsePtr.asFunction<
      int Function(SecTrustRef, coreFoundation.CFTypeRef)>();

  /// Attach SignedCertificateTimestamp data to a trust object.
  int SecTrustSetSignedCertificateTimestamps(
    SecTrustRef trust,
    coreFoundation.CFArrayRef sctArray,
  ) {
    return _SecTrustSetSignedCertificateTimestamps(
      trust,
      sctArray,
    );
  }

  late final _SecTrustSetSignedCertificateTimestampsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef, coreFoundation.CFArrayRef)>>(
      'SecTrustSetSignedCertificateTimestamps');
  late final _SecTrustSetSignedCertificateTimestamps =
      _SecTrustSetSignedCertificateTimestampsPtr.asFunction<
          int Function(SecTrustRef, coreFoundation.CFArrayRef)>();

  /// Returns the certificate trust chain
  coreFoundation.CFArrayRef SecTrustCopyCertificateChain(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyCertificateChain(
      trust,
    );
  }

  late final _SecTrustCopyCertificateChainPtr = _lookup<
          ffi.NativeFunction<coreFoundation.CFArrayRef Function(SecTrustRef)>>(
      'SecTrustCopyCertificateChain');
  late final _SecTrustCopyCertificateChain = _SecTrustCopyCertificateChainPtr
      .asFunction<coreFoundation.CFArrayRef Function(SecTrustRef)>();

  /// Sets optional flags for customizing a trust evaluation.
  int SecTrustSetOptions(
    SecTrustRef trustRef,
    int options,
  ) {
    return _SecTrustSetOptions(
      trustRef,
      options,
    );
  }

  late final _SecTrustSetOptionsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, SecTrustOptionFlags)>>('SecTrustSetOptions');
  late final _SecTrustSetOptions =
      _SecTrustSetOptionsPtr.asFunction<int Function(SecTrustRef, int)>();

  /// Sets the action and action data for a trust object.
  int SecTrustSetParameters(
    SecTrustRef trustRef,
    int action,
    coreFoundation.CFDataRef actionData,
  ) {
    return _SecTrustSetParameters(
      trustRef,
      action,
      actionData,
    );
  }

  late final _SecTrustSetParametersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, CSSM_TP_ACTION,
              coreFoundation.CFDataRef)>>('SecTrustSetParameters');
  late final _SecTrustSetParameters = _SecTrustSetParametersPtr.asFunction<
      int Function(SecTrustRef, int, coreFoundation.CFDataRef)>();

  /// Sets the keychains for a given trust object.
  int SecTrustSetKeychains(
    SecTrustRef trust,
    coreFoundation.CFTypeRef keychainOrArray,
  ) {
    return _SecTrustSetKeychains(
      trust,
      keychainOrArray,
    );
  }

  late final _SecTrustSetKeychainsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, coreFoundation.CFTypeRef)>>('SecTrustSetKeychains');
  late final _SecTrustSetKeychains = _SecTrustSetKeychainsPtr.asFunction<
      int Function(SecTrustRef, coreFoundation.CFTypeRef)>();

  /// Returns detailed information on the outcome of an evaluation.
  int SecTrustGetResult(
    SecTrustRef trustRef,
    ffi.Pointer<SecTrustResultType> result,
    ffi.Pointer<coreFoundation.CFArrayRef> certChain,
    ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>> statusChain,
  ) {
    return _SecTrustGetResult(
      trustRef,
      result,
      certChain,
      statusChain,
    );
  }

  late final _SecTrustGetResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef,
                  ffi.Pointer<SecTrustResultType>,
                  ffi.Pointer<coreFoundation.CFArrayRef>,
                  ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>>(
      'SecTrustGetResult');
  late final _SecTrustGetResult = _SecTrustGetResultPtr.asFunction<
      int Function(
          SecTrustRef,
          ffi.Pointer<SecTrustResultType>,
          ffi.Pointer<coreFoundation.CFArrayRef>,
          ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>();

  /// Gets the CSSM trust result.
  int SecTrustGetCssmResult(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR> result,
  ) {
    return _SecTrustGetCssmResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetCssmResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef,
                  ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>>(
      'SecTrustGetCssmResult');
  late final _SecTrustGetCssmResult = _SecTrustGetCssmResultPtr.asFunction<
      int Function(
          SecTrustRef, ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>();

  /// Gets the result code from the most recent call to SecTrustEvaluate for the
  /// specified trust.
  int SecTrustGetCssmResultCode(
    SecTrustRef trust,
    ffi.Pointer<OSStatus> resultCode,
  ) {
    return _SecTrustGetCssmResultCode(
      trust,
      resultCode,
    );
  }

  late final _SecTrustGetCssmResultCodePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<OSStatus>)>>('SecTrustGetCssmResultCode');
  late final _SecTrustGetCssmResultCode = _SecTrustGetCssmResultCodePtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<OSStatus>)>();

  /// Gets the CSSM trust handle
  int SecTrustGetTPHandle(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_HANDLE> handle,
  ) {
    return _SecTrustGetTPHandle(
      trust,
      handle,
    );
  }

  late final _SecTrustGetTPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecTrustGetTPHandle');
  late final _SecTrustGetTPHandle = _SecTrustGetTPHandlePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  /// Returns an array of default anchor (root) certificates used by the system.
  int SecTrustCopyAnchorCertificates(
    ffi.Pointer<coreFoundation.CFArrayRef> anchors,
  ) {
    return _SecTrustCopyAnchorCertificates(
      anchors,
    );
  }

  late final _SecTrustCopyAnchorCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecTrustCopyAnchorCertificates');
  late final _SecTrustCopyAnchorCertificates =
      _SecTrustCopyAnchorCertificatesPtr.asFunction<
          int Function(ffi.Pointer<coreFoundation.CFArrayRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecSharedPassword =
      _lookup<coreFoundation.CFStringRef>('kSecSharedPassword');

  coreFoundation.CFStringRef get kSecSharedPassword =>
      _kSecSharedPassword.value;

  set kSecSharedPassword(coreFoundation.CFStringRef value) =>
      _kSecSharedPassword.value = value;

  /// Returns a randomly generated password.
  coreFoundation.CFStringRef SecCreateSharedWebCredentialPassword() {
    return _SecCreateSharedWebCredentialPassword();
  }

  late final _SecCreateSharedWebCredentialPasswordPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFStringRef Function()>>(
          'SecCreateSharedWebCredentialPassword');
  late final _SecCreateSharedWebCredentialPassword =
      _SecCreateSharedWebCredentialPasswordPtr.asFunction<
          coreFoundation.CFStringRef Function()>();

  /// Returns the type identifier of SecACL instances.
  int SecACLGetTypeID() {
    return _SecACLGetTypeID();
  }

  late final _SecACLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecACLGetTypeID');
  late final _SecACLGetTypeID =
      _SecACLGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a new access control list entry from the application list,
  /// description, and prompt selector provided and adds it to an item's access.
  int SecACLCreateFromSimpleContents(
    SecAccessRef access,
    coreFoundation.CFArrayRef applicationList,
    coreFoundation.CFStringRef description,
    ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR> promptSelector,
    ffi.Pointer<SecACLRef> newAcl,
  ) {
    return _SecACLCreateFromSimpleContents(
      access,
      applicationList,
      description,
      promptSelector,
      newAcl,
    );
  }

  late final _SecACLCreateFromSimpleContentsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecAccessRef,
              coreFoundation.CFArrayRef,
              coreFoundation.CFStringRef,
              ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
              ffi.Pointer<SecACLRef>)>>('SecACLCreateFromSimpleContents');
  late final _SecACLCreateFromSimpleContents =
      _SecACLCreateFromSimpleContentsPtr.asFunction<
          int Function(
              SecAccessRef,
              coreFoundation.CFArrayRef,
              coreFoundation.CFStringRef,
              ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>,
              ffi.Pointer<SecACLRef>)>();

  /// Creates a new access control list entry from the application list,
  /// description, and prompt selector provided and adds it to an item's access.
  int SecACLCreateWithSimpleContents(
    SecAccessRef access,
    coreFoundation.CFArrayRef applicationList,
    coreFoundation.CFStringRef description,
    int promptSelector,
    ffi.Pointer<SecACLRef> newAcl,
  ) {
    return _SecACLCreateWithSimpleContents(
      access,
      applicationList,
      description,
      promptSelector,
      newAcl,
    );
  }

  late final _SecACLCreateWithSimpleContentsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecAccessRef,
              coreFoundation.CFArrayRef,
              coreFoundation.CFStringRef,
              SecKeychainPromptSelector,
              ffi.Pointer<SecACLRef>)>>('SecACLCreateWithSimpleContents');
  late final _SecACLCreateWithSimpleContents =
      _SecACLCreateWithSimpleContentsPtr.asFunction<
          int Function(SecAccessRef, coreFoundation.CFArrayRef,
              coreFoundation.CFStringRef, int, ffi.Pointer<SecACLRef>)>();

  /// Removes the access control list entry specified.
  int SecACLRemove(
    SecACLRef aclRef,
  ) {
    return _SecACLRemove(
      aclRef,
    );
  }

  late final _SecACLRemovePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecACLRef)>>('SecACLRemove');
  late final _SecACLRemove =
      _SecACLRemovePtr.asFunction<int Function(SecACLRef)>();

  /// Returns the application list, description, and CSSM prompt selector for a
  /// given access control list entry.
  int SecACLCopySimpleContents(
    SecACLRef acl,
    ffi.Pointer<coreFoundation.CFArrayRef> applicationList,
    ffi.Pointer<coreFoundation.CFStringRef> description,
    ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR> promptSelector,
  ) {
    return _SecACLCopySimpleContents(
      acl,
      applicationList,
      description,
      promptSelector,
    );
  }

  late final _SecACLCopySimpleContentsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecACLRef,
                  ffi.Pointer<coreFoundation.CFArrayRef>,
                  ffi.Pointer<coreFoundation.CFStringRef>,
                  ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>)>>(
      'SecACLCopySimpleContents');
  late final _SecACLCopySimpleContents =
      _SecACLCopySimpleContentsPtr.asFunction<
          int Function(
              SecACLRef,
              ffi.Pointer<coreFoundation.CFArrayRef>,
              ffi.Pointer<coreFoundation.CFStringRef>,
              ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>)>();

  /// Returns the application list, description, and prompt selector for a given
  /// access control list entry.
  int SecACLCopyContents(
    SecACLRef acl,
    ffi.Pointer<coreFoundation.CFArrayRef> applicationList,
    ffi.Pointer<coreFoundation.CFStringRef> description,
    ffi.Pointer<SecKeychainPromptSelector> promptSelector,
  ) {
    return _SecACLCopyContents(
      acl,
      applicationList,
      description,
      promptSelector,
    );
  }

  late final _SecACLCopyContentsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecACLRef,
              ffi.Pointer<coreFoundation.CFArrayRef>,
              ffi.Pointer<coreFoundation.CFStringRef>,
              ffi.Pointer<SecKeychainPromptSelector>)>>('SecACLCopyContents');
  late final _SecACLCopyContents = _SecACLCopyContentsPtr.asFunction<
      int Function(
          SecACLRef,
          ffi.Pointer<coreFoundation.CFArrayRef>,
          ffi.Pointer<coreFoundation.CFStringRef>,
          ffi.Pointer<SecKeychainPromptSelector>)>();

  /// Sets the application list, description, and CSSM prompt selector for a
  /// given access control list entry.
  int SecACLSetSimpleContents(
    SecACLRef acl,
    coreFoundation.CFArrayRef applicationList,
    coreFoundation.CFStringRef description,
    ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR> promptSelector,
  ) {
    return _SecACLSetSimpleContents(
      acl,
      applicationList,
      description,
      promptSelector,
    );
  }

  late final _SecACLSetSimpleContentsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecACLRef,
                  coreFoundation.CFArrayRef,
                  coreFoundation.CFStringRef,
                  ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>)>>(
      'SecACLSetSimpleContents');
  late final _SecACLSetSimpleContents = _SecACLSetSimpleContentsPtr.asFunction<
      int Function(
          SecACLRef,
          coreFoundation.CFArrayRef,
          coreFoundation.CFStringRef,
          ffi.Pointer<CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR>)>();

  /// Sets the application list, description, and prompt selector for a given
  /// access control list entry.
  int SecACLSetContents(
    SecACLRef acl,
    coreFoundation.CFArrayRef applicationList,
    coreFoundation.CFStringRef description,
    int promptSelector,
  ) {
    return _SecACLSetContents(
      acl,
      applicationList,
      description,
      promptSelector,
    );
  }

  late final _SecACLSetContentsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecACLRef,
              coreFoundation.CFArrayRef,
              coreFoundation.CFStringRef,
              SecKeychainPromptSelector)>>('SecACLSetContents');
  late final _SecACLSetContents = _SecACLSetContentsPtr.asFunction<
      int Function(SecACLRef, coreFoundation.CFArrayRef,
          coreFoundation.CFStringRef, int)>();

  /// Retrieve the CSSM authorization tags of a given access control list entry.
  int SecACLGetAuthorizations(
    SecACLRef acl,
    ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> tags,
    ffi.Pointer<uint32> tagCount,
  ) {
    return _SecACLGetAuthorizations(
      acl,
      tags,
      tagCount,
    );
  }

  late final _SecACLGetAuthorizationsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecACLRef, ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG>,
              ffi.Pointer<uint32>)>>('SecACLGetAuthorizations');
  late final _SecACLGetAuthorizations = _SecACLGetAuthorizationsPtr.asFunction<
      int Function(SecACLRef, ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG>,
          ffi.Pointer<uint32>)>();

  /// Retrieve the authorization tags of a given access control list entry.
  coreFoundation.CFArrayRef SecACLCopyAuthorizations(
    SecACLRef acl,
  ) {
    return _SecACLCopyAuthorizations(
      acl,
    );
  }

  late final _SecACLCopyAuthorizationsPtr = _lookup<
          ffi.NativeFunction<coreFoundation.CFArrayRef Function(SecACLRef)>>(
      'SecACLCopyAuthorizations');
  late final _SecACLCopyAuthorizations = _SecACLCopyAuthorizationsPtr
      .asFunction<coreFoundation.CFArrayRef Function(SecACLRef)>();

  /// Sets the CSSM authorization tags of a given access control list entry.
  int SecACLSetAuthorizations(
    SecACLRef acl,
    ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> tags,
    int tagCount,
  ) {
    return _SecACLSetAuthorizations(
      acl,
      tags,
      tagCount,
    );
  }

  late final _SecACLSetAuthorizationsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecACLRef, ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG>,
              uint32)>>('SecACLSetAuthorizations');
  late final _SecACLSetAuthorizations = _SecACLSetAuthorizationsPtr.asFunction<
      int Function(SecACLRef, ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG>, int)>();

  /// Sets the authorization tags of a given access control list entry.
  int SecACLUpdateAuthorizations(
    SecACLRef acl,
    coreFoundation.CFArrayRef authorizations,
  ) {
    return _SecACLUpdateAuthorizations(
      acl,
      authorizations,
    );
  }

  late final _SecACLUpdateAuthorizationsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecACLRef,
              coreFoundation.CFArrayRef)>>('SecACLUpdateAuthorizations');
  late final _SecACLUpdateAuthorizations = _SecACLUpdateAuthorizationsPtr
      .asFunction<int Function(SecACLRef, coreFoundation.CFArrayRef)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDADC_CERT_POLICY =
      _lookup<coreFoundation.CFStringRef>('kSecOIDADC_CERT_POLICY');

  coreFoundation.CFStringRef get kSecOIDADC_CERT_POLICY =>
      _kSecOIDADC_CERT_POLICY.value;

  set kSecOIDADC_CERT_POLICY(coreFoundation.CFStringRef value) =>
      _kSecOIDADC_CERT_POLICY.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDAPPLE_CERT_POLICY =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_CERT_POLICY');

  coreFoundation.CFStringRef get kSecOIDAPPLE_CERT_POLICY =>
      _kSecOIDAPPLE_CERT_POLICY.value;

  set kSecOIDAPPLE_CERT_POLICY(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_CERT_POLICY.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EKU_CODE_SIGNING =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EKU_CODE_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EKU_CODE_SIGNING =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING.value;

  set kSecOIDAPPLE_EKU_CODE_SIGNING(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EKU_CODE_SIGNING_DEV =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EKU_CODE_SIGNING_DEV');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EKU_CODE_SIGNING_DEV =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING_DEV.value;

  set kSecOIDAPPLE_EKU_CODE_SIGNING_DEV(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EKU_CODE_SIGNING_DEV.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION =>
      _kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION.value;

  set kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EKU_ICHAT_SIGNING =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EKU_ICHAT_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EKU_ICHAT_SIGNING =>
      _kSecOIDAPPLE_EKU_ICHAT_SIGNING.value;

  set kSecOIDAPPLE_EKU_ICHAT_SIGNING(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EKU_ICHAT_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EKU_RESOURCE_SIGNING =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EKU_RESOURCE_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EKU_RESOURCE_SIGNING =>
      _kSecOIDAPPLE_EKU_RESOURCE_SIGNING.value;

  set kSecOIDAPPLE_EKU_RESOURCE_SIGNING(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EKU_RESOURCE_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EKU_SYSTEM_IDENTITY =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EKU_SYSTEM_IDENTITY');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EKU_SYSTEM_IDENTITY =>
      _kSecOIDAPPLE_EKU_SYSTEM_IDENTITY.value;

  set kSecOIDAPPLE_EKU_SYSTEM_IDENTITY(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EKU_SYSTEM_IDENTITY.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDAPPLE_EXTENSION =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAPPLE_EXTENSION');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION =>
      _kSecOIDAPPLE_EXTENSION.value;

  set kSecOIDAPPLE_EXTENSION(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_APPLE_SIGNING =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_APPLE_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_APPLE_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_APPLE_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_APPLE_SIGNING(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_APPLE_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_CODE_SIGNING =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_CODE_SIGNING');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_CODE_SIGNING =>
      _kSecOIDAPPLE_EXTENSION_CODE_SIGNING.value;

  set kSecOIDAPPLE_EXTENSION_CODE_SIGNING(coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_CODE_SIGNING.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER =>
      _kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER.value;

  set kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE');

  coreFoundation.CFStringRef get kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE =>
      _kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE.value;

  set kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE(
          coreFoundation.CFStringRef value) =>
      _kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAuthorityInfoAccess =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAuthorityInfoAccess');

  coreFoundation.CFStringRef get kSecOIDAuthorityInfoAccess =>
      _kSecOIDAuthorityInfoAccess.value;

  set kSecOIDAuthorityInfoAccess(coreFoundation.CFStringRef value) =>
      _kSecOIDAuthorityInfoAccess.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDAuthorityKeyIdentifier =
      _lookup<coreFoundation.CFStringRef>('kSecOIDAuthorityKeyIdentifier');

  coreFoundation.CFStringRef get kSecOIDAuthorityKeyIdentifier =>
      _kSecOIDAuthorityKeyIdentifier.value;

  set kSecOIDAuthorityKeyIdentifier(coreFoundation.CFStringRef value) =>
      _kSecOIDAuthorityKeyIdentifier.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDBasicConstraints =
      _lookup<coreFoundation.CFStringRef>('kSecOIDBasicConstraints');

  coreFoundation.CFStringRef get kSecOIDBasicConstraints =>
      _kSecOIDBasicConstraints.value;

  set kSecOIDBasicConstraints(coreFoundation.CFStringRef value) =>
      _kSecOIDBasicConstraints.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDBiometricInfo =
      _lookup<coreFoundation.CFStringRef>('kSecOIDBiometricInfo');

  coreFoundation.CFStringRef get kSecOIDBiometricInfo =>
      _kSecOIDBiometricInfo.value;

  set kSecOIDBiometricInfo(coreFoundation.CFStringRef value) =>
      _kSecOIDBiometricInfo.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDCSSMKeyStruct =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCSSMKeyStruct');

  coreFoundation.CFStringRef get kSecOIDCSSMKeyStruct =>
      _kSecOIDCSSMKeyStruct.value;

  set kSecOIDCSSMKeyStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDCSSMKeyStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDCertIssuer =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCertIssuer');

  coreFoundation.CFStringRef get kSecOIDCertIssuer => _kSecOIDCertIssuer.value;

  set kSecOIDCertIssuer(coreFoundation.CFStringRef value) =>
      _kSecOIDCertIssuer.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDCertificatePolicies =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCertificatePolicies');

  coreFoundation.CFStringRef get kSecOIDCertificatePolicies =>
      _kSecOIDCertificatePolicies.value;

  set kSecOIDCertificatePolicies(coreFoundation.CFStringRef value) =>
      _kSecOIDCertificatePolicies.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDClientAuth =
      _lookup<coreFoundation.CFStringRef>('kSecOIDClientAuth');

  coreFoundation.CFStringRef get kSecOIDClientAuth => _kSecOIDClientAuth.value;

  set kSecOIDClientAuth(coreFoundation.CFStringRef value) =>
      _kSecOIDClientAuth.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDCollectiveStateProvinceName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCollectiveStateProvinceName');

  coreFoundation.CFStringRef get kSecOIDCollectiveStateProvinceName =>
      _kSecOIDCollectiveStateProvinceName.value;

  set kSecOIDCollectiveStateProvinceName(coreFoundation.CFStringRef value) =>
      _kSecOIDCollectiveStateProvinceName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDCollectiveStreetAddress =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCollectiveStreetAddress');

  coreFoundation.CFStringRef get kSecOIDCollectiveStreetAddress =>
      _kSecOIDCollectiveStreetAddress.value;

  set kSecOIDCollectiveStreetAddress(coreFoundation.CFStringRef value) =>
      _kSecOIDCollectiveStreetAddress.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDCommonName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCommonName');

  coreFoundation.CFStringRef get kSecOIDCommonName => _kSecOIDCommonName.value;

  set kSecOIDCommonName(coreFoundation.CFStringRef value) =>
      _kSecOIDCommonName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDCountryName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCountryName');

  coreFoundation.CFStringRef get kSecOIDCountryName =>
      _kSecOIDCountryName.value;

  set kSecOIDCountryName(coreFoundation.CFStringRef value) =>
      _kSecOIDCountryName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDCrlDistributionPoints =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCrlDistributionPoints');

  coreFoundation.CFStringRef get kSecOIDCrlDistributionPoints =>
      _kSecOIDCrlDistributionPoints.value;

  set kSecOIDCrlDistributionPoints(coreFoundation.CFStringRef value) =>
      _kSecOIDCrlDistributionPoints.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDCrlNumber =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCrlNumber');

  coreFoundation.CFStringRef get kSecOIDCrlNumber => _kSecOIDCrlNumber.value;

  set kSecOIDCrlNumber(coreFoundation.CFStringRef value) =>
      _kSecOIDCrlNumber.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDCrlReason =
      _lookup<coreFoundation.CFStringRef>('kSecOIDCrlReason');

  coreFoundation.CFStringRef get kSecOIDCrlReason => _kSecOIDCrlReason.value;

  set kSecOIDCrlReason(coreFoundation.CFStringRef value) =>
      _kSecOIDCrlReason.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT');

  coreFoundation.CFStringRef get kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT =>
      _kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT.value;

  set kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT(coreFoundation.CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDDOTMAC_CERT_EMAIL_SIGN =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDOTMAC_CERT_EMAIL_SIGN');

  coreFoundation.CFStringRef get kSecOIDDOTMAC_CERT_EMAIL_SIGN =>
      _kSecOIDDOTMAC_CERT_EMAIL_SIGN.value;

  set kSecOIDDOTMAC_CERT_EMAIL_SIGN(coreFoundation.CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_EMAIL_SIGN.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDDOTMAC_CERT_EXTENSION =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDOTMAC_CERT_EXTENSION');

  coreFoundation.CFStringRef get kSecOIDDOTMAC_CERT_EXTENSION =>
      _kSecOIDDOTMAC_CERT_EXTENSION.value;

  set kSecOIDDOTMAC_CERT_EXTENSION(coreFoundation.CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_EXTENSION.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDDOTMAC_CERT_IDENTITY =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDOTMAC_CERT_IDENTITY');

  coreFoundation.CFStringRef get kSecOIDDOTMAC_CERT_IDENTITY =>
      _kSecOIDDOTMAC_CERT_IDENTITY.value;

  set kSecOIDDOTMAC_CERT_IDENTITY(coreFoundation.CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_IDENTITY.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDDOTMAC_CERT_POLICY =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDOTMAC_CERT_POLICY');

  coreFoundation.CFStringRef get kSecOIDDOTMAC_CERT_POLICY =>
      _kSecOIDDOTMAC_CERT_POLICY.value;

  set kSecOIDDOTMAC_CERT_POLICY(coreFoundation.CFStringRef value) =>
      _kSecOIDDOTMAC_CERT_POLICY.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDDeltaCrlIndicator =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDeltaCrlIndicator');

  coreFoundation.CFStringRef get kSecOIDDeltaCrlIndicator =>
      _kSecOIDDeltaCrlIndicator.value;

  set kSecOIDDeltaCrlIndicator(coreFoundation.CFStringRef value) =>
      _kSecOIDDeltaCrlIndicator.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDDescription =
      _lookup<coreFoundation.CFStringRef>('kSecOIDDescription');

  coreFoundation.CFStringRef get kSecOIDDescription =>
      _kSecOIDDescription.value;

  set kSecOIDDescription(coreFoundation.CFStringRef value) =>
      _kSecOIDDescription.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDEKU_IPSec =
      _lookup<coreFoundation.CFStringRef>('kSecOIDEKU_IPSec');

  coreFoundation.CFStringRef get kSecOIDEKU_IPSec => _kSecOIDEKU_IPSec.value;

  set kSecOIDEKU_IPSec(coreFoundation.CFStringRef value) =>
      _kSecOIDEKU_IPSec.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDEmailAddress =
      _lookup<coreFoundation.CFStringRef>('kSecOIDEmailAddress');

  coreFoundation.CFStringRef get kSecOIDEmailAddress =>
      _kSecOIDEmailAddress.value;

  set kSecOIDEmailAddress(coreFoundation.CFStringRef value) =>
      _kSecOIDEmailAddress.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDEmailProtection =
      _lookup<coreFoundation.CFStringRef>('kSecOIDEmailProtection');

  coreFoundation.CFStringRef get kSecOIDEmailProtection =>
      _kSecOIDEmailProtection.value;

  set kSecOIDEmailProtection(coreFoundation.CFStringRef value) =>
      _kSecOIDEmailProtection.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDExtendedKeyUsage =
      _lookup<coreFoundation.CFStringRef>('kSecOIDExtendedKeyUsage');

  coreFoundation.CFStringRef get kSecOIDExtendedKeyUsage =>
      _kSecOIDExtendedKeyUsage.value;

  set kSecOIDExtendedKeyUsage(coreFoundation.CFStringRef value) =>
      _kSecOIDExtendedKeyUsage.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDExtendedKeyUsageAny =
      _lookup<coreFoundation.CFStringRef>('kSecOIDExtendedKeyUsageAny');

  coreFoundation.CFStringRef get kSecOIDExtendedKeyUsageAny =>
      _kSecOIDExtendedKeyUsageAny.value;

  set kSecOIDExtendedKeyUsageAny(coreFoundation.CFStringRef value) =>
      _kSecOIDExtendedKeyUsageAny.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDExtendedUseCodeSigning =
      _lookup<coreFoundation.CFStringRef>('kSecOIDExtendedUseCodeSigning');

  coreFoundation.CFStringRef get kSecOIDExtendedUseCodeSigning =>
      _kSecOIDExtendedUseCodeSigning.value;

  set kSecOIDExtendedUseCodeSigning(coreFoundation.CFStringRef value) =>
      _kSecOIDExtendedUseCodeSigning.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDGivenName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDGivenName');

  coreFoundation.CFStringRef get kSecOIDGivenName => _kSecOIDGivenName.value;

  set kSecOIDGivenName(coreFoundation.CFStringRef value) =>
      _kSecOIDGivenName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDHoldInstructionCode =
      _lookup<coreFoundation.CFStringRef>('kSecOIDHoldInstructionCode');

  coreFoundation.CFStringRef get kSecOIDHoldInstructionCode =>
      _kSecOIDHoldInstructionCode.value;

  set kSecOIDHoldInstructionCode(coreFoundation.CFStringRef value) =>
      _kSecOIDHoldInstructionCode.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDInvalidityDate =
      _lookup<coreFoundation.CFStringRef>('kSecOIDInvalidityDate');

  coreFoundation.CFStringRef get kSecOIDInvalidityDate =>
      _kSecOIDInvalidityDate.value;

  set kSecOIDInvalidityDate(coreFoundation.CFStringRef value) =>
      _kSecOIDInvalidityDate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDIssuerAltName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDIssuerAltName');

  coreFoundation.CFStringRef get kSecOIDIssuerAltName =>
      _kSecOIDIssuerAltName.value;

  set kSecOIDIssuerAltName(coreFoundation.CFStringRef value) =>
      _kSecOIDIssuerAltName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDIssuingDistributionPoint =
      _lookup<coreFoundation.CFStringRef>('kSecOIDIssuingDistributionPoint');

  coreFoundation.CFStringRef get kSecOIDIssuingDistributionPoint =>
      _kSecOIDIssuingDistributionPoint.value;

  set kSecOIDIssuingDistributionPoint(coreFoundation.CFStringRef value) =>
      _kSecOIDIssuingDistributionPoint.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDIssuingDistributionPoints =
      _lookup<coreFoundation.CFStringRef>('kSecOIDIssuingDistributionPoints');

  coreFoundation.CFStringRef get kSecOIDIssuingDistributionPoints =>
      _kSecOIDIssuingDistributionPoints.value;

  set kSecOIDIssuingDistributionPoints(coreFoundation.CFStringRef value) =>
      _kSecOIDIssuingDistributionPoints.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH');

  coreFoundation.CFStringRef get kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH =>
      _kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH.value;

  set kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH(coreFoundation.CFStringRef value) =>
      _kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDKERBv5_PKINIT_KP_KDC =
      _lookup<coreFoundation.CFStringRef>('kSecOIDKERBv5_PKINIT_KP_KDC');

  coreFoundation.CFStringRef get kSecOIDKERBv5_PKINIT_KP_KDC =>
      _kSecOIDKERBv5_PKINIT_KP_KDC.value;

  set kSecOIDKERBv5_PKINIT_KP_KDC(coreFoundation.CFStringRef value) =>
      _kSecOIDKERBv5_PKINIT_KP_KDC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDKeyUsage =
      _lookup<coreFoundation.CFStringRef>('kSecOIDKeyUsage');

  coreFoundation.CFStringRef get kSecOIDKeyUsage => _kSecOIDKeyUsage.value;

  set kSecOIDKeyUsage(coreFoundation.CFStringRef value) =>
      _kSecOIDKeyUsage.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDLocalityName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDLocalityName');

  coreFoundation.CFStringRef get kSecOIDLocalityName =>
      _kSecOIDLocalityName.value;

  set kSecOIDLocalityName(coreFoundation.CFStringRef value) =>
      _kSecOIDLocalityName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDMS_NTPrincipalName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDMS_NTPrincipalName');

  coreFoundation.CFStringRef get kSecOIDMS_NTPrincipalName =>
      _kSecOIDMS_NTPrincipalName.value;

  set kSecOIDMS_NTPrincipalName(coreFoundation.CFStringRef value) =>
      _kSecOIDMS_NTPrincipalName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDMicrosoftSGC =
      _lookup<coreFoundation.CFStringRef>('kSecOIDMicrosoftSGC');

  coreFoundation.CFStringRef get kSecOIDMicrosoftSGC =>
      _kSecOIDMicrosoftSGC.value;

  set kSecOIDMicrosoftSGC(coreFoundation.CFStringRef value) =>
      _kSecOIDMicrosoftSGC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDNameConstraints =
      _lookup<coreFoundation.CFStringRef>('kSecOIDNameConstraints');

  coreFoundation.CFStringRef get kSecOIDNameConstraints =>
      _kSecOIDNameConstraints.value;

  set kSecOIDNameConstraints(coreFoundation.CFStringRef value) =>
      _kSecOIDNameConstraints.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDNetscapeCertSequence =
      _lookup<coreFoundation.CFStringRef>('kSecOIDNetscapeCertSequence');

  coreFoundation.CFStringRef get kSecOIDNetscapeCertSequence =>
      _kSecOIDNetscapeCertSequence.value;

  set kSecOIDNetscapeCertSequence(coreFoundation.CFStringRef value) =>
      _kSecOIDNetscapeCertSequence.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDNetscapeCertType =
      _lookup<coreFoundation.CFStringRef>('kSecOIDNetscapeCertType');

  coreFoundation.CFStringRef get kSecOIDNetscapeCertType =>
      _kSecOIDNetscapeCertType.value;

  set kSecOIDNetscapeCertType(coreFoundation.CFStringRef value) =>
      _kSecOIDNetscapeCertType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDNetscapeSGC =
      _lookup<coreFoundation.CFStringRef>('kSecOIDNetscapeSGC');

  coreFoundation.CFStringRef get kSecOIDNetscapeSGC =>
      _kSecOIDNetscapeSGC.value;

  set kSecOIDNetscapeSGC(coreFoundation.CFStringRef value) =>
      _kSecOIDNetscapeSGC.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDOCSPSigning =
      _lookup<coreFoundation.CFStringRef>('kSecOIDOCSPSigning');

  coreFoundation.CFStringRef get kSecOIDOCSPSigning =>
      _kSecOIDOCSPSigning.value;

  set kSecOIDOCSPSigning(coreFoundation.CFStringRef value) =>
      _kSecOIDOCSPSigning.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDOrganizationName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDOrganizationName');

  coreFoundation.CFStringRef get kSecOIDOrganizationName =>
      _kSecOIDOrganizationName.value;

  set kSecOIDOrganizationName(coreFoundation.CFStringRef value) =>
      _kSecOIDOrganizationName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDOrganizationalUnitName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDOrganizationalUnitName');

  coreFoundation.CFStringRef get kSecOIDOrganizationalUnitName =>
      _kSecOIDOrganizationalUnitName.value;

  set kSecOIDOrganizationalUnitName(coreFoundation.CFStringRef value) =>
      _kSecOIDOrganizationalUnitName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDPolicyConstraints =
      _lookup<coreFoundation.CFStringRef>('kSecOIDPolicyConstraints');

  coreFoundation.CFStringRef get kSecOIDPolicyConstraints =>
      _kSecOIDPolicyConstraints.value;

  set kSecOIDPolicyConstraints(coreFoundation.CFStringRef value) =>
      _kSecOIDPolicyConstraints.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDPolicyMappings =
      _lookup<coreFoundation.CFStringRef>('kSecOIDPolicyMappings');

  coreFoundation.CFStringRef get kSecOIDPolicyMappings =>
      _kSecOIDPolicyMappings.value;

  set kSecOIDPolicyMappings(coreFoundation.CFStringRef value) =>
      _kSecOIDPolicyMappings.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDPrivateKeyUsagePeriod =
      _lookup<coreFoundation.CFStringRef>('kSecOIDPrivateKeyUsagePeriod');

  coreFoundation.CFStringRef get kSecOIDPrivateKeyUsagePeriod =>
      _kSecOIDPrivateKeyUsagePeriod.value;

  set kSecOIDPrivateKeyUsagePeriod(coreFoundation.CFStringRef value) =>
      _kSecOIDPrivateKeyUsagePeriod.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDQC_Statements =
      _lookup<coreFoundation.CFStringRef>('kSecOIDQC_Statements');

  coreFoundation.CFStringRef get kSecOIDQC_Statements =>
      _kSecOIDQC_Statements.value;

  set kSecOIDQC_Statements(coreFoundation.CFStringRef value) =>
      _kSecOIDQC_Statements.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDSerialNumber =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSerialNumber');

  coreFoundation.CFStringRef get kSecOIDSerialNumber =>
      _kSecOIDSerialNumber.value;

  set kSecOIDSerialNumber(coreFoundation.CFStringRef value) =>
      _kSecOIDSerialNumber.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDServerAuth =
      _lookup<coreFoundation.CFStringRef>('kSecOIDServerAuth');

  coreFoundation.CFStringRef get kSecOIDServerAuth => _kSecOIDServerAuth.value;

  set kSecOIDServerAuth(coreFoundation.CFStringRef value) =>
      _kSecOIDServerAuth.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDStateProvinceName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDStateProvinceName');

  coreFoundation.CFStringRef get kSecOIDStateProvinceName =>
      _kSecOIDStateProvinceName.value;

  set kSecOIDStateProvinceName(coreFoundation.CFStringRef value) =>
      _kSecOIDStateProvinceName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDStreetAddress =
      _lookup<coreFoundation.CFStringRef>('kSecOIDStreetAddress');

  coreFoundation.CFStringRef get kSecOIDStreetAddress =>
      _kSecOIDStreetAddress.value;

  set kSecOIDStreetAddress(coreFoundation.CFStringRef value) =>
      _kSecOIDStreetAddress.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDSubjectAltName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectAltName');

  coreFoundation.CFStringRef get kSecOIDSubjectAltName =>
      _kSecOIDSubjectAltName.value;

  set kSecOIDSubjectAltName(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectAltName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDSubjectDirectoryAttributes =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectDirectoryAttributes');

  coreFoundation.CFStringRef get kSecOIDSubjectDirectoryAttributes =>
      _kSecOIDSubjectDirectoryAttributes.value;

  set kSecOIDSubjectDirectoryAttributes(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectDirectoryAttributes.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDSubjectEmailAddress =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectEmailAddress');

  coreFoundation.CFStringRef get kSecOIDSubjectEmailAddress =>
      _kSecOIDSubjectEmailAddress.value;

  set kSecOIDSubjectEmailAddress(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectEmailAddress.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDSubjectInfoAccess =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectInfoAccess');

  coreFoundation.CFStringRef get kSecOIDSubjectInfoAccess =>
      _kSecOIDSubjectInfoAccess.value;

  set kSecOIDSubjectInfoAccess(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectInfoAccess.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDSubjectKeyIdentifier =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectKeyIdentifier');

  coreFoundation.CFStringRef get kSecOIDSubjectKeyIdentifier =>
      _kSecOIDSubjectKeyIdentifier.value;

  set kSecOIDSubjectKeyIdentifier(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectKeyIdentifier.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDSubjectPicture =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectPicture');

  coreFoundation.CFStringRef get kSecOIDSubjectPicture =>
      _kSecOIDSubjectPicture.value;

  set kSecOIDSubjectPicture(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectPicture.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDSubjectSignatureBitmap =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSubjectSignatureBitmap');

  coreFoundation.CFStringRef get kSecOIDSubjectSignatureBitmap =>
      _kSecOIDSubjectSignatureBitmap.value;

  set kSecOIDSubjectSignatureBitmap(coreFoundation.CFStringRef value) =>
      _kSecOIDSubjectSignatureBitmap.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDSurname =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSurname');

  coreFoundation.CFStringRef get kSecOIDSurname => _kSecOIDSurname.value;

  set kSecOIDSurname(coreFoundation.CFStringRef value) =>
      _kSecOIDSurname.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDTimeStamping =
      _lookup<coreFoundation.CFStringRef>('kSecOIDTimeStamping');

  coreFoundation.CFStringRef get kSecOIDTimeStamping =>
      _kSecOIDTimeStamping.value;

  set kSecOIDTimeStamping(coreFoundation.CFStringRef value) =>
      _kSecOIDTimeStamping.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDTitle =
      _lookup<coreFoundation.CFStringRef>('kSecOIDTitle');

  coreFoundation.CFStringRef get kSecOIDTitle => _kSecOIDTitle.value;

  set kSecOIDTitle(coreFoundation.CFStringRef value) =>
      _kSecOIDTitle.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDUseExemptions =
      _lookup<coreFoundation.CFStringRef>('kSecOIDUseExemptions');

  coreFoundation.CFStringRef get kSecOIDUseExemptions =>
      _kSecOIDUseExemptions.value;

  set kSecOIDUseExemptions(coreFoundation.CFStringRef value) =>
      _kSecOIDUseExemptions.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1CertificateIssuerUniqueId =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V1CertificateIssuerUniqueId');

  coreFoundation.CFStringRef get kSecOIDX509V1CertificateIssuerUniqueId =>
      _kSecOIDX509V1CertificateIssuerUniqueId.value;

  set kSecOIDX509V1CertificateIssuerUniqueId(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1CertificateIssuerUniqueId.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1CertificateSubjectUniqueId =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V1CertificateSubjectUniqueId');

  coreFoundation.CFStringRef get kSecOIDX509V1CertificateSubjectUniqueId =>
      _kSecOIDX509V1CertificateSubjectUniqueId.value;

  set kSecOIDX509V1CertificateSubjectUniqueId(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1CertificateSubjectUniqueId.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDX509V1IssuerName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1IssuerName');

  coreFoundation.CFStringRef get kSecOIDX509V1IssuerName =>
      _kSecOIDX509V1IssuerName.value;

  set kSecOIDX509V1IssuerName(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1IssuerName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1IssuerNameCStruct =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1IssuerNameCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V1IssuerNameCStruct =>
      _kSecOIDX509V1IssuerNameCStruct.value;

  set kSecOIDX509V1IssuerNameCStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1IssuerNameCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1IssuerNameLDAP =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1IssuerNameLDAP');

  coreFoundation.CFStringRef get kSecOIDX509V1IssuerNameLDAP =>
      _kSecOIDX509V1IssuerNameLDAP.value;

  set kSecOIDX509V1IssuerNameLDAP(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1IssuerNameLDAP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1IssuerNameStd =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1IssuerNameStd');

  coreFoundation.CFStringRef get kSecOIDX509V1IssuerNameStd =>
      _kSecOIDX509V1IssuerNameStd.value;

  set kSecOIDX509V1IssuerNameStd(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1IssuerNameStd.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SerialNumber =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SerialNumber');

  coreFoundation.CFStringRef get kSecOIDX509V1SerialNumber =>
      _kSecOIDX509V1SerialNumber.value;

  set kSecOIDX509V1SerialNumber(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SerialNumber.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDX509V1Signature =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1Signature');

  coreFoundation.CFStringRef get kSecOIDX509V1Signature =>
      _kSecOIDX509V1Signature.value;

  set kSecOIDX509V1Signature(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1Signature.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SignatureAlgorithm =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SignatureAlgorithm');

  coreFoundation.CFStringRef get kSecOIDX509V1SignatureAlgorithm =>
      _kSecOIDX509V1SignatureAlgorithm.value;

  set kSecOIDX509V1SignatureAlgorithm(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SignatureAlgorithm.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SignatureAlgorithmParameters =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V1SignatureAlgorithmParameters');

  coreFoundation.CFStringRef get kSecOIDX509V1SignatureAlgorithmParameters =>
      _kSecOIDX509V1SignatureAlgorithmParameters.value;

  set kSecOIDX509V1SignatureAlgorithmParameters(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SignatureAlgorithmParameters.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SignatureAlgorithmTBS =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SignatureAlgorithmTBS');

  coreFoundation.CFStringRef get kSecOIDX509V1SignatureAlgorithmTBS =>
      _kSecOIDX509V1SignatureAlgorithmTBS.value;

  set kSecOIDX509V1SignatureAlgorithmTBS(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SignatureAlgorithmTBS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SignatureCStruct =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SignatureCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V1SignatureCStruct =>
      _kSecOIDX509V1SignatureCStruct.value;

  set kSecOIDX509V1SignatureCStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SignatureCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SignatureStruct =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SignatureStruct');

  coreFoundation.CFStringRef get kSecOIDX509V1SignatureStruct =>
      _kSecOIDX509V1SignatureStruct.value;

  set kSecOIDX509V1SignatureStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SignatureStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDX509V1SubjectName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SubjectName');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectName =>
      _kSecOIDX509V1SubjectName.value;

  set kSecOIDX509V1SubjectName(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectNameCStruct =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SubjectNameCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectNameCStruct =>
      _kSecOIDX509V1SubjectNameCStruct.value;

  set kSecOIDX509V1SubjectNameCStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectNameCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectNameLDAP =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SubjectNameLDAP');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectNameLDAP =>
      _kSecOIDX509V1SubjectNameLDAP.value;

  set kSecOIDX509V1SubjectNameLDAP(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectNameLDAP.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectNameStd =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SubjectNameStd');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectNameStd =>
      _kSecOIDX509V1SubjectNameStd.value;

  set kSecOIDX509V1SubjectNameStd(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectNameStd.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectPublicKey =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1SubjectPublicKey');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectPublicKey =>
      _kSecOIDX509V1SubjectPublicKey.value;

  set kSecOIDX509V1SubjectPublicKey(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKey.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectPublicKeyAlgorithm =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V1SubjectPublicKeyAlgorithm');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectPublicKeyAlgorithm =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithm.value;

  set kSecOIDX509V1SubjectPublicKeyAlgorithm(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithm.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectPublicKeyAlgorithmParameters =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V1SubjectPublicKeyAlgorithmParameters');

  coreFoundation.CFStringRef
      get kSecOIDX509V1SubjectPublicKeyAlgorithmParameters =>
          _kSecOIDX509V1SubjectPublicKeyAlgorithmParameters.value;

  set kSecOIDX509V1SubjectPublicKeyAlgorithmParameters(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKeyAlgorithmParameters.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1SubjectPublicKeyCStruct =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V1SubjectPublicKeyCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V1SubjectPublicKeyCStruct =>
      _kSecOIDX509V1SubjectPublicKeyCStruct.value;

  set kSecOIDX509V1SubjectPublicKeyCStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1SubjectPublicKeyCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1ValidityNotAfter =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1ValidityNotAfter');

  coreFoundation.CFStringRef get kSecOIDX509V1ValidityNotAfter =>
      _kSecOIDX509V1ValidityNotAfter.value;

  set kSecOIDX509V1ValidityNotAfter(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1ValidityNotAfter.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V1ValidityNotBefore =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1ValidityNotBefore');

  coreFoundation.CFStringRef get kSecOIDX509V1ValidityNotBefore =>
      _kSecOIDX509V1ValidityNotBefore.value;

  set kSecOIDX509V1ValidityNotBefore(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1ValidityNotBefore.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDX509V1Version =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V1Version');

  coreFoundation.CFStringRef get kSecOIDX509V1Version =>
      _kSecOIDX509V1Version.value;

  set kSecOIDX509V1Version(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V1Version.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDX509V3Certificate =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V3Certificate');

  coreFoundation.CFStringRef get kSecOIDX509V3Certificate =>
      _kSecOIDX509V3Certificate.value;

  set kSecOIDX509V3Certificate(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3Certificate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateCStruct =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V3CertificateCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateCStruct =>
      _kSecOIDX509V3CertificateCStruct.value;

  set kSecOIDX509V3CertificateCStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionCStruct =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionCStruct =>
      _kSecOIDX509V3CertificateExtensionCStruct.value;

  set kSecOIDX509V3CertificateExtensionCStruct(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionCritical =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionCritical');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionCritical =>
      _kSecOIDX509V3CertificateExtensionCritical.value;

  set kSecOIDX509V3CertificateExtensionCritical(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionCritical.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionId =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionId');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionId =>
      _kSecOIDX509V3CertificateExtensionId.value;

  set kSecOIDX509V3CertificateExtensionId(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionId.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionStruct =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionStruct');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionStruct =>
      _kSecOIDX509V3CertificateExtensionStruct.value;

  set kSecOIDX509V3CertificateExtensionStruct(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionType =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionType');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionType =>
      _kSecOIDX509V3CertificateExtensionType.value;

  set kSecOIDX509V3CertificateExtensionType(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionType.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionValue =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionValue');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionValue =>
      _kSecOIDX509V3CertificateExtensionValue.value;

  set kSecOIDX509V3CertificateExtensionValue(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionValue.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionsCStruct =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionsCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionsCStruct =>
      _kSecOIDX509V3CertificateExtensionsCStruct.value;

  set kSecOIDX509V3CertificateExtensionsCStruct(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionsCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateExtensionsStruct =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateExtensionsStruct');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateExtensionsStruct =>
      _kSecOIDX509V3CertificateExtensionsStruct.value;

  set kSecOIDX509V3CertificateExtensionsStruct(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateExtensionsStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3CertificateNumberOfExtensions =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3CertificateNumberOfExtensions');

  coreFoundation.CFStringRef get kSecOIDX509V3CertificateNumberOfExtensions =>
      _kSecOIDX509V3CertificateNumberOfExtensions.value;

  set kSecOIDX509V3CertificateNumberOfExtensions(
          coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3CertificateNumberOfExtensions.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3SignedCertificate =
      _lookup<coreFoundation.CFStringRef>('kSecOIDX509V3SignedCertificate');

  coreFoundation.CFStringRef get kSecOIDX509V3SignedCertificate =>
      _kSecOIDX509V3SignedCertificate.value;

  set kSecOIDX509V3SignedCertificate(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3SignedCertificate.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOIDX509V3SignedCertificateCStruct =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOIDX509V3SignedCertificateCStruct');

  coreFoundation.CFStringRef get kSecOIDX509V3SignedCertificateCStruct =>
      _kSecOIDX509V3SignedCertificateCStruct.value;

  set kSecOIDX509V3SignedCertificateCStruct(coreFoundation.CFStringRef value) =>
      _kSecOIDX509V3SignedCertificateCStruct.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecOIDSRVName =
      _lookup<coreFoundation.CFStringRef>('kSecOIDSRVName');

  coreFoundation.CFStringRef get kSecOIDSRVName => _kSecOIDSRVName.value;

  set kSecOIDSRVName(coreFoundation.CFStringRef value) =>
      _kSecOIDSRVName.value = value;

  /// Returns the type identifier of SecIdentitySearch instances.
  int SecIdentitySearchGetTypeID() {
    return _SecIdentitySearchGetTypeID();
  }

  late final _SecIdentitySearchGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecIdentitySearchGetTypeID');
  late final _SecIdentitySearchGetTypeID =
      _SecIdentitySearchGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a search reference for finding identities.
  int SecIdentitySearchCreate(
    coreFoundation.CFTypeRef keychainOrArray,
    int keyUsage,
    ffi.Pointer<SecIdentitySearchRef> searchRef,
  ) {
    return _SecIdentitySearchCreate(
      keychainOrArray,
      keyUsage,
      searchRef,
    );
  }

  late final _SecIdentitySearchCreatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFTypeRef, CSSM_KEYUSE,
              ffi.Pointer<SecIdentitySearchRef>)>>('SecIdentitySearchCreate');
  late final _SecIdentitySearchCreate = _SecIdentitySearchCreatePtr.asFunction<
      int Function(
          coreFoundation.CFTypeRef, int, ffi.Pointer<SecIdentitySearchRef>)>();

  /// Finds the next identity matching the given search criteria, as previously
  /// specified by a call to SecIdentitySearchCreate or
  /// SecIdentitySearchCreateWithAttributes.
  int SecIdentitySearchCopyNext(
    SecIdentitySearchRef searchRef,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentitySearchCopyNext(
      searchRef,
      identity,
    );
  }

  late final _SecIdentitySearchCopyNextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentitySearchRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentitySearchCopyNext');
  late final _SecIdentitySearchCopyNext =
      _SecIdentitySearchCopyNextPtr.asFunction<
          int Function(SecIdentitySearchRef, ffi.Pointer<SecIdentityRef>)>();

  /// Returns the type identifier of SecKeychainItem instances.
  int SecKeychainItemGetTypeID() {
    return _SecKeychainItemGetTypeID();
  }

  late final _SecKeychainItemGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecKeychainItemGetTypeID');
  late final _SecKeychainItemGetTypeID =
      _SecKeychainItemGetTypeIDPtr.asFunction<int Function()>();

  /// Updates an existing keychain item after changing its attributes or data.
  int SecKeychainItemModifyAttributesAndData(
    SecKeychainItemRef itemRef,
    ffi.Pointer<SecKeychainAttributeList> attrList,
    int length,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _SecKeychainItemModifyAttributesAndData(
      itemRef,
      attrList,
      length,
      data,
    );
  }

  late final _SecKeychainItemModifyAttributesAndDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeychainItemRef,
                  ffi.Pointer<SecKeychainAttributeList>,
                  UInt32,
                  ffi.Pointer<ffi.Void>)>>(
      'SecKeychainItemModifyAttributesAndData');
  late final _SecKeychainItemModifyAttributesAndData =
      _SecKeychainItemModifyAttributesAndDataPtr.asFunction<
          int Function(
              SecKeychainItemRef,
              ffi.Pointer<SecKeychainAttributeList>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// Creates a new keychain item from the supplied parameters.
  int SecKeychainItemCreateFromContent(
    int itemClass,
    ffi.Pointer<SecKeychainAttributeList> attrList,
    int length,
    ffi.Pointer<ffi.Void> data,
    SecKeychainRef keychainRef,
    SecAccessRef initialAccess,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainItemCreateFromContent(
      itemClass,
      attrList,
      length,
      data,
      keychainRef,
      initialAccess,
      itemRef,
    );
  }

  late final _SecKeychainItemCreateFromContentPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecItemClass,
                  ffi.Pointer<SecKeychainAttributeList>,
                  UInt32,
                  ffi.Pointer<ffi.Void>,
                  SecKeychainRef,
                  SecAccessRef,
                  ffi.Pointer<SecKeychainItemRef>)>>(
      'SecKeychainItemCreateFromContent');
  late final _SecKeychainItemCreateFromContent =
      _SecKeychainItemCreateFromContentPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<SecKeychainAttributeList>,
              int,
              ffi.Pointer<ffi.Void>,
              SecKeychainRef,
              SecAccessRef,
              ffi.Pointer<SecKeychainItemRef>)>();

  /// Updates an existing keychain item after changing its attributes or data.
  /// This call should only be used in conjunction with
  /// SecKeychainItemCopyContent().
  int SecKeychainItemModifyContent(
    SecKeychainItemRef itemRef,
    ffi.Pointer<SecKeychainAttributeList> attrList,
    int length,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _SecKeychainItemModifyContent(
      itemRef,
      attrList,
      length,
      data,
    );
  }

  late final _SecKeychainItemModifyContentPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecKeychainItemRef,
              ffi.Pointer<SecKeychainAttributeList>,
              UInt32,
              ffi.Pointer<ffi.Void>)>>('SecKeychainItemModifyContent');
  late final _SecKeychainItemModifyContent =
      _SecKeychainItemModifyContentPtr.asFunction<
          int Function(
              SecKeychainItemRef,
              ffi.Pointer<SecKeychainAttributeList>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// Copies the data and/or attributes stored in the given keychain item. It is
  /// recommended that you use SecKeychainItemCopyAttributesAndData(). You must
  /// call SecKeychainItemFreeContent when you no longer need the attributes and
  /// data. If you want to modify the attributes returned here, use
  /// SecKeychainModifyContent().
  int SecKeychainItemCopyContent(
    SecKeychainItemRef itemRef,
    ffi.Pointer<SecItemClass> itemClass,
    ffi.Pointer<SecKeychainAttributeList> attrList,
    ffi.Pointer<UInt32> length,
    ffi.Pointer<ffi.Pointer<ffi.Void>> outData,
  ) {
    return _SecKeychainItemCopyContent(
      itemRef,
      itemClass,
      attrList,
      length,
      outData,
    );
  }

  late final _SecKeychainItemCopyContentPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeychainItemRef,
                  ffi.Pointer<SecItemClass>,
                  ffi.Pointer<SecKeychainAttributeList>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'SecKeychainItemCopyContent');
  late final _SecKeychainItemCopyContent =
      _SecKeychainItemCopyContentPtr.asFunction<
          int Function(
              SecKeychainItemRef,
              ffi.Pointer<SecItemClass>,
              ffi.Pointer<SecKeychainAttributeList>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Releases the memory used by the keychain attribute list and the keychain
  /// data retrieved in a previous call to SecKeychainItemCopyContent.
  int SecKeychainItemFreeContent(
    ffi.Pointer<SecKeychainAttributeList> attrList,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _SecKeychainItemFreeContent(
      attrList,
      data,
    );
  }

  late final _SecKeychainItemFreeContentPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(ffi.Pointer<SecKeychainAttributeList>,
              ffi.Pointer<ffi.Void>)>>('SecKeychainItemFreeContent');
  late final _SecKeychainItemFreeContent =
      _SecKeychainItemFreeContentPtr.asFunction<
          int Function(
              ffi.Pointer<SecKeychainAttributeList>, ffi.Pointer<ffi.Void>)>();

  /// Copies the data and/or attributes stored in the given keychain item. You
  /// must call SecKeychainItemFreeAttributesAndData when you no longer need the
  /// attributes and data. If you want to modify the attributes returned here,
  /// use SecKeychainModifyAttributesAndData.
  int SecKeychainItemCopyAttributesAndData(
    SecKeychainItemRef itemRef,
    ffi.Pointer<SecKeychainAttributeInfo> info,
    ffi.Pointer<SecItemClass> itemClass,
    ffi.Pointer<ffi.Pointer<SecKeychainAttributeList>> attrList,
    ffi.Pointer<UInt32> length,
    ffi.Pointer<ffi.Pointer<ffi.Void>> outData,
  ) {
    return _SecKeychainItemCopyAttributesAndData(
      itemRef,
      info,
      itemClass,
      attrList,
      length,
      outData,
    );
  }

  late final _SecKeychainItemCopyAttributesAndDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeychainItemRef,
                  ffi.Pointer<SecKeychainAttributeInfo>,
                  ffi.Pointer<SecItemClass>,
                  ffi.Pointer<ffi.Pointer<SecKeychainAttributeList>>,
                  ffi.Pointer<UInt32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'SecKeychainItemCopyAttributesAndData');
  late final _SecKeychainItemCopyAttributesAndData =
      _SecKeychainItemCopyAttributesAndDataPtr.asFunction<
          int Function(
              SecKeychainItemRef,
              ffi.Pointer<SecKeychainAttributeInfo>,
              ffi.Pointer<SecItemClass>,
              ffi.Pointer<ffi.Pointer<SecKeychainAttributeList>>,
              ffi.Pointer<UInt32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Releases the memory used by the keychain attribute list and the keychain
  /// data retrieved in a previous call to SecKeychainItemCopyAttributesAndData.
  int SecKeychainItemFreeAttributesAndData(
    ffi.Pointer<SecKeychainAttributeList> attrList,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _SecKeychainItemFreeAttributesAndData(
      attrList,
      data,
    );
  }

  late final _SecKeychainItemFreeAttributesAndDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(ffi.Pointer<SecKeychainAttributeList>,
              ffi.Pointer<ffi.Void>)>>('SecKeychainItemFreeAttributesAndData');
  late final _SecKeychainItemFreeAttributesAndData =
      _SecKeychainItemFreeAttributesAndDataPtr.asFunction<
          int Function(
              ffi.Pointer<SecKeychainAttributeList>, ffi.Pointer<ffi.Void>)>();

  /// Deletes a keychain item from the default keychain's permanent data store.
  int SecKeychainItemDelete(
    SecKeychainItemRef itemRef,
  ) {
    return _SecKeychainItemDelete(
      itemRef,
    );
  }

  late final _SecKeychainItemDeletePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecKeychainItemRef)>>(
          'SecKeychainItemDelete');
  late final _SecKeychainItemDelete =
      _SecKeychainItemDeletePtr.asFunction<int Function(SecKeychainItemRef)>();

  /// Copies an existing keychain reference from a keychain item.
  int SecKeychainItemCopyKeychain(
    SecKeychainItemRef itemRef,
    ffi.Pointer<SecKeychainRef> keychainRef,
  ) {
    return _SecKeychainItemCopyKeychain(
      itemRef,
      keychainRef,
    );
  }

  late final _SecKeychainItemCopyKeychainPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainItemRef,
              ffi.Pointer<SecKeychainRef>)>>('SecKeychainItemCopyKeychain');
  late final _SecKeychainItemCopyKeychain =
      _SecKeychainItemCopyKeychainPtr.asFunction<
          int Function(SecKeychainItemRef, ffi.Pointer<SecKeychainRef>)>();

  /// Copies a keychain item.
  int SecKeychainItemCreateCopy(
    SecKeychainItemRef itemRef,
    SecKeychainRef destKeychainRef,
    SecAccessRef initialAccess,
    ffi.Pointer<SecKeychainItemRef> itemCopy,
  ) {
    return _SecKeychainItemCreateCopy(
      itemRef,
      destKeychainRef,
      initialAccess,
      itemCopy,
    );
  }

  late final _SecKeychainItemCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainItemRef, SecKeychainRef, SecAccessRef,
              ffi.Pointer<SecKeychainItemRef>)>>('SecKeychainItemCreateCopy');
  late final _SecKeychainItemCreateCopy =
      _SecKeychainItemCreateCopyPtr.asFunction<
          int Function(SecKeychainItemRef, SecKeychainRef, SecAccessRef,
              ffi.Pointer<SecKeychainItemRef>)>();

  /// Returns a CFDataRef which can be used as a persistent reference to the
  /// given keychain item. The data obtained can be turned back into a
  /// SecKeychainItemRef later by calling
  /// SecKeychainItemCopyFromPersistentReference().
  int SecKeychainItemCreatePersistentReference(
    SecKeychainItemRef itemRef,
    ffi.Pointer<coreFoundation.CFDataRef> persistentItemRef,
  ) {
    return _SecKeychainItemCreatePersistentReference(
      itemRef,
      persistentItemRef,
    );
  }

  late final _SecKeychainItemCreatePersistentReferencePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecKeychainItemRef, ffi.Pointer<coreFoundation.CFDataRef>)>>(
      'SecKeychainItemCreatePersistentReference');
  late final _SecKeychainItemCreatePersistentReference =
      _SecKeychainItemCreatePersistentReferencePtr.asFunction<
          int Function(
              SecKeychainItemRef, ffi.Pointer<coreFoundation.CFDataRef>)>();

  /// Returns a SecKeychainItemRef, given a persistent reference previously
  /// obtained by calling SecKeychainItemCreatePersistentReference().
  int SecKeychainItemCopyFromPersistentReference(
    coreFoundation.CFDataRef persistentItemRef,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainItemCopyFromPersistentReference(
      persistentItemRef,
      itemRef,
    );
  }

  late final _SecKeychainItemCopyFromPersistentReferencePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFDataRef, ffi.Pointer<SecKeychainItemRef>)>>(
      'SecKeychainItemCopyFromPersistentReference');
  late final _SecKeychainItemCopyFromPersistentReference =
      _SecKeychainItemCopyFromPersistentReferencePtr.asFunction<
          int Function(
              coreFoundation.CFDataRef, ffi.Pointer<SecKeychainItemRef>)>();

  /// Returns the CSSM_DL_DB_HANDLE for a given keychain item reference.
  int SecKeychainItemGetDLDBHandle(
    SecKeychainItemRef keyItemRef,
    ffi.Pointer<CSSM_DL_DB_HANDLE> dldbHandle,
  ) {
    return _SecKeychainItemGetDLDBHandle(
      keyItemRef,
      dldbHandle,
    );
  }

  late final _SecKeychainItemGetDLDBHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainItemRef,
              ffi.Pointer<CSSM_DL_DB_HANDLE>)>>('SecKeychainItemGetDLDBHandle');
  late final _SecKeychainItemGetDLDBHandle =
      _SecKeychainItemGetDLDBHandlePtr.asFunction<
          int Function(SecKeychainItemRef, ffi.Pointer<CSSM_DL_DB_HANDLE>)>();

  /// Returns a CSSM_DB_UNIQUE_RECORD for the given keychain item reference.
  int SecKeychainItemGetUniqueRecordID(
    SecKeychainItemRef itemRef,
    ffi.Pointer<ffi.Pointer<CSSM_DB_UNIQUE_RECORD>> uniqueRecordID,
  ) {
    return _SecKeychainItemGetUniqueRecordID(
      itemRef,
      uniqueRecordID,
    );
  }

  late final _SecKeychainItemGetUniqueRecordIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecKeychainItemRef,
                  ffi.Pointer<ffi.Pointer<CSSM_DB_UNIQUE_RECORD>>)>>(
      'SecKeychainItemGetUniqueRecordID');
  late final _SecKeychainItemGetUniqueRecordID =
      _SecKeychainItemGetUniqueRecordIDPtr.asFunction<
          int Function(SecKeychainItemRef,
              ffi.Pointer<ffi.Pointer<CSSM_DB_UNIQUE_RECORD>>)>();

  /// Copies the access of a given keychain item.
  int SecKeychainItemCopyAccess(
    SecKeychainItemRef itemRef,
    ffi.Pointer<SecAccessRef> access,
  ) {
    return _SecKeychainItemCopyAccess(
      itemRef,
      access,
    );
  }

  late final _SecKeychainItemCopyAccessPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainItemRef,
              ffi.Pointer<SecAccessRef>)>>('SecKeychainItemCopyAccess');
  late final _SecKeychainItemCopyAccess =
      _SecKeychainItemCopyAccessPtr.asFunction<
          int Function(SecKeychainItemRef, ffi.Pointer<SecAccessRef>)>();

  /// Sets the access of a given keychain item.
  int SecKeychainItemSetAccess(
    SecKeychainItemRef itemRef,
    SecAccessRef access,
  ) {
    return _SecKeychainItemSetAccess(
      itemRef,
      access,
    );
  }

  late final _SecKeychainItemSetAccessPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecKeychainItemRef, SecAccessRef)>>('SecKeychainItemSetAccess');
  late final _SecKeychainItemSetAccess = _SecKeychainItemSetAccessPtr
      .asFunction<int Function(SecKeychainItemRef, SecAccessRef)>();

  /// Returns the type identifier of SecKeychainSearch instances.
  int SecKeychainSearchGetTypeID() {
    return _SecKeychainSearchGetTypeID();
  }

  late final _SecKeychainSearchGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecKeychainSearchGetTypeID');
  late final _SecKeychainSearchGetTypeID =
      _SecKeychainSearchGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a search reference matching a list of zero or more specified
  /// attributes in the specified keychain.
  int SecKeychainSearchCreateFromAttributes(
    coreFoundation.CFTypeRef keychainOrArray,
    int itemClass,
    ffi.Pointer<SecKeychainAttributeList> attrList,
    ffi.Pointer<SecKeychainSearchRef> searchRef,
  ) {
    return _SecKeychainSearchCreateFromAttributes(
      keychainOrArray,
      itemClass,
      attrList,
      searchRef,
    );
  }

  late final _SecKeychainSearchCreateFromAttributesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFTypeRef,
                  SecItemClass,
                  ffi.Pointer<SecKeychainAttributeList>,
                  ffi.Pointer<SecKeychainSearchRef>)>>(
      'SecKeychainSearchCreateFromAttributes');
  late final _SecKeychainSearchCreateFromAttributes =
      _SecKeychainSearchCreateFromAttributesPtr.asFunction<
          int Function(
              coreFoundation.CFTypeRef,
              int,
              ffi.Pointer<SecKeychainAttributeList>,
              ffi.Pointer<SecKeychainSearchRef>)>();

  /// Finds the next keychain item matching the given search criteria.
  int SecKeychainSearchCopyNext(
    SecKeychainSearchRef searchRef,
    ffi.Pointer<SecKeychainItemRef> itemRef,
  ) {
    return _SecKeychainSearchCopyNext(
      searchRef,
      itemRef,
    );
  }

  late final _SecKeychainSearchCopyNextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecKeychainSearchRef,
              ffi.Pointer<SecKeychainItemRef>)>>('SecKeychainSearchCopyNext');
  late final _SecKeychainSearchCopyNext =
      _SecKeychainSearchCopyNextPtr.asFunction<
          int Function(
              SecKeychainSearchRef, ffi.Pointer<SecKeychainItemRef>)>();

  /// Returns the type identifier of SecPolicySearch instances.
  int SecPolicySearchGetTypeID() {
    return _SecPolicySearchGetTypeID();
  }

  late final _SecPolicySearchGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecPolicySearchGetTypeID');
  late final _SecPolicySearchGetTypeID =
      _SecPolicySearchGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a search reference for finding a policy by specifying its object
  /// identifier.
  int SecPolicySearchCreate(
    int certType,
    ffi.Pointer<SecAsn1Oid> policyOID,
    ffi.Pointer<SecAsn1Item> value,
    ffi.Pointer<SecPolicySearchRef> searchRef,
  ) {
    return _SecPolicySearchCreate(
      certType,
      policyOID,
      value,
      searchRef,
    );
  }

  late final _SecPolicySearchCreatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              CSSM_CERT_TYPE,
              ffi.Pointer<SecAsn1Oid>,
              ffi.Pointer<SecAsn1Item>,
              ffi.Pointer<SecPolicySearchRef>)>>('SecPolicySearchCreate');
  late final _SecPolicySearchCreate = _SecPolicySearchCreatePtr.asFunction<
      int Function(int, ffi.Pointer<SecAsn1Oid>, ffi.Pointer<SecAsn1Item>,
          ffi.Pointer<SecPolicySearchRef>)>();

  /// Finds the next policy matching the given search criteria
  int SecPolicySearchCopyNext(
    SecPolicySearchRef searchRef,
    ffi.Pointer<SecPolicyRef> policyRef,
  ) {
    return _SecPolicySearchCopyNext(
      searchRef,
      policyRef,
    );
  }

  late final _SecPolicySearchCopyNextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecPolicySearchRef,
              ffi.Pointer<SecPolicyRef>)>>('SecPolicySearchCopyNext');
  late final _SecPolicySearchCopyNext = _SecPolicySearchCopyNextPtr.asFunction<
      int Function(SecPolicySearchRef, ffi.Pointer<SecPolicyRef>)>();

  /// Returns the type identifier of SecTrustedApplication instances.
  int SecTrustedApplicationGetTypeID() {
    return _SecTrustedApplicationGetTypeID();
  }

  late final _SecTrustedApplicationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecTrustedApplicationGetTypeID');
  late final _SecTrustedApplicationGetTypeID =
      _SecTrustedApplicationGetTypeIDPtr.asFunction<int Function()>();

  /// Creates a trusted application reference based on the trusted application
  /// specified by path.
  int SecTrustedApplicationCreateFromPath(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<SecTrustedApplicationRef> app,
  ) {
    return _SecTrustedApplicationCreateFromPath(
      path,
      app,
    );
  }

  late final _SecTrustedApplicationCreateFromPathPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(ffi.Pointer<ffi.Char>,
                  ffi.Pointer<SecTrustedApplicationRef>)>>(
      'SecTrustedApplicationCreateFromPath');
  late final _SecTrustedApplicationCreateFromPath =
      _SecTrustedApplicationCreateFromPathPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<SecTrustedApplicationRef>)>();

  /// Retrieves the data of a given trusted application reference
  int SecTrustedApplicationCopyData(
    SecTrustedApplicationRef appRef,
    ffi.Pointer<coreFoundation.CFDataRef> data,
  ) {
    return _SecTrustedApplicationCopyData(
      appRef,
      data,
    );
  }

  late final _SecTrustedApplicationCopyDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustedApplicationRef,
                  ffi.Pointer<coreFoundation.CFDataRef>)>>(
      'SecTrustedApplicationCopyData');
  late final _SecTrustedApplicationCopyData =
      _SecTrustedApplicationCopyDataPtr.asFunction<
          int Function(SecTrustedApplicationRef,
              ffi.Pointer<coreFoundation.CFDataRef>)>();

  /// Sets the data of a given trusted application reference
  int SecTrustedApplicationSetData(
    SecTrustedApplicationRef appRef,
    coreFoundation.CFDataRef data,
  ) {
    return _SecTrustedApplicationSetData(
      appRef,
      data,
    );
  }

  late final _SecTrustedApplicationSetDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustedApplicationRef,
              coreFoundation.CFDataRef)>>('SecTrustedApplicationSetData');
  late final _SecTrustedApplicationSetData =
      _SecTrustedApplicationSetDataPtr.asFunction<
          int Function(SecTrustedApplicationRef, coreFoundation.CFDataRef)>();

  int SecTrustSettingsCopyTrustSettings(
    SecCertificateRef certRef,
    int domain,
    ffi.Pointer<coreFoundation.CFArrayRef> trustSettings,
  ) {
    return _SecTrustSettingsCopyTrustSettings(
      certRef,
      domain,
      trustSettings,
    );
  }

  late final _SecTrustSettingsCopyTrustSettingsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef, SecTrustSettingsDomain,
                  ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecTrustSettingsCopyTrustSettings');
  late final _SecTrustSettingsCopyTrustSettings =
      _SecTrustSettingsCopyTrustSettingsPtr.asFunction<
          int Function(SecCertificateRef, int,
              ffi.Pointer<coreFoundation.CFArrayRef>)>();

  int SecTrustSettingsSetTrustSettings(
    SecCertificateRef certRef,
    int domain,
    coreFoundation.CFTypeRef trustSettingsDictOrArray,
  ) {
    return _SecTrustSettingsSetTrustSettings(
      certRef,
      domain,
      trustSettingsDictOrArray,
    );
  }

  late final _SecTrustSettingsSetTrustSettingsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, SecTrustSettingsDomain,
              coreFoundation.CFTypeRef)>>('SecTrustSettingsSetTrustSettings');
  late final _SecTrustSettingsSetTrustSettings =
      _SecTrustSettingsSetTrustSettingsPtr.asFunction<
          int Function(SecCertificateRef, int, coreFoundation.CFTypeRef)>();

  int SecTrustSettingsRemoveTrustSettings(
    SecCertificateRef certRef,
    int domain,
  ) {
    return _SecTrustSettingsRemoveTrustSettings(
      certRef,
      domain,
    );
  }

  late final _SecTrustSettingsRemoveTrustSettingsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecTrustSettingsDomain)>>('SecTrustSettingsRemoveTrustSettings');
  late final _SecTrustSettingsRemoveTrustSettings =
      _SecTrustSettingsRemoveTrustSettingsPtr.asFunction<
          int Function(SecCertificateRef, int)>();

  int SecTrustSettingsCopyCertificates(
    int domain,
    ffi.Pointer<coreFoundation.CFArrayRef> certArray,
  ) {
    return _SecTrustSettingsCopyCertificates(
      domain,
      certArray,
    );
  }

  late final _SecTrustSettingsCopyCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustSettingsDomain,
                  ffi.Pointer<coreFoundation.CFArrayRef>)>>(
      'SecTrustSettingsCopyCertificates');
  late final _SecTrustSettingsCopyCertificates =
      _SecTrustSettingsCopyCertificatesPtr.asFunction<
          int Function(int, ffi.Pointer<coreFoundation.CFArrayRef>)>();

  int SecTrustSettingsCopyModificationDate(
    SecCertificateRef certRef,
    int domain,
    ffi.Pointer<coreFoundation.CFDateRef> modificationDate,
  ) {
    return _SecTrustSettingsCopyModificationDate(
      certRef,
      domain,
      modificationDate,
    );
  }

  late final _SecTrustSettingsCopyModificationDatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef, SecTrustSettingsDomain,
                  ffi.Pointer<coreFoundation.CFDateRef>)>>(
      'SecTrustSettingsCopyModificationDate');
  late final _SecTrustSettingsCopyModificationDate =
      _SecTrustSettingsCopyModificationDatePtr.asFunction<
          int Function(
              SecCertificateRef, int, ffi.Pointer<coreFoundation.CFDateRef>)>();

  int SecTrustSettingsCreateExternalRepresentation(
    int domain,
    ffi.Pointer<coreFoundation.CFDataRef> trustSettings,
  ) {
    return _SecTrustSettingsCreateExternalRepresentation(
      domain,
      trustSettings,
    );
  }

  late final _SecTrustSettingsCreateExternalRepresentationPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustSettingsDomain,
                  ffi.Pointer<coreFoundation.CFDataRef>)>>(
      'SecTrustSettingsCreateExternalRepresentation');
  late final _SecTrustSettingsCreateExternalRepresentation =
      _SecTrustSettingsCreateExternalRepresentationPtr.asFunction<
          int Function(int, ffi.Pointer<coreFoundation.CFDataRef>)>();

  int SecTrustSettingsImportExternalRepresentation(
    int domain,
    coreFoundation.CFDataRef trustSettings,
  ) {
    return _SecTrustSettingsImportExternalRepresentation(
      domain,
      trustSettings,
    );
  }

  late final _SecTrustSettingsImportExternalRepresentationPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustSettingsDomain, coreFoundation.CFDataRef)>>(
      'SecTrustSettingsImportExternalRepresentation');
  late final _SecTrustSettingsImportExternalRepresentation =
      _SecTrustSettingsImportExternalRepresentationPtr.asFunction<
          int Function(int, coreFoundation.CFDataRef)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCFErrorArchitecture =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorArchitecture');

  coreFoundation.CFStringRef get kSecCFErrorArchitecture =>
      _kSecCFErrorArchitecture.value;

  set kSecCFErrorArchitecture(coreFoundation.CFStringRef value) =>
      _kSecCFErrorArchitecture.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCFErrorPattern =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorPattern');

  coreFoundation.CFStringRef get kSecCFErrorPattern =>
      _kSecCFErrorPattern.value;

  set kSecCFErrorPattern(coreFoundation.CFStringRef value) =>
      _kSecCFErrorPattern.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCFErrorResourceSeal =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorResourceSeal');

  coreFoundation.CFStringRef get kSecCFErrorResourceSeal =>
      _kSecCFErrorResourceSeal.value;

  set kSecCFErrorResourceSeal(coreFoundation.CFStringRef value) =>
      _kSecCFErrorResourceSeal.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCFErrorResourceAdded =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorResourceAdded');

  coreFoundation.CFStringRef get kSecCFErrorResourceAdded =>
      _kSecCFErrorResourceAdded.value;

  set kSecCFErrorResourceAdded(coreFoundation.CFStringRef value) =>
      _kSecCFErrorResourceAdded.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCFErrorResourceAltered =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorResourceAltered');

  coreFoundation.CFStringRef get kSecCFErrorResourceAltered =>
      _kSecCFErrorResourceAltered.value;

  set kSecCFErrorResourceAltered(coreFoundation.CFStringRef value) =>
      _kSecCFErrorResourceAltered.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCFErrorResourceMissing =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorResourceMissing');

  coreFoundation.CFStringRef get kSecCFErrorResourceMissing =>
      _kSecCFErrorResourceMissing.value;

  set kSecCFErrorResourceMissing(coreFoundation.CFStringRef value) =>
      _kSecCFErrorResourceMissing.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCFErrorResourceSideband =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorResourceSideband');

  coreFoundation.CFStringRef get kSecCFErrorResourceSideband =>
      _kSecCFErrorResourceSideband.value;

  set kSecCFErrorResourceSideband(coreFoundation.CFStringRef value) =>
      _kSecCFErrorResourceSideband.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCFErrorInfoPlist =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorInfoPlist');

  coreFoundation.CFStringRef get kSecCFErrorInfoPlist =>
      _kSecCFErrorInfoPlist.value;

  set kSecCFErrorInfoPlist(coreFoundation.CFStringRef value) =>
      _kSecCFErrorInfoPlist.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCFErrorGuestAttributes =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorGuestAttributes');

  coreFoundation.CFStringRef get kSecCFErrorGuestAttributes =>
      _kSecCFErrorGuestAttributes.value;

  set kSecCFErrorGuestAttributes(coreFoundation.CFStringRef value) =>
      _kSecCFErrorGuestAttributes.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCFErrorRequirementSyntax =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorRequirementSyntax');

  coreFoundation.CFStringRef get kSecCFErrorRequirementSyntax =>
      _kSecCFErrorRequirementSyntax.value;

  set kSecCFErrorRequirementSyntax(coreFoundation.CFStringRef value) =>
      _kSecCFErrorRequirementSyntax.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCFErrorPath =
      _lookup<coreFoundation.CFStringRef>('kSecCFErrorPath');

  coreFoundation.CFStringRef get kSecCFErrorPath => _kSecCFErrorPath.value;

  set kSecCFErrorPath(coreFoundation.CFStringRef value) =>
      _kSecCFErrorPath.value = value;

  /// Returns the type identifier of all SecStaticCode instances.
  int SecStaticCodeGetTypeID() {
    return _SecStaticCodeGetTypeID();
  }

  late final _SecStaticCodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecStaticCodeGetTypeID');
  late final _SecStaticCodeGetTypeID =
      _SecStaticCodeGetTypeIDPtr.asFunction<int Function()>();

  /// Given a path to a file system object, create a SecStaticCode object
  /// representing the code at that location, if possible. Such a SecStaticCode
  /// is not inherently linked to running code in the system.
  int SecStaticCodeCreateWithPath(
    coreFoundation.CFURLRef path,
    int flags,
    ffi.Pointer<SecStaticCodeRef> staticCode,
  ) {
    return _SecStaticCodeCreateWithPath(
      path,
      flags,
      staticCode,
    );
  }

  late final _SecStaticCodeCreateWithPathPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFURLRef, SecCSFlags,
              ffi.Pointer<SecStaticCodeRef>)>>('SecStaticCodeCreateWithPath');
  late final _SecStaticCodeCreateWithPath =
      _SecStaticCodeCreateWithPathPtr.asFunction<
          int Function(
              coreFoundation.CFURLRef, int, ffi.Pointer<SecStaticCodeRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeAttributeArchitecture =
      _lookup<coreFoundation.CFStringRef>('kSecCodeAttributeArchitecture');

  coreFoundation.CFStringRef get kSecCodeAttributeArchitecture =>
      _kSecCodeAttributeArchitecture.value;

  set kSecCodeAttributeArchitecture(coreFoundation.CFStringRef value) =>
      _kSecCodeAttributeArchitecture.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeAttributeSubarchitecture =
      _lookup<coreFoundation.CFStringRef>('kSecCodeAttributeSubarchitecture');

  coreFoundation.CFStringRef get kSecCodeAttributeSubarchitecture =>
      _kSecCodeAttributeSubarchitecture.value;

  set kSecCodeAttributeSubarchitecture(coreFoundation.CFStringRef value) =>
      _kSecCodeAttributeSubarchitecture.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeAttributeUniversalFileOffset =
      _lookup<coreFoundation.CFStringRef>(
          'kSecCodeAttributeUniversalFileOffset');

  coreFoundation.CFStringRef get kSecCodeAttributeUniversalFileOffset =>
      _kSecCodeAttributeUniversalFileOffset.value;

  set kSecCodeAttributeUniversalFileOffset(coreFoundation.CFStringRef value) =>
      _kSecCodeAttributeUniversalFileOffset.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeAttributeBundleVersion =
      _lookup<coreFoundation.CFStringRef>('kSecCodeAttributeBundleVersion');

  coreFoundation.CFStringRef get kSecCodeAttributeBundleVersion =>
      _kSecCodeAttributeBundleVersion.value;

  set kSecCodeAttributeBundleVersion(coreFoundation.CFStringRef value) =>
      _kSecCodeAttributeBundleVersion.value = value;

  /// Given a path to a file system object, create a SecStaticCode object
  /// representing the code at that location, if possible. Such a SecStaticCode
  /// is not inherently linked to running code in the system.
  int SecStaticCodeCreateWithPathAndAttributes(
    coreFoundation.CFURLRef path,
    int flags,
    coreFoundation.CFDictionaryRef attributes,
    ffi.Pointer<SecStaticCodeRef> staticCode,
  ) {
    return _SecStaticCodeCreateWithPathAndAttributes(
      path,
      flags,
      attributes,
      staticCode,
    );
  }

  late final _SecStaticCodeCreateWithPathAndAttributesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFURLRef,
                  SecCSFlags,
                  coreFoundation.CFDictionaryRef,
                  ffi.Pointer<SecStaticCodeRef>)>>(
      'SecStaticCodeCreateWithPathAndAttributes');
  late final _SecStaticCodeCreateWithPathAndAttributes =
      _SecStaticCodeCreateWithPathAndAttributesPtr.asFunction<
          int Function(coreFoundation.CFURLRef, int,
              coreFoundation.CFDictionaryRef, ffi.Pointer<SecStaticCodeRef>)>();

  int SecStaticCodeCheckValidity(
    SecStaticCodeRef staticCode,
    int flags,
    SecRequirementRef requirement,
  ) {
    return _SecStaticCodeCheckValidity(
      staticCode,
      flags,
      requirement,
    );
  }

  late final _SecStaticCodeCheckValidityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecStaticCodeRef, SecCSFlags,
              SecRequirementRef)>>('SecStaticCodeCheckValidity');
  late final _SecStaticCodeCheckValidity = _SecStaticCodeCheckValidityPtr
      .asFunction<int Function(SecStaticCodeRef, int, SecRequirementRef)>();

  int SecStaticCodeCheckValidityWithErrors(
    SecStaticCodeRef staticCode,
    int flags,
    SecRequirementRef requirement,
    ffi.Pointer<coreFoundation.CFErrorRef> errors,
  ) {
    return _SecStaticCodeCheckValidityWithErrors(
      staticCode,
      flags,
      requirement,
      errors,
    );
  }

  late final _SecStaticCodeCheckValidityWithErrorsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecStaticCodeRef, SecCSFlags, SecRequirementRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecStaticCodeCheckValidityWithErrors');
  late final _SecStaticCodeCheckValidityWithErrors =
      _SecStaticCodeCheckValidityWithErrorsPtr.asFunction<
          int Function(SecStaticCodeRef, int, SecRequirementRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns the type identifier of all SecCode instances.
  int SecCodeGetTypeID() {
    return _SecCodeGetTypeID();
  }

  late final _SecCodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecCodeGetTypeID');
  late final _SecCodeGetTypeID =
      _SecCodeGetTypeIDPtr.asFunction<int Function()>();

  /// Obtains a SecCode object for the code making the call. The calling code is
  /// determined in a way that is subject to modification over time, but obeys
  /// the following rules. If it is a UNIX process, its process id (pid) is
  /// always used.
  int SecCodeCopySelf(
    int flags,
    ffi.Pointer<SecCodeRef> self,
  ) {
    return _SecCodeCopySelf(
      flags,
      self,
    );
  }

  late final _SecCodeCopySelfPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCSFlags, ffi.Pointer<SecCodeRef>)>>('SecCodeCopySelf');
  late final _SecCodeCopySelf = _SecCodeCopySelfPtr.asFunction<
      int Function(int, ffi.Pointer<SecCodeRef>)>();

  int SecCodeCopyStaticCode(
    SecCodeRef code,
    int flags,
    ffi.Pointer<SecStaticCodeRef> staticCode,
  ) {
    return _SecCodeCopyStaticCode(
      code,
      flags,
      staticCode,
    );
  }

  late final _SecCodeCopyStaticCodePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCodeRef, SecCSFlags,
              ffi.Pointer<SecStaticCodeRef>)>>('SecCodeCopyStaticCode');
  late final _SecCodeCopyStaticCode = _SecCodeCopyStaticCodePtr.asFunction<
      int Function(SecCodeRef, int, ffi.Pointer<SecStaticCodeRef>)>();

  /// Given a SecCode object, identify the (different) SecCode object that acts
  /// as its host. A SecCode's host acts as a supervisor and controller, and is
  /// the ultimate authority on the its dynamic validity and status. The host
  /// relationship is securely established (absent reported errors).
  int SecCodeCopyHost(
    SecCodeRef guest,
    int flags,
    ffi.Pointer<SecCodeRef> host,
  ) {
    return _SecCodeCopyHost(
      guest,
      flags,
      host,
    );
  }

  late final _SecCodeCopyHostPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCodeRef, SecCSFlags,
              ffi.Pointer<SecCodeRef>)>>('SecCodeCopyHost');
  late final _SecCodeCopyHost = _SecCodeCopyHostPtr.asFunction<
      int Function(SecCodeRef, int, ffi.Pointer<SecCodeRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecGuestAttributeCanonical =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeCanonical');

  coreFoundation.CFStringRef get kSecGuestAttributeCanonical =>
      _kSecGuestAttributeCanonical.value;

  set kSecGuestAttributeCanonical(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeCanonical.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecGuestAttributeHash =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeHash');

  coreFoundation.CFStringRef get kSecGuestAttributeHash =>
      _kSecGuestAttributeHash.value;

  set kSecGuestAttributeHash(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeHash.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecGuestAttributeMachPort =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeMachPort');

  coreFoundation.CFStringRef get kSecGuestAttributeMachPort =>
      _kSecGuestAttributeMachPort.value;

  set kSecGuestAttributeMachPort(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeMachPort.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecGuestAttributePid =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributePid');

  coreFoundation.CFStringRef get kSecGuestAttributePid =>
      _kSecGuestAttributePid.value;

  set kSecGuestAttributePid(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributePid.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecGuestAttributeAudit =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeAudit');

  coreFoundation.CFStringRef get kSecGuestAttributeAudit =>
      _kSecGuestAttributeAudit.value;

  set kSecGuestAttributeAudit(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeAudit.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecGuestAttributeDynamicCode =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeDynamicCode');

  coreFoundation.CFStringRef get kSecGuestAttributeDynamicCode =>
      _kSecGuestAttributeDynamicCode.value;

  set kSecGuestAttributeDynamicCode(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeDynamicCode.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecGuestAttributeDynamicCodeInfoPlist =
      _lookup<coreFoundation.CFStringRef>(
          'kSecGuestAttributeDynamicCodeInfoPlist');

  coreFoundation.CFStringRef get kSecGuestAttributeDynamicCodeInfoPlist =>
      _kSecGuestAttributeDynamicCodeInfoPlist.value;

  set kSecGuestAttributeDynamicCodeInfoPlist(
          coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeDynamicCodeInfoPlist.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecGuestAttributeArchitecture =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeArchitecture');

  coreFoundation.CFStringRef get kSecGuestAttributeArchitecture =>
      _kSecGuestAttributeArchitecture.value;

  set kSecGuestAttributeArchitecture(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeArchitecture.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecGuestAttributeSubarchitecture =
      _lookup<coreFoundation.CFStringRef>('kSecGuestAttributeSubarchitecture');

  coreFoundation.CFStringRef get kSecGuestAttributeSubarchitecture =>
      _kSecGuestAttributeSubarchitecture.value;

  set kSecGuestAttributeSubarchitecture(coreFoundation.CFStringRef value) =>
      _kSecGuestAttributeSubarchitecture.value = value;

  /// This is the omnibus API function for obtaining dynamic code references. In
  /// general, it asks a particular code acting as a code host to locate and
  /// return a guest with given attributes. Different hosts support different
  /// combinations of attributes and values for guest selection.
  int SecCodeCopyGuestWithAttributes(
    SecCodeRef host,
    coreFoundation.CFDictionaryRef attributes,
    int flags,
    ffi.Pointer<SecCodeRef> guest,
  ) {
    return _SecCodeCopyGuestWithAttributes(
      host,
      attributes,
      flags,
      guest,
    );
  }

  late final _SecCodeCopyGuestWithAttributesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCodeRef,
              coreFoundation.CFDictionaryRef,
              SecCSFlags,
              ffi.Pointer<SecCodeRef>)>>('SecCodeCopyGuestWithAttributes');
  late final _SecCodeCopyGuestWithAttributes =
      _SecCodeCopyGuestWithAttributesPtr.asFunction<
          int Function(SecCodeRef, coreFoundation.CFDictionaryRef, int,
              ffi.Pointer<SecCodeRef>)>();

  /// Creates a SecCode reference to the process that sent the provided XPC
  /// message, using the associated audit token.
  int SecCodeCreateWithXPCMessage(
    xpc_object_t message,
    int flags,
    ffi.Pointer<SecCodeRef> target,
  ) {
    return _SecCodeCreateWithXPCMessage(
      message,
      flags,
      target,
    );
  }

  late final _SecCodeCreateWithXPCMessagePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(xpc_object_t, SecCSFlags,
              ffi.Pointer<SecCodeRef>)>>('SecCodeCreateWithXPCMessage');
  late final _SecCodeCreateWithXPCMessage = _SecCodeCreateWithXPCMessagePtr
      .asFunction<int Function(xpc_object_t, int, ffi.Pointer<SecCodeRef>)>();

  /// Performs dynamic validation of the given SecCode object. The call obtains
  /// and verifies the signature on the code object. It checks the validity of
  /// only those sealed components required to establish identity. It checks the
  /// SecCode's dynamic validity status as reported by its host. It ensures that
  /// the SecCode's host is in turn valid. Finally, it validates the code
  /// against a SecRequirement if one is given. The call succeeds if all these
  /// conditions are satisfactory. It fails otherwise.
  int SecCodeCheckValidity(
    SecCodeRef code,
    int flags,
    SecRequirementRef requirement,
  ) {
    return _SecCodeCheckValidity(
      code,
      flags,
      requirement,
    );
  }

  late final _SecCodeCheckValidityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCodeRef, SecCSFlags,
              SecRequirementRef)>>('SecCodeCheckValidity');
  late final _SecCodeCheckValidity = _SecCodeCheckValidityPtr.asFunction<
      int Function(SecCodeRef, int, SecRequirementRef)>();

  /// Performs dynamic validation of the given SecCode object. The call obtains
  /// and verifies the signature on the code object. It checks the validity of
  /// only those sealed components required to establish identity. It checks the
  /// SecCode's dynamic validity status as reported by its host. It ensures that
  /// the SecCode's host is in turn valid. Finally, it validates the code
  /// against a SecRequirement if one is given. The call succeeds if all these
  /// conditions are satisfactory. It fails otherwise.
  int SecCodeCheckValidityWithErrors(
    SecCodeRef code,
    int flags,
    SecRequirementRef requirement,
    ffi.Pointer<coreFoundation.CFErrorRef> errors,
  ) {
    return _SecCodeCheckValidityWithErrors(
      code,
      flags,
      requirement,
      errors,
    );
  }

  late final _SecCodeCheckValidityWithErrorsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCodeRef, SecCSFlags, SecRequirementRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecCodeCheckValidityWithErrors');
  late final _SecCodeCheckValidityWithErrors =
      _SecCodeCheckValidityWithErrorsPtr.asFunction<
          int Function(SecCodeRef, int, SecRequirementRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// For a given Code or StaticCode object, returns a URL to a location on disk
  /// where the code object can be found. For single files, the URL points to
  /// that file. For bundles, it points to the directory containing the entire
  /// bundle.
  int SecCodeCopyPath(
    SecStaticCodeRef staticCode,
    int flags,
    ffi.Pointer<coreFoundation.CFURLRef> path,
  ) {
    return _SecCodeCopyPath(
      staticCode,
      flags,
      path,
    );
  }

  late final _SecCodeCopyPathPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecStaticCodeRef, SecCSFlags,
              ffi.Pointer<coreFoundation.CFURLRef>)>>('SecCodeCopyPath');
  late final _SecCodeCopyPath = _SecCodeCopyPathPtr.asFunction<
      int Function(
          SecStaticCodeRef, int, ffi.Pointer<coreFoundation.CFURLRef>)>();

  /// For a given Code or StaticCode object, determines its Designated Code
  /// Requirement. The Designated Requirement is the SecRequirement that the
  /// code believes should be used to properly identify it in the future.
  int SecCodeCopyDesignatedRequirement(
    SecStaticCodeRef code,
    int flags,
    ffi.Pointer<SecRequirementRef> requirement,
  ) {
    return _SecCodeCopyDesignatedRequirement(
      code,
      flags,
      requirement,
    );
  }

  late final _SecCodeCopyDesignatedRequirementPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecStaticCodeRef, SecCSFlags,
                  ffi.Pointer<SecRequirementRef>)>>(
      'SecCodeCopyDesignatedRequirement');
  late final _SecCodeCopyDesignatedRequirement =
      _SecCodeCopyDesignatedRequirementPtr.asFunction<
          int Function(
              SecStaticCodeRef, int, ffi.Pointer<SecRequirementRef>)>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoCertificates =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoCertificates');

  coreFoundation.CFStringRef get kSecCodeInfoCertificates =>
      _kSecCodeInfoCertificates.value;

  set kSecCodeInfoCertificates(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoCertificates.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoChangedFiles =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoChangedFiles');

  coreFoundation.CFStringRef get kSecCodeInfoChangedFiles =>
      _kSecCodeInfoChangedFiles.value;

  set kSecCodeInfoChangedFiles(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoChangedFiles.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoCMS =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoCMS');

  coreFoundation.CFStringRef get kSecCodeInfoCMS => _kSecCodeInfoCMS.value;

  set kSecCodeInfoCMS(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoCMS.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoDesignatedRequirement =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoDesignatedRequirement');

  coreFoundation.CFStringRef get kSecCodeInfoDesignatedRequirement =>
      _kSecCodeInfoDesignatedRequirement.value;

  set kSecCodeInfoDesignatedRequirement(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoDesignatedRequirement.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoEntitlements =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoEntitlements');

  coreFoundation.CFStringRef get kSecCodeInfoEntitlements =>
      _kSecCodeInfoEntitlements.value;

  set kSecCodeInfoEntitlements(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoEntitlements.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoEntitlementsDict =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoEntitlementsDict');

  coreFoundation.CFStringRef get kSecCodeInfoEntitlementsDict =>
      _kSecCodeInfoEntitlementsDict.value;

  set kSecCodeInfoEntitlementsDict(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoEntitlementsDict.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoFlags =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoFlags');

  coreFoundation.CFStringRef get kSecCodeInfoFlags => _kSecCodeInfoFlags.value;

  set kSecCodeInfoFlags(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoFlags.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoFormat =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoFormat');

  coreFoundation.CFStringRef get kSecCodeInfoFormat =>
      _kSecCodeInfoFormat.value;

  set kSecCodeInfoFormat(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoFormat.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoDigestAlgorithm =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoDigestAlgorithm');

  coreFoundation.CFStringRef get kSecCodeInfoDigestAlgorithm =>
      _kSecCodeInfoDigestAlgorithm.value;

  set kSecCodeInfoDigestAlgorithm(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoDigestAlgorithm.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoDigestAlgorithms =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoDigestAlgorithms');

  coreFoundation.CFStringRef get kSecCodeInfoDigestAlgorithms =>
      _kSecCodeInfoDigestAlgorithms.value;

  set kSecCodeInfoDigestAlgorithms(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoDigestAlgorithms.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoPlatformIdentifier =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoPlatformIdentifier');

  coreFoundation.CFStringRef get kSecCodeInfoPlatformIdentifier =>
      _kSecCodeInfoPlatformIdentifier.value;

  set kSecCodeInfoPlatformIdentifier(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoPlatformIdentifier.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoIdentifier =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoIdentifier');

  coreFoundation.CFStringRef get kSecCodeInfoIdentifier =>
      _kSecCodeInfoIdentifier.value;

  set kSecCodeInfoIdentifier(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoIdentifier.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoImplicitDesignatedRequirement =
      _lookup<coreFoundation.CFStringRef>(
          'kSecCodeInfoImplicitDesignatedRequirement');

  coreFoundation.CFStringRef get kSecCodeInfoImplicitDesignatedRequirement =>
      _kSecCodeInfoImplicitDesignatedRequirement.value;

  set kSecCodeInfoImplicitDesignatedRequirement(
          coreFoundation.CFStringRef value) =>
      _kSecCodeInfoImplicitDesignatedRequirement.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoMainExecutable =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoMainExecutable');

  coreFoundation.CFStringRef get kSecCodeInfoMainExecutable =>
      _kSecCodeInfoMainExecutable.value;

  set kSecCodeInfoMainExecutable(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoMainExecutable.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoPList =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoPList');

  coreFoundation.CFStringRef get kSecCodeInfoPList => _kSecCodeInfoPList.value;

  set kSecCodeInfoPList(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoPList.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoRequirements =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoRequirements');

  coreFoundation.CFStringRef get kSecCodeInfoRequirements =>
      _kSecCodeInfoRequirements.value;

  set kSecCodeInfoRequirements(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoRequirements.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoRequirementData =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoRequirementData');

  coreFoundation.CFStringRef get kSecCodeInfoRequirementData =>
      _kSecCodeInfoRequirementData.value;

  set kSecCodeInfoRequirementData(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoRequirementData.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoSource =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoSource');

  coreFoundation.CFStringRef get kSecCodeInfoSource =>
      _kSecCodeInfoSource.value;

  set kSecCodeInfoSource(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoSource.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoStatus =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoStatus');

  coreFoundation.CFStringRef get kSecCodeInfoStatus =>
      _kSecCodeInfoStatus.value;

  set kSecCodeInfoStatus(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoStatus.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoTeamIdentifier =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoTeamIdentifier');

  coreFoundation.CFStringRef get kSecCodeInfoTeamIdentifier =>
      _kSecCodeInfoTeamIdentifier.value;

  set kSecCodeInfoTeamIdentifier(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoTeamIdentifier.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoTime =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoTime');

  coreFoundation.CFStringRef get kSecCodeInfoTime => _kSecCodeInfoTime.value;

  set kSecCodeInfoTime(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoTime.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoTimestamp =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoTimestamp');

  coreFoundation.CFStringRef get kSecCodeInfoTimestamp =>
      _kSecCodeInfoTimestamp.value;

  set kSecCodeInfoTimestamp(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoTimestamp.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoTrust =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoTrust');

  coreFoundation.CFStringRef get kSecCodeInfoTrust => _kSecCodeInfoTrust.value;

  set kSecCodeInfoTrust(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoTrust.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoUnique =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoUnique');

  coreFoundation.CFStringRef get kSecCodeInfoUnique =>
      _kSecCodeInfoUnique.value;

  set kSecCodeInfoUnique(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoUnique.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCodeInfoCdHashes =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoCdHashes');

  coreFoundation.CFStringRef get kSecCodeInfoCdHashes =>
      _kSecCodeInfoCdHashes.value;

  set kSecCodeInfoCdHashes(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoCdHashes.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecCodeInfoRuntimeVersion =
      _lookup<coreFoundation.CFStringRef>('kSecCodeInfoRuntimeVersion');

  coreFoundation.CFStringRef get kSecCodeInfoRuntimeVersion =>
      _kSecCodeInfoRuntimeVersion.value;

  set kSecCodeInfoRuntimeVersion(coreFoundation.CFStringRef value) =>
      _kSecCodeInfoRuntimeVersion.value = value;

  int SecCodeCopySigningInformation(
    SecStaticCodeRef code,
    int flags,
    ffi.Pointer<coreFoundation.CFDictionaryRef> information,
  ) {
    return _SecCodeCopySigningInformation(
      code,
      flags,
      information,
    );
  }

  late final _SecCodeCopySigningInformationPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecStaticCodeRef, SecCSFlags,
                  ffi.Pointer<coreFoundation.CFDictionaryRef>)>>(
      'SecCodeCopySigningInformation');
  late final _SecCodeCopySigningInformation =
      _SecCodeCopySigningInformationPtr.asFunction<
          int Function(SecStaticCodeRef, int,
              ffi.Pointer<coreFoundation.CFDictionaryRef>)>();

  int SecCodeMapMemory(
    SecStaticCodeRef code,
    int flags,
  ) {
    return _SecCodeMapMemory(
      code,
      flags,
    );
  }

  late final _SecCodeMapMemoryPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SecStaticCodeRef, SecCSFlags)>>(
      'SecCodeMapMemory');
  late final _SecCodeMapMemory =
      _SecCodeMapMemoryPtr.asFunction<int Function(SecStaticCodeRef, int)>();

  int SecHostCreateGuest(
    int host,
    int status,
    coreFoundation.CFURLRef path,
    coreFoundation.CFDictionaryRef attributes,
    int flags,
    ffi.Pointer<SecGuestRef> newGuest,
  ) {
    return _SecHostCreateGuest(
      host,
      status,
      path,
      attributes,
      flags,
      newGuest,
    );
  }

  late final _SecHostCreateGuestPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecGuestRef,
              ffi.Uint32,
              coreFoundation.CFURLRef,
              coreFoundation.CFDictionaryRef,
              SecCSFlags,
              ffi.Pointer<SecGuestRef>)>>('SecHostCreateGuest');
  late final _SecHostCreateGuest = _SecHostCreateGuestPtr.asFunction<
      int Function(int, int, coreFoundation.CFURLRef,
          coreFoundation.CFDictionaryRef, int, ffi.Pointer<SecGuestRef>)>();

  int SecHostRemoveGuest(
    int host,
    int guest,
    int flags,
  ) {
    return _SecHostRemoveGuest(
      host,
      guest,
      flags,
    );
  }

  late final _SecHostRemoveGuestPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecGuestRef, SecGuestRef, SecCSFlags)>>('SecHostRemoveGuest');
  late final _SecHostRemoveGuest =
      _SecHostRemoveGuestPtr.asFunction<int Function(int, int, int)>();

  int SecHostSelectGuest(
    int guestRef,
    int flags,
  ) {
    return _SecHostSelectGuest(
      guestRef,
      flags,
    );
  }

  late final _SecHostSelectGuestPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecGuestRef, SecCSFlags)>>(
          'SecHostSelectGuest');
  late final _SecHostSelectGuest =
      _SecHostSelectGuestPtr.asFunction<int Function(int, int)>();

  int SecHostSelectedGuest(
    int flags,
    ffi.Pointer<SecGuestRef> guestRef,
  ) {
    return _SecHostSelectedGuest(
      flags,
      guestRef,
    );
  }

  late final _SecHostSelectedGuestPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCSFlags, ffi.Pointer<SecGuestRef>)>>('SecHostSelectedGuest');
  late final _SecHostSelectedGuest = _SecHostSelectedGuestPtr.asFunction<
      int Function(int, ffi.Pointer<SecGuestRef>)>();

  int SecHostSetGuestStatus(
    int guestRef,
    int status,
    coreFoundation.CFDictionaryRef attributes,
    int flags,
  ) {
    return _SecHostSetGuestStatus(
      guestRef,
      status,
      attributes,
      flags,
    );
  }

  late final _SecHostSetGuestStatusPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecGuestRef,
              ffi.Uint32,
              coreFoundation.CFDictionaryRef,
              SecCSFlags)>>('SecHostSetGuestStatus');
  late final _SecHostSetGuestStatus = _SecHostSetGuestStatusPtr.asFunction<
      int Function(int, int, coreFoundation.CFDictionaryRef, int)>();

  int SecHostSetHostingPort(
    int hostingPort,
    int flags,
  ) {
    return _SecHostSetHostingPort(
      hostingPort,
      flags,
    );
  }

  late final _SecHostSetHostingPortPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(mach_port_t, SecCSFlags)>>(
          'SecHostSetHostingPort');
  late final _SecHostSetHostingPort =
      _SecHostSetHostingPortPtr.asFunction<int Function(int, int)>();

  /// Returns the type identifier of all SecRequirement instances.
  int SecRequirementGetTypeID() {
    return _SecRequirementGetTypeID();
  }

  late final _SecRequirementGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecRequirementGetTypeID');
  late final _SecRequirementGetTypeID =
      _SecRequirementGetTypeIDPtr.asFunction<int Function()>();

  /// Create a SecRequirement object from binary form. This is the effective
  /// inverse of SecRequirementCopyData.
  int SecRequirementCreateWithData(
    coreFoundation.CFDataRef data,
    int flags,
    ffi.Pointer<SecRequirementRef> requirement,
  ) {
    return _SecRequirementCreateWithData(
      data,
      flags,
      requirement,
    );
  }

  late final _SecRequirementCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(coreFoundation.CFDataRef, SecCSFlags,
              ffi.Pointer<SecRequirementRef>)>>('SecRequirementCreateWithData');
  late final _SecRequirementCreateWithData =
      _SecRequirementCreateWithDataPtr.asFunction<
          int Function(
              coreFoundation.CFDataRef, int, ffi.Pointer<SecRequirementRef>)>();

  /// Create a SecRequirement object by compiling a valid text representation of
  /// a requirement.
  int SecRequirementCreateWithString(
    coreFoundation.CFStringRef text,
    int flags,
    ffi.Pointer<SecRequirementRef> requirement,
  ) {
    return _SecRequirementCreateWithString(
      text,
      flags,
      requirement,
    );
  }

  late final _SecRequirementCreateWithStringPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(coreFoundation.CFStringRef, SecCSFlags,
                  ffi.Pointer<SecRequirementRef>)>>(
      'SecRequirementCreateWithString');
  late final _SecRequirementCreateWithString =
      _SecRequirementCreateWithStringPtr.asFunction<
          int Function(coreFoundation.CFStringRef, int,
              ffi.Pointer<SecRequirementRef>)>();

  int SecRequirementCreateWithStringAndErrors(
    coreFoundation.CFStringRef text,
    int flags,
    ffi.Pointer<coreFoundation.CFErrorRef> errors,
    ffi.Pointer<SecRequirementRef> requirement,
  ) {
    return _SecRequirementCreateWithStringAndErrors(
      text,
      flags,
      errors,
      requirement,
    );
  }

  late final _SecRequirementCreateWithStringAndErrorsPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  coreFoundation.CFStringRef,
                  SecCSFlags,
                  ffi.Pointer<coreFoundation.CFErrorRef>,
                  ffi.Pointer<SecRequirementRef>)>>(
      'SecRequirementCreateWithStringAndErrors');
  late final _SecRequirementCreateWithStringAndErrors =
      _SecRequirementCreateWithStringAndErrorsPtr.asFunction<
          int Function(
              coreFoundation.CFStringRef,
              int,
              ffi.Pointer<coreFoundation.CFErrorRef>,
              ffi.Pointer<SecRequirementRef>)>();

  /// Extracts a stable, persistent binary form of a SecRequirement. This is the
  /// effective inverse of SecRequirementCreateWithData.
  int SecRequirementCopyData(
    SecRequirementRef requirement,
    int flags,
    ffi.Pointer<coreFoundation.CFDataRef> data,
  ) {
    return _SecRequirementCopyData(
      requirement,
      flags,
      data,
    );
  }

  late final _SecRequirementCopyDataPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecRequirementRef, SecCSFlags,
                  ffi.Pointer<coreFoundation.CFDataRef>)>>(
      'SecRequirementCopyData');
  late final _SecRequirementCopyData = _SecRequirementCopyDataPtr.asFunction<
      int Function(
          SecRequirementRef, int, ffi.Pointer<coreFoundation.CFDataRef>)>();

  /// Converts a SecRequirement object into text form. This is the effective
  /// inverse of SecRequirementCreateWithString.
  int SecRequirementCopyString(
    SecRequirementRef requirement,
    int flags,
    ffi.Pointer<coreFoundation.CFStringRef> text,
  ) {
    return _SecRequirementCopyString(
      requirement,
      flags,
      text,
    );
  }

  late final _SecRequirementCopyStringPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecRequirementRef, SecCSFlags,
                  ffi.Pointer<coreFoundation.CFStringRef>)>>(
      'SecRequirementCopyString');
  late final _SecRequirementCopyString =
      _SecRequirementCopyStringPtr.asFunction<
          int Function(SecRequirementRef, int,
              ffi.Pointer<coreFoundation.CFStringRef>)>();

  /// Returns the type ID for CF instances of SecTask.
  int SecTaskGetTypeID() {
    return _SecTaskGetTypeID();
  }

  late final _SecTaskGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecTaskGetTypeID');
  late final _SecTaskGetTypeID =
      _SecTaskGetTypeIDPtr.asFunction<int Function()>();

  /// Create a SecTask object for the task that sent the mach message
  /// represented by the audit token.
  SecTaskRef SecTaskCreateWithAuditToken(
    coreFoundation.CFAllocatorRef allocator,
    audit_token_t token,
  ) {
    return _SecTaskCreateWithAuditToken(
      allocator,
      token,
    );
  }

  late final _SecTaskCreateWithAuditTokenPtr = _lookup<
      ffi.NativeFunction<
          SecTaskRef Function(coreFoundation.CFAllocatorRef,
              audit_token_t)>>('SecTaskCreateWithAuditToken');
  late final _SecTaskCreateWithAuditToken =
      _SecTaskCreateWithAuditTokenPtr.asFunction<
          SecTaskRef Function(coreFoundation.CFAllocatorRef, audit_token_t)>();

  /// Create a SecTask object for the current task.
  SecTaskRef SecTaskCreateFromSelf(
    coreFoundation.CFAllocatorRef allocator,
  ) {
    return _SecTaskCreateFromSelf(
      allocator,
    );
  }

  late final _SecTaskCreateFromSelfPtr = _lookup<
      ffi.NativeFunction<
          SecTaskRef Function(
              coreFoundation.CFAllocatorRef)>>('SecTaskCreateFromSelf');
  late final _SecTaskCreateFromSelf = _SecTaskCreateFromSelfPtr.asFunction<
      SecTaskRef Function(coreFoundation.CFAllocatorRef)>();

  /// Returns the value of a single entitlement for the represented task.
  coreFoundation.CFTypeRef SecTaskCopyValueForEntitlement(
    SecTaskRef task,
    coreFoundation.CFStringRef entitlement,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTaskCopyValueForEntitlement(
      task,
      entitlement,
      error,
    );
  }

  late final _SecTaskCopyValueForEntitlementPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFTypeRef Function(
                  SecTaskRef,
                  coreFoundation.CFStringRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTaskCopyValueForEntitlement');
  late final _SecTaskCopyValueForEntitlement =
      _SecTaskCopyValueForEntitlementPtr.asFunction<
          coreFoundation.CFTypeRef Function(
              SecTaskRef,
              coreFoundation.CFStringRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns the values of multiple entitlements for the represented task.
  coreFoundation.CFDictionaryRef SecTaskCopyValuesForEntitlements(
    SecTaskRef task,
    coreFoundation.CFArrayRef entitlements,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTaskCopyValuesForEntitlements(
      task,
      entitlements,
      error,
    );
  }

  late final _SecTaskCopyValuesForEntitlementsPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFDictionaryRef Function(
                  SecTaskRef,
                  coreFoundation.CFArrayRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTaskCopyValuesForEntitlements');
  late final _SecTaskCopyValuesForEntitlements =
      _SecTaskCopyValuesForEntitlementsPtr.asFunction<
          coreFoundation.CFDictionaryRef Function(
              SecTaskRef,
              coreFoundation.CFArrayRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the value of the codesigning identifier.
  coreFoundation.CFStringRef SecTaskCopySigningIdentifier(
    SecTaskRef task,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTaskCopySigningIdentifier(
      task,
      error,
    );
  }

  late final _SecTaskCopySigningIdentifierPtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFStringRef Function(
                  SecTaskRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTaskCopySigningIdentifier');
  late final _SecTaskCopySigningIdentifier =
      _SecTaskCopySigningIdentifierPtr.asFunction<
          coreFoundation.CFStringRef Function(
              SecTaskRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the code sign status flags
  int SecTaskGetCodeSignStatus(
    SecTaskRef task,
  ) {
    return _SecTaskGetCodeSignStatus(
      task,
    );
  }

  late final _SecTaskGetCodeSignStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(SecTaskRef)>>(
          'SecTaskGetCodeSignStatus');
  late final _SecTaskGetCodeSignStatus =
      _SecTaskGetCodeSignStatusPtr.asFunction<int Function(SecTaskRef)>();

  /// The domain for CFErrorRefs created by Transforms
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecTransformErrorDomain =
      _lookup<coreFoundation.CFStringRef>('kSecTransformErrorDomain');

  coreFoundation.CFStringRef get kSecTransformErrorDomain =>
      _kSecTransformErrorDomain.value;

  set kSecTransformErrorDomain(coreFoundation.CFStringRef value) =>
      _kSecTransformErrorDomain.value = value;

  /// If multiple errors occurred, the CFErrorRef that is returned from a
  /// Transfo]rm API will have a userInfo dictionary and that dictionary will have
  /// the previous error keyed by the kSecTransformPreviousErrorKey.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformPreviousErrorKey =
      _lookup<coreFoundation.CFStringRef>('kSecTransformPreviousErrorKey');

  coreFoundation.CFStringRef get kSecTransformPreviousErrorKey =>
      _kSecTransformPreviousErrorKey.value;

  set kSecTransformPreviousErrorKey(coreFoundation.CFStringRef value) =>
      _kSecTransformPreviousErrorKey.value = value;

  /// The value of this key will be the transform that caused the transform chain
  /// to abort.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformAbortOriginatorKey =
      _lookup<coreFoundation.CFStringRef>('kSecTransformAbortOriginatorKey');

  coreFoundation.CFStringRef get kSecTransformAbortOriginatorKey =>
      _kSecTransformAbortOriginatorKey.value;

  set kSecTransformAbortOriginatorKey(coreFoundation.CFStringRef value) =>
      _kSecTransformAbortOriginatorKey.value = value;

  /// Return the CFTypeID for a SecTransform.
  int SecTransformGetTypeID() {
    return _SecTransformGetTypeID();
  }

  late final _SecTransformGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecTransformGetTypeID');
  late final _SecTransformGetTypeID =
      _SecTransformGetTypeIDPtr.asFunction<int Function()>();

  /// Return the CFTypeID for a SecTransformGroup.
  int SecGroupTransformGetTypeID() {
    return _SecGroupTransformGetTypeID();
  }

  late final _SecGroupTransformGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecGroupTransformGetTypeID');
  late final _SecGroupTransformGetTypeID =
      _SecGroupTransformGetTypeIDPtr.asFunction<int Function()>();

  /// ************** Transform Attribute Names ***************
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformInputAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecTransformInputAttributeName');

  coreFoundation.CFStringRef get kSecTransformInputAttributeName =>
      _kSecTransformInputAttributeName.value;

  set kSecTransformInputAttributeName(coreFoundation.CFStringRef value) =>
      _kSecTransformInputAttributeName.value = value;

  /// The name of the output attribute.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformOutputAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecTransformOutputAttributeName');

  coreFoundation.CFStringRef get kSecTransformOutputAttributeName =>
      _kSecTransformOutputAttributeName.value;

  set kSecTransformOutputAttributeName(coreFoundation.CFStringRef value) =>
      _kSecTransformOutputAttributeName.value = value;

  /// Set this attribute to a CFWriteStream. This will signal the transform to
  /// write debugging information to the stream. If this attribute is set to
  /// kCFBooleanTrue then the debugging data will be written out to stderr.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformDebugAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecTransformDebugAttributeName');

  coreFoundation.CFStringRef get kSecTransformDebugAttributeName =>
      _kSecTransformDebugAttributeName.value;

  set kSecTransformDebugAttributeName(coreFoundation.CFStringRef value) =>
      _kSecTransformDebugAttributeName.value = value;

  /// The name of the transform.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformTransformName =
      _lookup<coreFoundation.CFStringRef>('kSecTransformTransformName');

  coreFoundation.CFStringRef get kSecTransformTransformName =>
      _kSecTransformTransformName.value;

  set kSecTransformTransformName(coreFoundation.CFStringRef value) =>
      _kSecTransformTransformName.value = value;

  /// The name of the abort attribute.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformAbortAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecTransformAbortAttributeName');

  coreFoundation.CFStringRef get kSecTransformAbortAttributeName =>
      _kSecTransformAbortAttributeName.value;

  set kSecTransformAbortAttributeName(coreFoundation.CFStringRef value) =>
      _kSecTransformAbortAttributeName.value = value;

  /// Creates a transform instance from a CFDictionary of parameters.
  SecTransformRef SecTransformCreateFromExternalRepresentation(
    coreFoundation.CFDictionaryRef dictionary,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTransformCreateFromExternalRepresentation(
      dictionary,
      error,
    );
  }

  late final _SecTransformCreateFromExternalRepresentationPtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(coreFoundation.CFDictionaryRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTransformCreateFromExternalRepresentation');
  late final _SecTransformCreateFromExternalRepresentation =
      _SecTransformCreateFromExternalRepresentationPtr.asFunction<
          SecTransformRef Function(coreFoundation.CFDictionaryRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Create a CFDictionaryRef that contains enough information to be able to
  /// recreate a transform.
  coreFoundation.CFDictionaryRef SecTransformCopyExternalRepresentation(
    SecTransformRef transformRef,
  ) {
    return _SecTransformCopyExternalRepresentation(
      transformRef,
    );
  }

  late final _SecTransformCopyExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFDictionaryRef Function(
              SecTransformRef)>>('SecTransformCopyExternalRepresentation');
  late final _SecTransformCopyExternalRepresentation =
      _SecTransformCopyExternalRepresentationPtr.asFunction<
          coreFoundation.CFDictionaryRef Function(SecTransformRef)>();

  /// Create a SecGroupTransformRef that acts as a container for a set of
  /// connected transforms.
  SecGroupTransformRef SecTransformCreateGroupTransform() {
    return _SecTransformCreateGroupTransform();
  }

  late final _SecTransformCreateGroupTransformPtr =
      _lookup<ffi.NativeFunction<SecGroupTransformRef Function()>>(
          'SecTransformCreateGroupTransform');
  late final _SecTransformCreateGroupTransform =
      _SecTransformCreateGroupTransformPtr.asFunction<
          SecGroupTransformRef Function()>();

  /// Pipe fitting for transforms.
  SecGroupTransformRef SecTransformConnectTransforms(
    SecTransformRef sourceTransformRef,
    coreFoundation.CFStringRef sourceAttributeName,
    SecTransformRef destinationTransformRef,
    coreFoundation.CFStringRef destinationAttributeName,
    SecGroupTransformRef group,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTransformConnectTransforms(
      sourceTransformRef,
      sourceAttributeName,
      destinationTransformRef,
      destinationAttributeName,
      group,
      error,
    );
  }

  late final _SecTransformConnectTransformsPtr = _lookup<
          ffi.NativeFunction<
              SecGroupTransformRef Function(
                  SecTransformRef,
                  coreFoundation.CFStringRef,
                  SecTransformRef,
                  coreFoundation.CFStringRef,
                  SecGroupTransformRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTransformConnectTransforms');
  late final _SecTransformConnectTransforms =
      _SecTransformConnectTransformsPtr.asFunction<
          SecGroupTransformRef Function(
              SecTransformRef,
              coreFoundation.CFStringRef,
              SecTransformRef,
              coreFoundation.CFStringRef,
              SecGroupTransformRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Set a static value as the value of an attribute in a transform. This is
  /// useful for things like iteration counts and other non-changing values.
  int SecTransformSetAttribute(
    SecTransformRef transformRef,
    coreFoundation.CFStringRef key,
    coreFoundation.CFTypeRef value,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTransformSetAttribute(
      transformRef,
      key,
      value,
      error,
    );
  }

  late final _SecTransformSetAttributePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  SecTransformRef,
                  coreFoundation.CFStringRef,
                  coreFoundation.CFTypeRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecTransformSetAttribute');
  late final _SecTransformSetAttribute =
      _SecTransformSetAttributePtr.asFunction<
          int Function(
              SecTransformRef,
              coreFoundation.CFStringRef,
              coreFoundation.CFTypeRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Get the current value of a transform attribute.
  coreFoundation.CFTypeRef SecTransformGetAttribute(
    SecTransformRef transformRef,
    coreFoundation.CFStringRef key,
  ) {
    return _SecTransformGetAttribute(
      transformRef,
      key,
    );
  }

  late final _SecTransformGetAttributePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFTypeRef Function(SecTransformRef,
              coreFoundation.CFStringRef)>>('SecTransformGetAttribute');
  late final _SecTransformGetAttribute =
      _SecTransformGetAttributePtr.asFunction<
          coreFoundation.CFTypeRef Function(
              SecTransformRef, coreFoundation.CFStringRef)>();

  /// Finds a member of a transform group by its name.
  SecTransformRef SecTransformFindByName(
    SecGroupTransformRef transform,
    coreFoundation.CFStringRef name,
  ) {
    return _SecTransformFindByName(
      transform,
      name,
    );
  }

  late final _SecTransformFindByNamePtr = _lookup<
      ffi.NativeFunction<
          SecTransformRef Function(SecGroupTransformRef,
              coreFoundation.CFStringRef)>>('SecTransformFindByName');
  late final _SecTransformFindByName = _SecTransformFindByNamePtr.asFunction<
      SecTransformRef Function(
          SecGroupTransformRef, coreFoundation.CFStringRef)>();

  /// Executes a Transform or transform group synchronously.
  coreFoundation.CFTypeRef SecTransformExecute(
    SecTransformRef transformRef,
    ffi.Pointer<coreFoundation.CFErrorRef> errorRef,
  ) {
    return _SecTransformExecute(
      transformRef,
      errorRef,
    );
  }

  late final _SecTransformExecutePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFTypeRef Function(SecTransformRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>>('SecTransformExecute');
  late final _SecTransformExecute = _SecTransformExecutePtr.asFunction<
      coreFoundation.CFTypeRef Function(
          SecTransformRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Allow a custom transform to get an attribute value
  coreFoundation.CFTypeRef SecTranformCustomGetAttribute(
    SecTransformImplementationRef ref,
    SecTransformStringOrAttributeRef attribute,
    int type,
  ) {
    return _SecTranformCustomGetAttribute(
      ref,
      attribute,
      type,
    );
  }

  late final _SecTranformCustomGetAttributePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFTypeRef Function(
              SecTransformImplementationRef,
              SecTransformStringOrAttributeRef,
              SecTransformMetaAttributeType)>>('SecTranformCustomGetAttribute');
  late final _SecTranformCustomGetAttribute =
      _SecTranformCustomGetAttributePtr.asFunction<
          coreFoundation.CFTypeRef Function(SecTransformImplementationRef,
              SecTransformStringOrAttributeRef, int)>();

  /// Allow a custom transform to get an attribute value
  coreFoundation.CFTypeRef SecTransformCustomGetAttribute(
    SecTransformImplementationRef ref,
    SecTransformStringOrAttributeRef attribute,
    int type,
  ) {
    return _SecTransformCustomGetAttribute(
      ref,
      attribute,
      type,
    );
  }

  late final _SecTransformCustomGetAttributePtr = _lookup<
          ffi.NativeFunction<
              coreFoundation.CFTypeRef Function(
                  SecTransformImplementationRef,
                  SecTransformStringOrAttributeRef,
                  SecTransformMetaAttributeType)>>(
      'SecTransformCustomGetAttribute');
  late final _SecTransformCustomGetAttribute =
      _SecTransformCustomGetAttributePtr.asFunction<
          coreFoundation.CFTypeRef Function(SecTransformImplementationRef,
              SecTransformStringOrAttributeRef, int)>();

  /// Allow a custom transform to set an attribute value
  coreFoundation.CFTypeRef SecTransformCustomSetAttribute(
    SecTransformImplementationRef ref,
    SecTransformStringOrAttributeRef attribute,
    int type,
    coreFoundation.CFTypeRef value,
  ) {
    return _SecTransformCustomSetAttribute(
      ref,
      attribute,
      type,
      value,
    );
  }

  late final _SecTransformCustomSetAttributePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFTypeRef Function(
              SecTransformImplementationRef,
              SecTransformStringOrAttributeRef,
              SecTransformMetaAttributeType,
              coreFoundation.CFTypeRef)>>('SecTransformCustomSetAttribute');
  late final _SecTransformCustomSetAttribute =
      _SecTransformCustomSetAttributePtr.asFunction<
          coreFoundation.CFTypeRef Function(
              SecTransformImplementationRef,
              SecTransformStringOrAttributeRef,
              int,
              coreFoundation.CFTypeRef)>();

  /// Allows for putting a single value back for a specific attribute. This will
  /// stop the flow of data into the specified attribute until any attribute is
  /// changed for the transform instance bound to the ref parameter.
  coreFoundation.CFTypeRef SecTransformPushbackAttribute(
    SecTransformImplementationRef ref,
    SecTransformStringOrAttributeRef attribute,
    coreFoundation.CFTypeRef value,
  ) {
    return _SecTransformPushbackAttribute(
      ref,
      attribute,
      value,
    );
  }

  late final _SecTransformPushbackAttributePtr = _lookup<
      ffi.NativeFunction<
          coreFoundation.CFTypeRef Function(
              SecTransformImplementationRef,
              SecTransformStringOrAttributeRef,
              coreFoundation.CFTypeRef)>>('SecTransformPushbackAttribute');
  late final _SecTransformPushbackAttribute =
      _SecTransformPushbackAttributePtr.asFunction<
          coreFoundation.CFTypeRef Function(SecTransformImplementationRef,
              SecTransformStringOrAttributeRef, coreFoundation.CFTypeRef)>();

  /// Overrides the standard behavior that checks to see if all of the required
  /// attributes either have been set or are connected to another transform. When
  /// overriding the default behavior the developer can decided what the necessary
  /// data is to have for a transform to be considered 'ready to run'. Returning
  /// NULL means that the transform is ready to be run. If the transform is NOT
  /// ready to run then the override should return a CFErrorRef stipulating the
  /// error.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionCanExecute =
      _lookup<coreFoundation.CFStringRef>('kSecTransformActionCanExecute');

  coreFoundation.CFStringRef get kSecTransformActionCanExecute =>
      _kSecTransformActionCanExecute.value;

  set kSecTransformActionCanExecute(coreFoundation.CFStringRef value) =>
      _kSecTransformActionCanExecute.value = value;

  /// Overrides the standard behavior that occurs just before starting execution
  /// of a custom transform. This is typically overridden to allow for
  /// initialization. This is used with the SecTransformOverrideTransformAction
  /// block.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionStartingExecution =
      _lookup<coreFoundation.CFStringRef>(
          'kSecTransformActionStartingExecution');

  coreFoundation.CFStringRef get kSecTransformActionStartingExecution =>
      _kSecTransformActionStartingExecution.value;

  set kSecTransformActionStartingExecution(coreFoundation.CFStringRef value) =>
      _kSecTransformActionStartingExecution.value = value;

  /// Overrides the standard behavior that occurs just before deleting a custom
  /// transform. This is typically overridden to allow for memory clean up of a
  /// custom transform. This is used with the SecTransformOverrideTransformAction
  /// block.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionFinalize =
      _lookup<coreFoundation.CFStringRef>('kSecTransformActionFinalize');

  coreFoundation.CFStringRef get kSecTransformActionFinalize =>
      _kSecTransformActionFinalize.value;

  set kSecTransformActionFinalize(coreFoundation.CFStringRef value) =>
      _kSecTransformActionFinalize.value = value;

  /// Allows for adding to the data that is stored using an override to the
  /// kSecTransformActionExternalizeExtraData block. The output of this override
  /// is a dictionary that contains the custom externalized data. A common use of
  /// this override is to write out a version number of a custom transform.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionExternalizeExtraData =
      _lookup<coreFoundation.CFStringRef>(
          'kSecTransformActionExternalizeExtraData');

  coreFoundation.CFStringRef get kSecTransformActionExternalizeExtraData =>
      _kSecTransformActionExternalizeExtraData.value;

  set kSecTransformActionExternalizeExtraData(
          coreFoundation.CFStringRef value) =>
      _kSecTransformActionExternalizeExtraData.value = value;

  /// Overrides the standard data processing for an attribute. This is almost
  /// exclusively used for processing the input attribute as the return value of
  /// their block sets the output attribute. This is used with the
  /// SecTransformOverrideAttributeAction block.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionProcessData =
      _lookup<coreFoundation.CFStringRef>('kSecTransformActionProcessData');

  coreFoundation.CFStringRef get kSecTransformActionProcessData =>
      _kSecTransformActionProcessData.value;

  set kSecTransformActionProcessData(coreFoundation.CFStringRef value) =>
      _kSecTransformActionProcessData.value = value;

  /// Overrides the standard processing that occurs when externalized data is used
  /// to create a transform. This is closely tied to the
  /// kSecTransformActionExternalizeExtraData override. The 'normal' attributes
  /// are read into the new transform and then this is called to read in the items
  /// that were written out using kSecTransformActionExternalizeExtraData
  /// override. A common use of this override would be to read in the version
  /// number of the externalized custom transform.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionInternalizeExtraData =
      _lookup<coreFoundation.CFStringRef>(
          'kSecTransformActionInternalizeExtraData');

  coreFoundation.CFStringRef get kSecTransformActionInternalizeExtraData =>
      _kSecTransformActionInternalizeExtraData.value;

  set kSecTransformActionInternalizeExtraData(
          coreFoundation.CFStringRef value) =>
      _kSecTransformActionInternalizeExtraData.value = value;

  /// Allows a block to be called when an attribute is set. This allows for
  /// caching the value as a block variable in the instance block or
  /// transmogrifying the data to be set. This action is where a custom transform
  /// would be able to do processing outside of processing input to output as
  /// process data does. One the data has been processed the action block can call
  /// SecTransformCustomSetAttribute to update and other attribute.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionAttributeNotification =
      _lookup<coreFoundation.CFStringRef>(
          'kSecTransformActionAttributeNotification');

  coreFoundation.CFStringRef get kSecTransformActionAttributeNotification =>
      _kSecTransformActionAttributeNotification.value;

  set kSecTransformActionAttributeNotification(
          coreFoundation.CFStringRef value) =>
      _kSecTransformActionAttributeNotification.value = value;

  /// Allows a block to be called to validate the new value for an attribute. The
  /// default is no validation and any CFTypeRef can be used as the new value. The
  /// block should return NULL if the value is ok to set on the attribute or a
  /// CFErrorRef otherwise.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecTransformActionAttributeValidation =
      _lookup<coreFoundation.CFStringRef>(
          'kSecTransformActionAttributeValidation');

  coreFoundation.CFStringRef get kSecTransformActionAttributeValidation =>
      _kSecTransformActionAttributeValidation.value;

  set kSecTransformActionAttributeValidation(
          coreFoundation.CFStringRef value) =>
      _kSecTransformActionAttributeValidation.value = value;

  /// Creates a transform computation object.
  SecTransformRef SecTransformCreate(
    coreFoundation.CFStringRef name,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecTransformCreate(
      name,
      error,
    );
  }

  late final _SecTransformCreatePtr = _lookup<
      ffi.NativeFunction<
          SecTransformRef Function(coreFoundation.CFStringRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>>('SecTransformCreate');
  late final _SecTransformCreate = _SecTransformCreatePtr.asFunction<
      SecTransformRef Function(coreFoundation.CFStringRef,
          ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns back A CFTypeRef from inside a processData override that says that
  /// while no data is being returned the transform is still active and awaiting
  /// data.
  coreFoundation.CFTypeRef SecTransformNoData() {
    return _SecTransformNoData();
  }

  late final _SecTransformNoDataPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeRef Function()>>(
          'SecTransformNoData');
  late final _SecTransformNoData =
      _SecTransformNoDataPtr.asFunction<coreFoundation.CFTypeRef Function()>();

  /// Specifies a base 64 encoding
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecBase64Encoding =
      _lookup<coreFoundation.CFStringRef>('kSecBase64Encoding');

  coreFoundation.CFStringRef get kSecBase64Encoding =>
      _kSecBase64Encoding.value;

  set kSecBase64Encoding(coreFoundation.CFStringRef value) =>
      _kSecBase64Encoding.value = value;

  /// Specifies a base 32 encoding
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecBase32Encoding =
      _lookup<coreFoundation.CFStringRef>('kSecBase32Encoding');

  coreFoundation.CFStringRef get kSecBase32Encoding =>
      _kSecBase32Encoding.value;

  set kSecBase32Encoding(coreFoundation.CFStringRef value) =>
      _kSecBase32Encoding.value = value;

  /// Specifies a compressed encoding.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecZLibEncoding =
      _lookup<coreFoundation.CFStringRef>('kSecZLibEncoding');

  coreFoundation.CFStringRef get kSecZLibEncoding => _kSecZLibEncoding.value;

  set kSecZLibEncoding(coreFoundation.CFStringRef value) =>
      _kSecZLibEncoding.value = value;

  /// Used with SecTransformGetAttribute to query the attribute type. Returns one
  /// of the strings defined in the previous section.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecEncodeTypeAttribute =
      _lookup<coreFoundation.CFStringRef>('kSecEncodeTypeAttribute');

  coreFoundation.CFStringRef get kSecEncodeTypeAttribute =>
      _kSecEncodeTypeAttribute.value;

  set kSecEncodeTypeAttribute(coreFoundation.CFStringRef value) =>
      _kSecEncodeTypeAttribute.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecLineLength64 =
      _lookup<coreFoundation.CFStringRef>('kSecLineLength64');

  coreFoundation.CFStringRef get kSecLineLength64 => _kSecLineLength64.value;

  set kSecLineLength64(coreFoundation.CFStringRef value) =>
      _kSecLineLength64.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecLineLength76 =
      _lookup<coreFoundation.CFStringRef>('kSecLineLength76');

  coreFoundation.CFStringRef get kSecLineLength76 => _kSecLineLength76.value;

  set kSecLineLength76(coreFoundation.CFStringRef value) =>
      _kSecLineLength76.value = value;

  /// Used with SecTransformSetAttribute to set the length of encoded Base32 or
  /// Base64 lines. Some systems will not decode or otherwise deal with
  /// excessively long lines, or may be defined to limit lines to specific lengths
  /// (for example RFC1421 - 64, and RFC2045 - 76).
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecEncodeLineLengthAttribute =
      _lookup<coreFoundation.CFStringRef>('kSecEncodeLineLengthAttribute');

  coreFoundation.CFStringRef get kSecEncodeLineLengthAttribute =>
      _kSecEncodeLineLengthAttribute.value;

  set kSecEncodeLineLengthAttribute(coreFoundation.CFStringRef value) =>
      _kSecEncodeLineLengthAttribute.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecCompressionRatio =
      _lookup<coreFoundation.CFStringRef>('kSecCompressionRatio');

  coreFoundation.CFStringRef get kSecCompressionRatio =>
      _kSecCompressionRatio.value;

  set kSecCompressionRatio(coreFoundation.CFStringRef value) =>
      _kSecCompressionRatio.value = value;

  /// Creates an encode computation object.
  SecTransformRef SecEncodeTransformCreate(
    coreFoundation.CFTypeRef encodeType,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecEncodeTransformCreate(
      encodeType,
      error,
    );
  }

  late final _SecEncodeTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(coreFoundation.CFTypeRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecEncodeTransformCreate');
  late final _SecEncodeTransformCreate =
      _SecEncodeTransformCreatePtr.asFunction<
          SecTransformRef Function(coreFoundation.CFTypeRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Used with SecTransformGetAttribute to query the attribute type. Returns one
  /// of the strings defined in the previous section.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDecodeTypeAttribute =
      _lookup<coreFoundation.CFStringRef>('kSecDecodeTypeAttribute');

  coreFoundation.CFStringRef get kSecDecodeTypeAttribute =>
      _kSecDecodeTypeAttribute.value;

  set kSecDecodeTypeAttribute(coreFoundation.CFStringRef value) =>
      _kSecDecodeTypeAttribute.value = value;

  /// Creates an decode computation object.
  SecTransformRef SecDecodeTransformCreate(
    coreFoundation.CFTypeRef DecodeType,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecDecodeTransformCreate(
      DecodeType,
      error,
    );
  }

  late final _SecDecodeTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(coreFoundation.CFTypeRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecDecodeTransformCreate');
  late final _SecDecodeTransformCreate =
      _SecDecodeTransformCreatePtr.asFunction<
          SecTransformRef Function(coreFoundation.CFTypeRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Specifies an MD2 digest
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestMD2 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestMD2');

  coreFoundation.CFStringRef get kSecDigestMD2 => _kSecDigestMD2.value;

  set kSecDigestMD2(coreFoundation.CFStringRef value) =>
      _kSecDigestMD2.value = value;

  /// Specifies an MD4 digest
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestMD4 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestMD4');

  coreFoundation.CFStringRef get kSecDigestMD4 => _kSecDigestMD4.value;

  set kSecDigestMD4(coreFoundation.CFStringRef value) =>
      _kSecDigestMD4.value = value;

  /// Specifies an MD5 digest
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestMD5 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestMD5');

  coreFoundation.CFStringRef get kSecDigestMD5 => _kSecDigestMD5.value;

  set kSecDigestMD5(coreFoundation.CFStringRef value) =>
      _kSecDigestMD5.value = value;

  /// Specifies a SHA1 digest
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestSHA1 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestSHA1');

  coreFoundation.CFStringRef get kSecDigestSHA1 => _kSecDigestSHA1.value;

  set kSecDigestSHA1(coreFoundation.CFStringRef value) =>
      _kSecDigestSHA1.value = value;

  /// Specifies a SHA2 digest.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestSHA2 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestSHA2');

  coreFoundation.CFStringRef get kSecDigestSHA2 => _kSecDigestSHA2.value;

  set kSecDigestSHA2(coreFoundation.CFStringRef value) =>
      _kSecDigestSHA2.value = value;

  /// Specifies an HMAC using the MD5 digest algorithm.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestHMACMD5 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestHMACMD5');

  coreFoundation.CFStringRef get kSecDigestHMACMD5 => _kSecDigestHMACMD5.value;

  set kSecDigestHMACMD5(coreFoundation.CFStringRef value) =>
      _kSecDigestHMACMD5.value = value;

  /// Specifies an HMAC using the SHA1 digest algorithm.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestHMACSHA1 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestHMACSHA1');

  coreFoundation.CFStringRef get kSecDigestHMACSHA1 =>
      _kSecDigestHMACSHA1.value;

  set kSecDigestHMACSHA1(coreFoundation.CFStringRef value) =>
      _kSecDigestHMACSHA1.value = value;

  /// Specifies an HMAC using one of the SHA2 digest algorithms.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestHMACSHA2 =
      _lookup<coreFoundation.CFStringRef>('kSecDigestHMACSHA2');

  coreFoundation.CFStringRef get kSecDigestHMACSHA2 =>
      _kSecDigestHMACSHA2.value;

  set kSecDigestHMACSHA2(coreFoundation.CFStringRef value) =>
      _kSecDigestHMACSHA2.value = value;

  /// Used with SecTransformGetAttribute to query the attribute type. Returns one
  /// of the strings defined in the previous section.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecDigestTypeAttribute =
      _lookup<coreFoundation.CFStringRef>('kSecDigestTypeAttribute');

  coreFoundation.CFStringRef get kSecDigestTypeAttribute =>
      _kSecDigestTypeAttribute.value;

  set kSecDigestTypeAttribute(coreFoundation.CFStringRef value) =>
      _kSecDigestTypeAttribute.value = value;

  /// Used with SecTransformGetAttribute to query the length attribute. Returns a
  /// CFNumberRef that contains the length in bytes.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecDigestLengthAttribute =
      _lookup<coreFoundation.CFStringRef>('kSecDigestLengthAttribute');

  coreFoundation.CFStringRef get kSecDigestLengthAttribute =>
      _kSecDigestLengthAttribute.value;

  set kSecDigestLengthAttribute(coreFoundation.CFStringRef value) =>
      _kSecDigestLengthAttribute.value = value;

  /// When set and used with one of the HMAC digest types, sets the key for the
  /// HMAC operation. The data type for this attribute must be a CFDataRef. If
  /// this value is not set, the transform will assume a zero length key.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecDigestHMACKeyAttribute =
      _lookup<coreFoundation.CFStringRef>('kSecDigestHMACKeyAttribute');

  coreFoundation.CFStringRef get kSecDigestHMACKeyAttribute =>
      _kSecDigestHMACKeyAttribute.value;

  set kSecDigestHMACKeyAttribute(coreFoundation.CFStringRef value) =>
      _kSecDigestHMACKeyAttribute.value = value;

  /// Creates a digest computation object.
  SecTransformRef SecDigestTransformCreate(
    coreFoundation.CFTypeRef digestType,
    int digestLength,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecDigestTransformCreate(
      digestType,
      digestLength,
      error,
    );
  }

  late final _SecDigestTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(
                  coreFoundation.CFTypeRef,
                  coreFoundation.CFIndex,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecDigestTransformCreate');
  late final _SecDigestTransformCreate =
      _SecDigestTransformCreatePtr.asFunction<
          SecTransformRef Function(coreFoundation.CFTypeRef, int,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Return the CFTypeID of a SecDigestTransform
  int SecDigestTransformGetTypeID() {
    return _SecDigestTransformGetTypeID();
  }

  late final _SecDigestTransformGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecDigestTransformGetTypeID');
  late final _SecDigestTransformGetTypeID =
      _SecDigestTransformGetTypeIDPtr.asFunction<int Function()>();

  /// Indicates that no padding will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPaddingNoneKey =
      _lookup<coreFoundation.CFStringRef>('kSecPaddingNoneKey');

  coreFoundation.CFStringRef get kSecPaddingNoneKey =>
      _kSecPaddingNoneKey.value;

  set kSecPaddingNoneKey(coreFoundation.CFStringRef value) =>
      _kSecPaddingNoneKey.value = value;

  /// Indicates that PKCS1 padding will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPaddingPKCS1Key =
      _lookup<coreFoundation.CFStringRef>('kSecPaddingPKCS1Key');

  coreFoundation.CFStringRef get kSecPaddingPKCS1Key =>
      _kSecPaddingPKCS1Key.value;

  set kSecPaddingPKCS1Key(coreFoundation.CFStringRef value) =>
      _kSecPaddingPKCS1Key.value = value;

  /// Indicates that PKCS5 padding will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPaddingPKCS5Key =
      _lookup<coreFoundation.CFStringRef>('kSecPaddingPKCS5Key');

  coreFoundation.CFStringRef get kSecPaddingPKCS5Key =>
      _kSecPaddingPKCS5Key.value;

  set kSecPaddingPKCS5Key(coreFoundation.CFStringRef value) =>
      _kSecPaddingPKCS5Key.value = value;

  /// Indicates that PKCS7 padding will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPaddingPKCS7Key =
      _lookup<coreFoundation.CFStringRef>('kSecPaddingPKCS7Key');

  coreFoundation.CFStringRef get kSecPaddingPKCS7Key =>
      _kSecPaddingPKCS7Key.value;

  set kSecPaddingPKCS7Key(coreFoundation.CFStringRef value) =>
      _kSecPaddingPKCS7Key.value = value;

  /// Indicates that PKCS7 padding will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPaddingOAEPKey =
      _lookup<coreFoundation.CFStringRef>('kSecPaddingOAEPKey');

  coreFoundation.CFStringRef get kSecPaddingOAEPKey =>
      _kSecPaddingOAEPKey.value;

  set kSecPaddingOAEPKey(coreFoundation.CFStringRef value) =>
      _kSecPaddingOAEPKey.value = value;

  /// Indicates that no mode will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecModeNoneKey =
      _lookup<coreFoundation.CFStringRef>('kSecModeNoneKey');

  coreFoundation.CFStringRef get kSecModeNoneKey => _kSecModeNoneKey.value;

  set kSecModeNoneKey(coreFoundation.CFStringRef value) =>
      _kSecModeNoneKey.value = value;

  /// Indicates that ECB mode will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecModeECBKey =
      _lookup<coreFoundation.CFStringRef>('kSecModeECBKey');

  coreFoundation.CFStringRef get kSecModeECBKey => _kSecModeECBKey.value;

  set kSecModeECBKey(coreFoundation.CFStringRef value) =>
      _kSecModeECBKey.value = value;

  /// Indicates that CBC mode will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecModeCBCKey =
      _lookup<coreFoundation.CFStringRef>('kSecModeCBCKey');

  coreFoundation.CFStringRef get kSecModeCBCKey => _kSecModeCBCKey.value;

  set kSecModeCBCKey(coreFoundation.CFStringRef value) =>
      _kSecModeCBCKey.value = value;

  /// Indicates that CFB mode will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecModeCFBKey =
      _lookup<coreFoundation.CFStringRef>('kSecModeCFBKey');

  coreFoundation.CFStringRef get kSecModeCFBKey => _kSecModeCFBKey.value;

  set kSecModeCFBKey(coreFoundation.CFStringRef value) =>
      _kSecModeCFBKey.value = value;

  /// Indicates that OFB mode will be used when encrypting or decrypting.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecModeOFBKey =
      _lookup<coreFoundation.CFStringRef>('kSecModeOFBKey');

  coreFoundation.CFStringRef get kSecModeOFBKey => _kSecModeOFBKey.value;

  set kSecModeOFBKey(coreFoundation.CFStringRef value) =>
      _kSecModeOFBKey.value = value;

  /// This attribute holds the encryption key for the transform. (ReadOnly)
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecEncryptKey =
      _lookup<coreFoundation.CFStringRef>('kSecEncryptKey');

  coreFoundation.CFStringRef get kSecEncryptKey => _kSecEncryptKey.value;

  set kSecEncryptKey(coreFoundation.CFStringRef value) =>
      _kSecEncryptKey.value = value;

  /// Key for setting padding.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecPaddingKey =
      _lookup<coreFoundation.CFStringRef>('kSecPaddingKey');

  coreFoundation.CFStringRef get kSecPaddingKey => _kSecPaddingKey.value;

  set kSecPaddingKey(coreFoundation.CFStringRef value) =>
      _kSecPaddingKey.value = value;

  /// Key for setting an initialization vector.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecIVKey =
      _lookup<coreFoundation.CFStringRef>('kSecIVKey');

  coreFoundation.CFStringRef get kSecIVKey => _kSecIVKey.value;

  set kSecIVKey(coreFoundation.CFStringRef value) => _kSecIVKey.value = value;

  /// Specifies the encryption mode.
  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecEncryptionMode =
      _lookup<coreFoundation.CFStringRef>('kSecEncryptionMode');

  coreFoundation.CFStringRef get kSecEncryptionMode =>
      _kSecEncryptionMode.value;

  set kSecEncryptionMode(coreFoundation.CFStringRef value) =>
      _kSecEncryptionMode.value = value;

  /// Specifies the OAEP message length.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOAEPMessageLengthAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecOAEPMessageLengthAttributeName');

  coreFoundation.CFStringRef get kSecOAEPMessageLengthAttributeName =>
      _kSecOAEPMessageLengthAttributeName.value;

  set kSecOAEPMessageLengthAttributeName(coreFoundation.CFStringRef value) =>
      _kSecOAEPMessageLengthAttributeName.value = value;

  /// Specifies the OAEP encoding paramaters
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOAEPEncodingParametersAttributeName =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOAEPEncodingParametersAttributeName');

  coreFoundation.CFStringRef get kSecOAEPEncodingParametersAttributeName =>
      _kSecOAEPEncodingParametersAttributeName.value;

  set kSecOAEPEncodingParametersAttributeName(
          coreFoundation.CFStringRef value) =>
      _kSecOAEPEncodingParametersAttributeName.value = value;

  /// Specifies the OAEP MGF1 digest algorithm.
  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecOAEPMGF1DigestAlgorithmAttributeName =
      _lookup<coreFoundation.CFStringRef>(
          'kSecOAEPMGF1DigestAlgorithmAttributeName');

  coreFoundation.CFStringRef get kSecOAEPMGF1DigestAlgorithmAttributeName =>
      _kSecOAEPMGF1DigestAlgorithmAttributeName.value;

  set kSecOAEPMGF1DigestAlgorithmAttributeName(
          coreFoundation.CFStringRef value) =>
      _kSecOAEPMGF1DigestAlgorithmAttributeName.value = value;

  /// Creates an encryption SecTransform object.
  SecTransformRef SecEncryptTransformCreate(
    SecKeyRef keyRef,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecEncryptTransformCreate(
      keyRef,
      error,
    );
  }

  late final _SecEncryptTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(
                  SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecEncryptTransformCreate');
  late final _SecEncryptTransformCreate =
      _SecEncryptTransformCreatePtr.asFunction<
          SecTransformRef Function(
              SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Creates an encryption SecTransform object.
  SecTransformRef SecDecryptTransformCreate(
    SecKeyRef keyRef,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecDecryptTransformCreate(
      keyRef,
      error,
    );
  }

  late final _SecDecryptTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(
                  SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecDecryptTransformCreate');
  late final _SecDecryptTransformCreate =
      _SecDecryptTransformCreatePtr.asFunction<
          SecTransformRef Function(
              SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Returns the CFTypeID for a decrypt transform.
  int SecDecryptTransformGetTypeID() {
    return _SecDecryptTransformGetTypeID();
  }

  late final _SecDecryptTransformGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecDecryptTransformGetTypeID');
  late final _SecDecryptTransformGetTypeID =
      _SecDecryptTransformGetTypeIDPtr.asFunction<int Function()>();

  /// Returns the CFTypeID for a decrypt transform.
  int SecEncryptTransformGetTypeID() {
    return _SecEncryptTransformGetTypeID();
  }

  late final _SecEncryptTransformGetTypeIDPtr =
      _lookup<ffi.NativeFunction<coreFoundation.CFTypeID Function()>>(
          'SecEncryptTransformGetTypeID');
  late final _SecEncryptTransformGetTypeID =
      _SecEncryptTransformGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecKeyAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecKeyAttributeName');

  coreFoundation.CFStringRef get kSecKeyAttributeName =>
      _kSecKeyAttributeName.value;

  set kSecKeyAttributeName(coreFoundation.CFStringRef value) =>
      _kSecKeyAttributeName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef>
      _kSecSignatureAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecSignatureAttributeName');

  coreFoundation.CFStringRef get kSecSignatureAttributeName =>
      _kSecSignatureAttributeName.value;

  set kSecSignatureAttributeName(coreFoundation.CFStringRef value) =>
      _kSecSignatureAttributeName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecInputIsAttributeName =
      _lookup<coreFoundation.CFStringRef>('kSecInputIsAttributeName');

  coreFoundation.CFStringRef get kSecInputIsAttributeName =>
      _kSecInputIsAttributeName.value;

  set kSecInputIsAttributeName(coreFoundation.CFStringRef value) =>
      _kSecInputIsAttributeName.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecInputIsPlainText =
      _lookup<coreFoundation.CFStringRef>('kSecInputIsPlainText');

  coreFoundation.CFStringRef get kSecInputIsPlainText =>
      _kSecInputIsPlainText.value;

  set kSecInputIsPlainText(coreFoundation.CFStringRef value) =>
      _kSecInputIsPlainText.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecInputIsDigest =
      _lookup<coreFoundation.CFStringRef>('kSecInputIsDigest');

  coreFoundation.CFStringRef get kSecInputIsDigest => _kSecInputIsDigest.value;

  set kSecInputIsDigest(coreFoundation.CFStringRef value) =>
      _kSecInputIsDigest.value = value;

  late final ffi.Pointer<coreFoundation.CFStringRef> _kSecInputIsRaw =
      _lookup<coreFoundation.CFStringRef>('kSecInputIsRaw');

  coreFoundation.CFStringRef get kSecInputIsRaw => _kSecInputIsRaw.value;

  set kSecInputIsRaw(coreFoundation.CFStringRef value) =>
      _kSecInputIsRaw.value = value;

  /// Creates a sign computation object.
  SecTransformRef SecSignTransformCreate(
    SecKeyRef key,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecSignTransformCreate(
      key,
      error,
    );
  }

  late final _SecSignTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(
                  SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecSignTransformCreate');
  late final _SecSignTransformCreate = _SecSignTransformCreatePtr.asFunction<
      SecTransformRef Function(
          SecKeyRef, ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Creates a verify computation object.
  SecTransformRef SecVerifyTransformCreate(
    SecKeyRef key,
    coreFoundation.CFDataRef signature,
    ffi.Pointer<coreFoundation.CFErrorRef> error,
  ) {
    return _SecVerifyTransformCreate(
      key,
      signature,
      error,
    );
  }

  late final _SecVerifyTransformCreatePtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(SecKeyRef, coreFoundation.CFDataRef,
                  ffi.Pointer<coreFoundation.CFErrorRef>)>>(
      'SecVerifyTransformCreate');
  late final _SecVerifyTransformCreate =
      _SecVerifyTransformCreatePtr.asFunction<
          SecTransformRef Function(SecKeyRef, coreFoundation.CFDataRef,
              ffi.Pointer<coreFoundation.CFErrorRef>)>();

  /// Creates a read transform from a CFReadStreamRef
  SecTransformRef SecTransformCreateReadTransformWithReadStream(
    coreFoundation.CFReadStreamRef inputStream,
  ) {
    return _SecTransformCreateReadTransformWithReadStream(
      inputStream,
    );
  }

  late final _SecTransformCreateReadTransformWithReadStreamPtr = _lookup<
          ffi.NativeFunction<
              SecTransformRef Function(coreFoundation.CFReadStreamRef)>>(
      'SecTransformCreateReadTransformWithReadStream');
  late final _SecTransformCreateReadTransformWithReadStream =
      _SecTransformCreateReadTransformWithReadStreamPtr.asFunction<
          SecTransformRef Function(coreFoundation.CFReadStreamRef)>();
}

typedef OSStatus = SInt32;
typedef SInt32 = ffi.Int;

/// CFType representing a X.509 certificate. See SecCertificate.h for details.
typedef SecCertificateRef = ffi.Pointer<__SecCertificate>;

class __SecCertificate extends ffi.Opaque {}

/// CFType representing a cryptographic key. See SecKey.h for details.
typedef SecKeyRef = ffi.Pointer<__SecKey>;

class __SecKey extends ffi.Opaque {}

typedef SecAsn1Item = cssm_data;

class cssm_data extends ffi.Struct {
  @ffi.Size()
  external int Length;

  external ffi.Pointer<ffi.Uint8> Data;
}

typedef CSSM_CERT_TYPE = uint32;
typedef uint32 = ffi.Uint32;
typedef CSSM_CERT_ENCODING = uint32;

/// Contains information about a keychain.
typedef SecKeychainRef = ffi.Pointer<__SecKeychain>;

class __SecKeychain extends ffi.Opaque {}

typedef CSSM_DATA_PTR = ffi.Pointer<SecAsn1Item>;
typedef CSSM_X509_NAME = cssm_x509_name;

class cssm_x509_name extends ffi.Struct {
  @uint32()
  external int numberOfRDNs;

  external CSSM_X509_RDN_PTR RelativeDistinguishedName;
}

typedef CSSM_X509_RDN_PTR = ffi.Pointer<cssm_x509_rdn>;

class cssm_x509_rdn extends ffi.Struct {
  @uint32()
  external int numberOfPairs;

  external CSSM_X509_TYPE_VALUE_PAIR_PTR AttributeTypeAndValue;
}

typedef CSSM_X509_TYPE_VALUE_PAIR_PTR = ffi.Pointer<cssm_x509_type_value_pair>;

class cssm_x509_type_value_pair extends ffi.Struct {
  external SecAsn1Oid type;

  @CSSM_BER_TAG()
  external int valueType;

  external SecAsn1Item value;
}

typedef SecAsn1Oid = cssm_data;
typedef CSSM_BER_TAG = uint8;
typedef uint8 = ffi.Uint8;
typedef CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_MODULE_HANDLE = CSSM_HANDLE;
typedef CSSM_HANDLE = CSSM_INTPTR;
typedef CSSM_INTPTR = ffi.IntPtr;

class SecAsn1AlgId extends ffi.Struct {
  external SecAsn1Oid algorithm;

  external SecAsn1Item parameters;
}

/// CFType representing an identity, which contains a SecKeyRef and an
/// associated SecCertificateRef. See SecIdentity.h for details.
typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;

class __SecIdentity extends ffi.Opaque {}

typedef CSSM_KEYUSE = uint32;

/// CFType representing access control for an item. SecAccessControl.h for
/// details.
typedef SecAccessControlRef = ffi.Pointer<__SecAccessControl>;

class __SecAccessControl extends ffi.Opaque {}

/// User presence policy using biometry or Passcode. Biometry does not have to
/// be available or enrolled. Item is still accessible by Touch ID even if
/// fingers are added or removed. Item is still accessible by Face ID if user is
/// re-enrolled.
typedef SecAccessControlCreateFlags = coreFoundation.CFOptionFlags;

/// Contains information about an access.
typedef SecAccessRef = ffi.Pointer<__SecAccess>;

class __SecAccess extends ffi.Opaque {}

typedef CSSM_ACL_OWNER_PROTOTYPE = cssm_acl_owner_prototype;

class cssm_acl_owner_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;
}

typedef CSSM_LIST = cssm_list;

class cssm_list extends ffi.Struct {
  @CSSM_LIST_TYPE()
  external int ListType;

  external CSSM_LIST_ELEMENT_PTR Head;

  external CSSM_LIST_ELEMENT_PTR Tail;
}

typedef CSSM_LIST_TYPE = uint32;
typedef CSSM_LIST_ELEMENT_PTR = ffi.Pointer<cssm_list_element>;

class cssm_list_element extends ffi.Struct {
  external ffi.Pointer<cssm_list_element> NextElement;

  @CSSM_WORDID_TYPE()
  external int WordID;

  @CSSM_LIST_ELEMENT_TYPE()
  external int ElementType;

  external UnnamedUnion1 Element;
}

typedef CSSM_WORDID_TYPE = sint32;
typedef sint32 = ffi.Int32;
typedef CSSM_LIST_ELEMENT_TYPE = uint32;

class UnnamedUnion1 extends ffi.Union {
  external CSSM_LIST1 Sublist;

  external SecAsn1Item Word;
}

typedef CSSM_LIST1 = cssm_list;
typedef CSSM_BOOL = sint32;
typedef CSSM_ACL_ENTRY_INFO = cssm_acl_entry_info;

class cssm_acl_entry_info extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE EntryPublicInfo;

  @CSSM_ACL_HANDLE()
  external int EntryHandle;
}

typedef CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;

class cssm_acl_entry_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_AUTHORIZATIONGROUP Authorization;

  external CSSM_ACL_VALIDITY_PERIOD TimeRange;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Char> EntryTag;
}

typedef CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;

class cssm_authorizationgroup extends ffi.Struct {
  @uint32()
  external int NumberOfAuthTags;

  external ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> AuthTags;
}

typedef CSSM_ACL_AUTHORIZATION_TAG = sint32;
typedef CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;

class cssm_acl_validity_period extends ffi.Struct {
  external SecAsn1Item StartDate;

  external SecAsn1Item EndDate;
}

typedef CSSM_ACL_HANDLE = CSSM_HANDLE;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;
typedef __uint32_t = ffi.UnsignedInt;
typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef SecAccessOwnerType = UInt32;
typedef UInt32 = ffi.UnsignedInt;
typedef CSSM_ACL_OWNER_PROTOTYPE_PTR = ffi.Pointer<cssm_acl_owner_prototype>;
typedef CSSM_ACL_ENTRY_INFO_PTR = ffi.Pointer<cssm_acl_entry_info>;
typedef CSSM_ALGORITHMS = uint32;
typedef CSSM_CC_HANDLE = CSSM_LONG_HANDLE;
typedef CSSM_LONG_HANDLE = uint64;
typedef uint64 = ffi.Uint64;
typedef CSSM_KEY = cssm_key;

class cssm_key extends ffi.Struct {
  external CSSM_KEYHEADER KeyHeader;

  external SecAsn1Item KeyData;
}

typedef CSSM_KEYHEADER = cssm_keyheader;

class cssm_keyheader extends ffi.Struct {
  @CSSM_HEADERVERSION()
  external int HeaderVersion;

  external CSSM_GUID CspId;

  @CSSM_KEYBLOB_TYPE()
  external int BlobType;

  @CSSM_KEYBLOB_FORMAT()
  external int Format;

  @CSSM_ALGORITHMS()
  external int AlgorithmId;

  @CSSM_KEYCLASS()
  external int KeyClass;

  @uint32()
  external int LogicalKeySizeInBits;

  @CSSM_KEYATTR_FLAGS()
  external int KeyAttr;

  @CSSM_KEYUSE()
  external int KeyUsage;

  external CSSM_DATE StartDate;

  external CSSM_DATE EndDate;

  @CSSM_ALGORITHMS()
  external int WrapAlgorithmId;

  @CSSM_ENCRYPT_MODE()
  external int WrapMode;

  @uint32()
  external int Reserved;
}

typedef CSSM_HEADERVERSION = uint32;
typedef CSSM_GUID = cssm_guid;

class cssm_guid extends ffi.Struct {
  @uint32()
  external int Data1;

  @uint16()
  external int Data2;

  @uint16()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<uint8> Data4;
}

typedef uint16 = ffi.Uint16;
typedef CSSM_KEYBLOB_TYPE = uint32;
typedef CSSM_KEYBLOB_FORMAT = uint32;
typedef CSSM_KEYCLASS = uint32;
typedef CSSM_KEYATTR_FLAGS = uint32;
typedef CSSM_DATE = cssm_date;

class cssm_date extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<uint8> Year;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Month;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Day;
}

typedef CSSM_ENCRYPT_MODE = uint32;
typedef CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

/// Determines the type of credential returned by SecKeyGetCredentials.
typedef SecCredentialType = uint32;
typedef CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;

class cssm_access_credentials extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<ffi.Char> EntryTag;

  external CSSM_BASE_CERTS BaseCerts;

  external CSSM_SAMPLEGROUP Samples;

  external CSSM_CHALLENGE_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_BASE_CERTS = cssm_base_certs;

class cssm_base_certs extends ffi.Struct {
  @CSSM_TP_HANDLE()
  external int TPHandle;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_CERTGROUP Certs;
}

typedef CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_CERTGROUP = cssm_certgroup;

class cssm_certgroup extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  @uint32()
  external int NumCerts;

  external UnnamedUnion2 GroupList;

  @CSSM_CERTGROUP_TYPE()
  external int CertGroupType;

  external ffi.Pointer<ffi.Void> Reserved;
}

class UnnamedUnion2 extends ffi.Union {
  external CSSM_DATA_PTR CertList;

  external CSSM_ENCODED_CERT_PTR EncodedCertList;

  external CSSM_PARSED_CERT_PTR ParsedCertList;

  external CSSM_CERT_PAIR_PTR PairCertList;
}

typedef CSSM_ENCODED_CERT_PTR = ffi.Pointer<cssm_encoded_cert>;

class cssm_encoded_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  external SecAsn1Item CertBlob;
}

typedef CSSM_PARSED_CERT_PTR = ffi.Pointer<cssm_parsed_cert>;

class cssm_parsed_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_PARSE_FORMAT()
  external int ParsedCertFormat;

  external ffi.Pointer<ffi.Void> ParsedCert;
}

typedef CSSM_CERT_PARSE_FORMAT = uint32;
typedef CSSM_CERT_PAIR_PTR = ffi.Pointer<cssm_cert_pair>;

class cssm_cert_pair extends ffi.Struct {
  external CSSM_ENCODED_CERT EncodedCert;

  external CSSM_PARSED_CERT ParsedCert;
}

typedef CSSM_ENCODED_CERT = cssm_encoded_cert;
typedef CSSM_PARSED_CERT = cssm_parsed_cert;
typedef CSSM_CERTGROUP_TYPE = uint32;
typedef CSSM_SAMPLEGROUP = cssm_samplegroup;

class cssm_samplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfSamples;

  external ffi.Pointer<CSSM_SAMPLE> Samples;
}

typedef CSSM_SAMPLE = cssm_sample;

class cssm_sample extends ffi.Struct {
  external CSSM_LIST TypedSample;

  external ffi.Pointer<CSSM_SUBSERVICE_UID> Verifier;
}

typedef CSSM_SUBSERVICE_UID = cssm_subservice_uid;

class cssm_subservice_uid extends ffi.Struct {
  external CSSM_GUID Guid;

  external CSSM_VERSION Version;

  @uint32()
  external int SubserviceId;

  @CSSM_SERVICE_TYPE()
  external int SubserviceType;
}

typedef CSSM_VERSION = cssm_version;

class cssm_version extends ffi.Struct {
  @uint32()
  external int Major;

  @uint32()
  external int Minor;
}

typedef CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
typedef CSSM_SERVICE_MASK = uint32;
typedef CSSM_CHALLENGE_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_SAMPLEGROUP_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_RETURN = sint32;
typedef CSSM_SAMPLEGROUP_PTR = ffi.Pointer<cssm_samplegroup>;
typedef CSSM_MEMORY_FUNCS = cssm_memory_funcs;

class cssm_memory_funcs extends ffi.Struct {
  external CSSM_MALLOC malloc_func;

  external CSSM_FREE free_func;

  external CSSM_REALLOC realloc_func;

  external CSSM_CALLOC calloc_func;

  external ffi.Pointer<ffi.Void> AllocRef;
}

typedef CSSM_MALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_SIZE = ffi.Size;
typedef CSSM_FREE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_REALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_CALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            uint32, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;

/// Available algorithms for performing cryptographic operations with SecKey
/// object. String representation of constant can be used for logging or
/// debugging purposes, because they contain human readable names of the
/// algorithm.
typedef SecKeyAlgorithm = coreFoundation.CFStringRef;

/// ******************************************************************************
typedef Boolean = ffi.UnsignedChar;

/// for KDF (key derivation function).
typedef SecKeyKeyExchangeParameter = coreFoundation.CFStringRef;

/// Defines types of cryptographic operations available with SecKey instance.
typedef SecKeyOperationType = coreFoundation.CFIndex;

/// CFType representing a X.509 certificate trust policy. See SecPolicy.h for
/// details.
typedef SecPolicyRef = ffi.Pointer<__SecPolicy>;

class __SecPolicy extends ffi.Opaque {}

/// Reference to a (pseudo) random number generator.
typedef SecRandomRef = ffi.Pointer<__SecRandom>;

class __SecRandom extends ffi.Opaque {}

/// Contains keychain settings. version An unsigned 32-bit integer representing
/// the keychain version. lockOnSleep A boolean value indicating whether the
/// keychain locks when the system sleeps. useLockInterval A boolean value
/// indicating whether the keychain automatically locks after a certain period
/// of time. lockInterval An unsigned 32-bit integer representing the number of
/// seconds before the keychain locks.
class SecKeychainSettings extends ffi.Struct {
  @UInt32()
  external int version;

  @Boolean()
  external int lockOnSleep;

  @Boolean()
  external int useLockInterval;

  @UInt32()
  external int lockInterval;
}

typedef SecPreferencesDomain = ffi.Int;

/// Represents the status of a keychain.
typedef SecKeychainStatus = UInt32;

/// Represents an attribute. count The number of tag-format pairs in the
/// respective arrays. tag A pointer to the first attribute tag in the array.
/// format A pointer to the first CSSM_DB_ATTRIBUTE_FORMAT in the array.
class SecKeychainAttributeInfo extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<UInt32> tag;

  external ffi.Pointer<UInt32> format;
}

/// Defines a pointer to a customized callback function. You supply the
/// customized callback function to do a callback tailored to your application's
/// needs.
typedef SecKeychainCallback = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SecKeychainEvent,
            ffi.Pointer<SecKeychainCallbackInfo>, ffi.Pointer<ffi.Void>)>>;

/// Defines the keychain-related event.
typedef SecKeychainEvent = UInt32;

/// Contains information about a keychain event. version The version of this
/// structure. item A reference to the keychain item associated with this event,
/// if any. Note that some events do not involve a particular keychain item.
/// keychain A reference to the keychain in which the event occurred. pid The id
/// of the process that generated this event.
class SecKeychainCallbackInfo extends ffi.Struct {
  @UInt32()
  external int version;

  external SecKeychainItemRef item;

  external SecKeychainRef keychain;

  @pid_t()
  external int pid;
}

/// Contains information about a keychain item.
typedef SecKeychainItemRef = ffi.Pointer<__SecKeychainItem>;

class __SecKeychainItem extends ffi.Opaque {}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;

/// Defines keychain event constants
typedef SecKeychainEventMask = UInt32;
typedef UInt16 = ffi.UnsignedShort;

/// Defines the protocol type associated with an AppleShare or Internet
/// password.
typedef SecProtocolType = FourCharCode;
typedef FourCharCode = UInt32;
typedef SecAuthenticationType = FourCharCode;
typedef CSSM_DL_DB_HANDLE = cssm_dl_db_handle;

class cssm_dl_db_handle extends ffi.Struct {
  @CSSM_DL_HANDLE()
  external int DLHandle;

  @CSSM_DB_HANDLE()
  external int DBHandle;
}

typedef CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;
typedef SecExternalFormat = ffi.Uint32;
typedef SecItemImportExportFlags = ffi.Uint32;

class SecKeyImportExportParameters extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @SecKeyImportExportFlags()
  external int flags;

  external coreFoundation.CFTypeRef passphrase;

  external coreFoundation.CFStringRef alertTitle;

  external coreFoundation.CFStringRef alertPrompt;

  external SecAccessRef accessRef;

  @CSSM_KEYUSE()
  external int keyUsage;

  @CSSM_KEYATTR_FLAGS()
  external int keyAttributes;
}

typedef SecKeyImportExportFlags = ffi.Uint32;

class SecItemImportExportKeyParameters extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @SecKeyImportExportFlags()
  external int flags;

  external coreFoundation.CFTypeRef passphrase;

  external coreFoundation.CFStringRef alertTitle;

  external coreFoundation.CFStringRef alertPrompt;

  external SecAccessRef accessRef;

  external coreFoundation.CFArrayRef keyUsage;

  external coreFoundation.CFArrayRef keyAttributes;
}

typedef SecExternalItemType = ffi.Uint32;

/// CFType used for performing X.509 certificate trust evaluations.
typedef SecTrustRef = ffi.Pointer<__SecTrust>;

class __SecTrust extends ffi.Opaque {}

/// Specifies the trust result type.
typedef SecTrustResultType = ffi.Uint32;

/// Options for customizing trust evaluation. check per certificate. anchors.
/// treated as anchors implicitly.
typedef SecTrustOptionFlags = ffi.Uint32;
typedef CSSM_TP_ACTION = uint32;

class CSSM_TP_APPLE_EVIDENCE_INFO extends ffi.Struct {
  @CSSM_TP_APPLE_CERT_STATUS()
  external int StatusBits;

  @uint32()
  external int NumStatusCodes;

  external ffi.Pointer<CSSM_RETURN> StatusCodes;

  @uint32()
  external int Index;

  external CSSM_DL_DB_HANDLE DlDbHandle;

  external CSSM_DB_UNIQUE_RECORD_PTR UniqueRecord;
}

typedef CSSM_TP_APPLE_CERT_STATUS = uint32;
typedef CSSM_DB_UNIQUE_RECORD_PTR = ffi.Pointer<cssm_db_unique_record>;

class cssm_db_unique_record extends ffi.Struct {
  external CSSM_DB_INDEX_INFO RecordLocator;

  external SecAsn1Item RecordIdentifier;
}

typedef CSSM_DB_INDEX_INFO = cssm_db_index_info;

class cssm_db_index_info extends ffi.Struct {
  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;

  external CSSM_DB_ATTRIBUTE_INFO Info;
}

typedef CSSM_DB_INDEX_TYPE = uint32;
typedef CSSM_DB_INDEXED_DATA_LOCATION = uint32;
typedef CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;

class cssm_db_attribute_info extends ffi.Struct {
  @CSSM_DB_ATTRIBUTE_NAME_FORMAT()
  external int AttributeNameFormat;

  external cssm_db_attribute_label Label;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int AttributeFormat;
}

typedef CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

class cssm_db_attribute_label extends ffi.Union {
  external ffi.Pointer<ffi.Char> AttributeName;

  external SecAsn1Oid AttributeOID;

  @uint32()
  external int AttributeID;
}

typedef CSSM_DB_ATTRIBUTE_FORMAT = uint32;
typedef CSSM_TP_VERIFY_CONTEXT_RESULT_PTR
    = ffi.Pointer<cssm_tp_verify_context_result>;

class cssm_tp_verify_context_result extends ffi.Struct {
  @uint32()
  external int NumberOfEvidences;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_EVIDENCE_PTR = ffi.Pointer<cssm_evidence>;

class cssm_evidence extends ffi.Struct {
  @CSSM_EVIDENCE_FORM()
  external int EvidenceForm;

  external ffi.Pointer<ffi.Void> Evidence;
}

typedef CSSM_EVIDENCE_FORM = uint32;
typedef CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR = cssm_acl_keychain_prompt_selector;

class cssm_acl_keychain_prompt_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int flags;
}

/// Contains information about an access control list (ACL) entry.
typedef SecACLRef = ffi.Pointer<__SecACL>;

class __SecACL extends ffi.Opaque {}

typedef SecKeychainPromptSelector = uint16;

/// Contains information about an identity search.
typedef SecIdentitySearchRef = ffi.Pointer<OpaqueSecIdentitySearchRef>;

class OpaqueSecIdentitySearchRef extends ffi.Opaque {}

/// Represents a list of keychain attributes. count An unsigned 32-bit integer
/// that represents the number of keychain attributes in the array. attr A
/// pointer to the first keychain attribute in the array.
class SecKeychainAttributeList extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<SecKeychainAttribute> attr;
}

/// Contains keychain attributes. tag A 4-byte attribute tag. length The length
/// of the buffer pointed to by data. data A pointer to the attribute data.
class SecKeychainAttribute extends ffi.Struct {
  @SecKeychainAttrType()
  external int tag;

  @UInt32()
  external int length;

  external ffi.Pointer<ffi.Void> data;
}

/// Represents a keychain attribute type.
typedef SecKeychainAttrType = OSType;
typedef OSType = FourCharCode;

/// Specifies a keychain item's class code. Note: AppleShare passwords are no
/// longer used by OS X, starting in Leopard (10.5). Use of this item class is
/// deprecated in OS X 10.9 and later; kSecInternetPasswordItemClass should be
/// used instead when storing or looking up passwords for an Apple Filing
/// Protocol (AFP) server.
typedef SecItemClass = FourCharCode;
typedef CSSM_DB_UNIQUE_RECORD = cssm_db_unique_record;

/// Contains information about a keychain search.
typedef SecKeychainSearchRef = ffi.Pointer<__SecKeychainSearch>;

class __SecKeychainSearch extends ffi.Opaque {}

/// A reference to an opaque policy search structure.
typedef SecPolicySearchRef = ffi.Pointer<OpaquePolicySearchRef>;

class OpaquePolicySearchRef extends ffi.Opaque {}

/// Contains information about a trusted application.
typedef SecTrustedApplicationRef = ffi.Pointer<__SecTrustedApplication>;

class __SecTrustedApplication extends ffi.Opaque {}

typedef SecTrustSettingsDomain = ffi.Uint32;

/// This is the type of flags arguments to Code Signing API calls. It provides a
/// bit mask of request and option flags. All of the bits in these masks are
/// reserved to Apple; if you set any bits not defined in these headers, the
/// behavior is generally undefined.
typedef SecCSFlags = ffi.Uint32;

/// This is the type of a reference to static code on disk.
typedef SecStaticCodeRef = ffi.Pointer<__SecCode>;

class __SecCode extends ffi.Opaque {}

/// This is the type of a reference to a code requirement.
typedef SecRequirementRef = ffi.Pointer<__SecRequirement>;

class __SecRequirement extends ffi.Opaque {}

/// This is the type of a reference to running code.
typedef SecCodeRef = ffi.Pointer<__SecCode>;
typedef xpc_object_t = ffi.Pointer<ffi.Void>;

/// An abstract handle to identify a particular Guest in the context of its
/// Host.
typedef SecGuestRef = u_int32_t;
typedef u_int32_t = ffi.UnsignedInt;
typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_natural_t = ffi.UnsignedInt;

/// CFType used for representing a task
typedef SecTaskRef = ffi.Pointer<__SecTask>;

class __SecTask extends ffi.Opaque {}

class audit_token_t extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> val;
}

typedef SecTransformRef = coreFoundation.CFTypeRef;
typedef SecGroupTransformRef = coreFoundation.CFTypeRef;

/// The SecTransformImplementationRef is a pointer to a block that implements an
/// instance of a transform.
typedef SecTransformImplementationRef
    = ffi.Pointer<OpaqueSecTransformImplementation>;

class OpaqueSecTransformImplementation extends ffi.Opaque {}

/// This type signifies that either a CFStringRef or a SecTransformAttributeRef
/// may be used.
typedef SecTransformStringOrAttributeRef = coreFoundation.CFTypeRef;
typedef SecTransformMetaAttributeType = coreFoundation.CFIndex;

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;

const int errSecCSUnimplemented = -67072;

const int errSecCSInvalidObjectRef = -67071;

const int errSecCSInvalidFlags = -67070;

const int errSecCSObjectRequired = -67069;

const int errSecCSStaticCodeNotFound = -67068;

const int errSecCSUnsupportedGuestAttributes = -67067;

const int errSecCSInvalidAttributeValues = -67066;

const int errSecCSNoSuchCode = -67065;

const int errSecCSMultipleGuests = -67064;

const int errSecCSGuestInvalid = -67063;

const int errSecCSUnsigned = -67062;

const int errSecCSSignatureFailed = -67061;

const int errSecCSSignatureNotVerifiable = -67060;

const int errSecCSSignatureUnsupported = -67059;

const int errSecCSBadDictionaryFormat = -67058;

const int errSecCSResourcesNotSealed = -67057;

const int errSecCSResourcesNotFound = -67056;

const int errSecCSResourcesInvalid = -67055;

const int errSecCSBadResource = -67054;

const int errSecCSResourceRulesInvalid = -67053;

const int errSecCSReqInvalid = -67052;

const int errSecCSReqUnsupported = -67051;

const int errSecCSReqFailed = -67050;

const int errSecCSBadObjectFormat = -67049;

const int errSecCSInternalError = -67048;

const int errSecCSHostReject = -67047;

const int errSecCSNotAHost = -67046;

const int errSecCSSignatureInvalid = -67045;

const int errSecCSHostProtocolRelativePath = -67044;

const int errSecCSHostProtocolContradiction = -67043;

const int errSecCSHostProtocolDedicationError = -67042;

const int errSecCSHostProtocolNotProxy = -67041;

const int errSecCSHostProtocolStateError = -67040;

const int errSecCSHostProtocolUnrelated = -67039;

const int errSecCSNotSupported = -67037;

const int errSecCSCMSTooLarge = -67036;

const int errSecCSHostProtocolInvalidHash = -67035;

const int errSecCSStaticCodeChanged = -67034;

const int errSecCSDBDenied = -67033;

const int errSecCSDBAccess = -67032;

const int errSecCSSigDBDenied = -67033;

const int errSecCSSigDBAccess = -67032;

const int errSecCSHostProtocolInvalidAttribute = -67031;

const int errSecCSInfoPlistFailed = -67030;

const int errSecCSNoMainExecutable = -67029;

const int errSecCSBadBundleFormat = -67028;

const int errSecCSNoMatches = -67027;

const int errSecCSFileHardQuarantined = -67026;

const int errSecCSOutdated = -67025;

const int errSecCSDbCorrupt = -67024;

const int errSecCSResourceDirectoryFailed = -67023;

const int errSecCSUnsignedNestedCode = -67022;

const int errSecCSBadNestedCode = -67021;

const int errSecCSBadCallbackValue = -67020;

const int errSecCSHelperFailed = -67019;

const int errSecCSVetoed = -67018;

const int errSecCSBadLVArch = -67017;

const int errSecCSResourceNotSupported = -67016;

const int errSecCSRegularFile = -67015;

const int errSecCSUnsealedAppRoot = -67014;

const int errSecCSWeakResourceRules = -67013;

const int errSecCSDSStoreSymlink = -67012;

const int errSecCSAmbiguousBundleFormat = -67011;

const int errSecCSBadMainExecutable = -67010;

const int errSecCSBadFrameworkVersion = -67009;

const int errSecCSUnsealedFrameworkRoot = -67008;

const int errSecCSWeakResourceEnvelope = -67007;

const int errSecCSCancelled = -67006;

const int errSecCSInvalidPlatform = -67005;

const int errSecCSTooBig = -67004;

const int errSecCSInvalidSymlink = -67003;

const int errSecCSNotAppLike = -67002;

const int errSecCSBadDiskImageFormat = -67001;

const int errSecCSUnsupportedDigestAlgorithm = -67000;

const int errSecCSInvalidAssociatedFileData = -66999;

const int errSecCSInvalidTeamIdentifier = -66998;

const int errSecCSBadTeamIdentifier = -66997;

const int errSecCSSignatureUntrusted = -66996;

const int errSecMultipleExecSegments = -66995;

const int errSecCSInvalidEntitlements = -66994;

const int errSecCSInvalidRuntimeVersion = -66993;

const int errSecCSRevokedNotarization = -66992;
